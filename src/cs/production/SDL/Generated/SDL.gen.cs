
// <auto-generated>
//  This code was generated by the following tool on 2023-08-31 14:43:54 GMT+00:00:
//      https://github.com/bottlenoselabs/c2cs (v6.1.3.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ReSharper disable All

#region Template
#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8981
using bottlenoselabs.C2CS.Runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
#endregion

namespace bottlenoselabs;

public static unsafe partial class SDL
{
    private const string LibraryName = "SDL3";

    #region API

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AddEventWatch", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_AddEventWatch(SDL_EventFilter filter, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AddGamepadMapping", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddGamepadMapping(CString mapping);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AddGamepadMappingsFromFile", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddGamepadMappingsFromFile(CString file);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AddGamepadMappingsFromRW", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddGamepadMappingsFromRW(SDL_RWops* src, CBool freesrc);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AddHintCallback", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AddTimer", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_TimerID SDL_AddTimer(uint interval, SDL_TimerCallback callback, void* param);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicAdd", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicAdd(SDL_AtomicInt* a, int v);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicCAS", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_AtomicCAS(SDL_AtomicInt* a, int oldval, int newval);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicCASPtr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_AtomicCASPtr(void** a, void* oldval, void* newval);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicGet", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicGet(SDL_AtomicInt* a);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicGetPtr", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_AtomicGetPtr(void** a);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicLock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_AtomicLock(SDL_SpinLock* @lock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicSet", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicSet(SDL_AtomicInt* a, int v);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicSetPtr", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_AtomicSetPtr(void** a, void* v);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicTryLock", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_AtomicTryLock(SDL_SpinLock* @lock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AtomicUnlock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_AtomicUnlock(SDL_SpinLock* @lock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AttachVirtualJoystick", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickID SDL_AttachVirtualJoystick(SDL_JoystickType type, int naxes, int nbuttons, int nhats);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_AttachVirtualJoystickEx", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickID SDL_AttachVirtualJoystickEx(SDL_VirtualJoystickDesc* desc);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_BindAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_BindAudioStreams", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream** streams, int num_streams);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_BlitSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurface(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_BlitSurfaceScaled", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_BlitSurfaceUnchecked", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceUnchecked(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_BlitSurfaceUncheckedScaled", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceUncheckedScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_BroadcastCondition", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BroadcastCondition(SDL_Condition* cond);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CaptureMouse", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CaptureMouse(CBool enabled);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CleanupTLS", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CleanupTLS();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ClearAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearAudioStream(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ClearClipboardData", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearClipboardData();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ClearComposition", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ClearComposition();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ClearError", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ClearError();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ClearHints", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ClearHints();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CloseAudioDevice", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseAudioDevice(SDL_AudioDeviceID devid);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CloseGamepad", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseGamepad(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CloseJoystick", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseJoystick(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CloseSensor", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseSensor(SDL_Sensor* sensor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ComposeCustomBlendMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ConvertAudioSamples", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ConvertAudioSamples(SDL_AudioSpec* src_spec, byte* src_data, int src_len, SDL_AudioSpec* dst_spec, byte** dst_data, int* dst_len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ConvertEventToRenderCoordinates", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ConvertEventToRenderCoordinates(SDL_Renderer* renderer, SDL_Event* @event);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ConvertPixels", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ConvertPixels(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, void* dst, int dst_pitch);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ConvertSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_ConvertSurface(SDL_Surface* surface, SDL_PixelFormat* format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ConvertSurfaceFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* surface, uint pixel_format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AudioStream* SDL_CreateAudioStream(SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateColorCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateCondition", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Condition* SDL_CreateCondition();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Cursor* SDL_CreateCursor(byte* data, byte* mask, int w, int h, int hot_x, int hot_y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateMutex", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Mutex* SDL_CreateMutex();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreatePalette", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Palette* SDL_CreatePalette(int ncolors);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreatePixelFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PixelFormat* SDL_CreatePixelFormat(uint pixel_format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreatePopupWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_CreatePopupWindow(SDL_Window* parent, int offset_x, int offset_y, int w, int h, uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateRW", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_RWops* SDL_CreateRW();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateRWLock", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_RWLock* SDL_CreateRWLock();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateRenderer", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, CString name, uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateSemaphore", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Semaphore* SDL_CreateSemaphore(uint initial_value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateShapedWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_CreateShapedWindow(CString title, int w, int h, uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateSoftwareRenderer", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_CreateSurface(int width, int height, uint format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateSurfaceFrom", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_CreateSurfaceFrom(void* pixels, int width, int height, int pitch, uint format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateSystemCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateTLS", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_TLSID SDL_CreateTLS();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, uint format, int access, int w, int h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateTextureFromSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_CreateWindow(CString title, int w, int h, uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateWindowAndRenderer", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CreateWindowAndRenderer(int width, int height, uint window_flags, SDL_Window** window, SDL_Renderer** renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateWindowFrom", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_CreateWindowFrom(void* data);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CreateWindowWithPosition", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_CreateWindowWithPosition(CString title, int x, int y, int w, int h, uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_CursorVisible", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_CursorVisible();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DelEventWatch", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DelEventWatch(SDL_EventFilter filter, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DelHintCallback", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DelHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Delay", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Delay(uint ms);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DelayNS", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DelayNS(ulong ns);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyAudioStream(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyCondition", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyCondition(SDL_Condition* cond);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyCursor(SDL_Cursor* cursor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyMutex", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyMutex(SDL_Mutex* mutex);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyPalette", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyPalette(SDL_Palette* palette);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyPixelFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyPixelFormat(SDL_PixelFormat* format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyRW", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyRW(SDL_RWops* context);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyRWLock", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyRWLock(SDL_RWLock* rwlock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyRenderer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyRenderer(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroySemaphore", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroySemaphore(SDL_Semaphore* sem);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroySurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroySurface(SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyTexture(SDL_Texture* texture);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DestroyWindowSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_DestroyWindowSurface(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DetachThread", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DetachThread(SDL_Thread* thread);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DetachVirtualJoystick", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DisableScreenSaver", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_DisableScreenSaver();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_DuplicateSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_EGL_GetCurrentEGLConfig", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_EGLConfig SDL_EGL_GetCurrentEGLConfig();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_EGL_GetCurrentEGLDisplay", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_EGLDisplay SDL_EGL_GetCurrentEGLDisplay();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_EGL_GetProcAddress", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_FunctionPointer SDL_EGL_GetProcAddress(CString proc);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_EGL_GetWindowEGLSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_EGLSurface SDL_EGL_GetWindowEGLSurface(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_EGL_SetEGLAttributeCallbacks", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_EGL_SetEGLAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback, SDL_EGLIntArrayCallback surfaceAttribCallback, SDL_EGLIntArrayCallback contextAttribCallback);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_EnableScreenSaver", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_EnableScreenSaver();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Error", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_Error(SDL_errorcode code);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_EventEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_EventEnabled(uint type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_FillSurfaceRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FillSurfaceRect(SDL_Surface* dst, SDL_Rect* rect, uint color);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_FillSurfaceRects", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FillSurfaceRects(SDL_Surface* dst, SDL_Rect* rects, int count, uint color);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_FilterEvents", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_FilterEvents(SDL_EventFilter filter, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_FlashWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FlashWindow(SDL_Window* window, SDL_FlashOperation operation);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_FlushAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FlushAudioStream(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_FlushEvent", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_FlushEvent(uint type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_FlushEvents", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_FlushEvents(uint minType, uint maxType);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_BindTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_BindTexture(SDL_Texture* texture, float* texw, float* texh);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_CreateContext", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GLContext SDL_GL_CreateContext(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_DeleteContext", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_DeleteContext(SDL_GLContext context);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_ExtensionSupported", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GL_ExtensionSupported(CString extension);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_GetAttribute", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_GetAttribute(SDL_GLattr attr, int* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_GetCurrentContext", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GLContext SDL_GL_GetCurrentContext();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_GetCurrentWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_GL_GetCurrentWindow();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_GetProcAddress", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_FunctionPointer SDL_GL_GetProcAddress(CString proc);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_GetSwapInterval", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_GetSwapInterval(int* interval);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_LoadLibrary", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_LoadLibrary(CString path);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_MakeCurrent", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_ResetAttributes", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GL_ResetAttributes();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_SetAttribute", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_SetAttribute(SDL_GLattr attr, int value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_SetSwapInterval", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_SetSwapInterval(int interval);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_SwapWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_SwapWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_UnbindTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_UnbindTexture(SDL_Texture* texture);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GL_UnloadLibrary", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GL_UnloadLibrary();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GUIDFromString", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GUID SDL_GUIDFromString(CString pchGUID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GUIDToString", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GUIDToString(SDL_GUID guid, CString pszGUID, int cbGUID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadConnected", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadConnected(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadEventsEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadEventsEnabled();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadHasAxis", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadHasAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadHasButton", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadHasButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadHasLED", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadHasLED(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadHasRumble", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadHasRumble(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadHasRumbleTriggers", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadHasRumbleTriggers(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadHasSensor", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadHasSensor(SDL_Gamepad* gamepad, SDL_SensorType type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GamepadSensorEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAssertionHandler", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AssertionHandler SDL_GetAssertionHandler(void** puserdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAssertionReport", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AssertData* SDL_GetAssertionReport();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioCaptureDevices", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AudioDeviceID* SDL_GetAudioCaptureDevices(int* count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioDeviceFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec* spec);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioDeviceName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetAudioDeviceName(SDL_AudioDeviceID devid);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioDriver", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetAudioDriver(int index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioOutputDevices", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AudioDeviceID* SDL_GetAudioOutputDevices(int* count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioStreamAvailable", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioStreamAvailable(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioStreamData", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioStreamDevice", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AudioDeviceID SDL_GetAudioStreamDevice(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetAudioStreamFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioStreamFormat(SDL_AudioStream* stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetBasePath", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetBasePath();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCPUCacheLineSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCPUCacheLineSize();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCPUCount", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCPUCount();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetClipboardData", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_GetClipboardData(CString mime_type, ulong* size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetClipboardText", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetClipboardText();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetClosestFullscreenDisplayMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayMode* SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, CBool include_high_density_modes);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCurrentAudioDriver", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetCurrentAudioDriver();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCurrentDisplayMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayMode* SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCurrentDisplayOrientation", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCurrentRenderOutputSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCurrentVideoDriver", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetCurrentVideoDriver();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Cursor* SDL_GetCursor();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDefaultAssertionHandler", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AssertionHandler SDL_GetDefaultAssertionHandler();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDefaultCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Cursor* SDL_GetDefaultCursor();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDesktopDisplayMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayMode* SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplayBounds", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDisplayBounds(SDL_DisplayID displayID, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplayContentScale", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetDisplayContentScale(SDL_DisplayID displayID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplayForPoint", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayID SDL_GetDisplayForPoint(SDL_Point* point);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplayForRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayID SDL_GetDisplayForRect(SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplayForWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayID SDL_GetDisplayForWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplayName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetDisplayName(SDL_DisplayID displayID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplayUsableBounds", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetDisplays", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayID* SDL_GetDisplays(int* count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetError", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetError();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetErrorMsg", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetErrorMsg(CString errstr, int maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetEventFilter", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetFullscreenDisplayModes", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayMode** SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, int* count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadAxis", CallingConvention = CallingConvention.Cdecl)]
    public static extern short SDL_GetGamepadAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadAxisFromString", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadAxis SDL_GetGamepadAxisFromString(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadButton", CallingConvention = CallingConvention.Cdecl)]
    public static extern byte SDL_GetGamepadButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadButtonFromString", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadButton SDL_GetGamepadButtonFromString(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadFirmwareVersion", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetGamepadFirmwareVersion(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadFromInstanceID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Gamepad* SDL_GetGamepadFromInstanceID(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadFromPlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Gamepad* SDL_GetGamepadFromPlayerIndex(int player_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceGUID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickGUID SDL_GetGamepadInstanceGUID(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickID SDL_GetGamepadInstanceID(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceMapping", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadInstanceMapping(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadInstanceName(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstancePath", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadInstancePath(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstancePlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadInstancePlayerIndex(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceProduct", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetGamepadInstanceProduct(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceProductVersion", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetGamepadInstanceProductVersion(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetGamepadInstanceType(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadInstanceVendor", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetGamepadInstanceVendor(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadJoystick", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Joystick* SDL_GetGamepadJoystick(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadMapping", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadMapping(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadMappingForGUID", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadMappingForGUID(SDL_JoystickGUID guid);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadMappingForIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadMappingForIndex(int mapping_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadName(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadPath", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadPath(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadPlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadPlayerIndex(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadPowerLevel", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickPowerLevel SDL_GetGamepadPowerLevel(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadProduct", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetGamepadProduct(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadProductVersion", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetGamepadProductVersion(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadSensorData", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadSensorData(SDL_Gamepad* gamepad, SDL_SensorType type, float* data, int num_values);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadSensorDataRate", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SDL_SensorType type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadSerial", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadSerial(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForAxis", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForButton", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadStringForButton(SDL_GamepadButton button);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForType", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetGamepadStringForType(SDL_GamepadType type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadTouchpadFinger", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadTouchpadFinger(SDL_Gamepad* gamepad, int touchpad, int finger, byte* state, float* x, float* y, float* pressure);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadTypeFromString", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetGamepadTypeFromString(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepadVendor", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetGamepadVendor(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGamepads", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickID* SDL_GetGamepads(int* count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGlobalMouseState", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_GetGlobalMouseState(float* x, float* y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetGrabbedWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_GetGrabbedWindow();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetHint", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetHint(CString name);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetHintBoolean", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetHintBoolean(CString name, CBool default_value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickAxis", CallingConvention = CallingConvention.Cdecl)]
    public static extern short SDL_GetJoystickAxis(SDL_Joystick* joystick, int axis);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickAxisInitialState", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetJoystickAxisInitialState(SDL_Joystick* joystick, int axis, short* state);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickButton", CallingConvention = CallingConvention.Cdecl)]
    public static extern byte SDL_GetJoystickButton(SDL_Joystick* joystick, int button);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickFirmwareVersion", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetJoystickFirmwareVersion(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickFromInstanceID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Joystick* SDL_GetJoystickFromInstanceID(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickFromPlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Joystick* SDL_GetJoystickFromPlayerIndex(int player_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickGUID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickGUID SDL_GetJoystickGUID(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickGUIDFromString", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickGUID SDL_GetJoystickGUIDFromString(CString pchGUID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickGUIDInfo", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetJoystickGUIDInfo(SDL_JoystickGUID guid, ushort* vendor, ushort* product, ushort* version, ushort* crc16);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickGUIDString", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetJoystickGUIDString(SDL_JoystickGUID guid, CString pszGUID, int cbGUID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickHat", CallingConvention = CallingConvention.Cdecl)]
    public static extern byte SDL_GetJoystickHat(SDL_Joystick* joystick, int hat);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstanceGUID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickGUID SDL_GetJoystickInstanceGUID(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstanceID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickID SDL_GetJoystickInstanceID(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstanceName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetJoystickInstanceName(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstancePath", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetJoystickInstancePath(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstancePlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetJoystickInstancePlayerIndex(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstanceProduct", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetJoystickInstanceProduct(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstanceProductVersion", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetJoystickInstanceProductVersion(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstanceType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickType SDL_GetJoystickInstanceType(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickInstanceVendor", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetJoystickInstanceVendor(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetJoystickName(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickPath", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetJoystickPath(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickPlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetJoystickPlayerIndex(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickPowerLevel", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickPowerLevel SDL_GetJoystickPowerLevel(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickProduct", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetJoystickProduct(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickProductVersion", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetJoystickProductVersion(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickSerial", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetJoystickSerial(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickType SDL_GetJoystickType(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoystickVendor", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_GetJoystickVendor(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetJoysticks", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickID* SDL_GetJoysticks(int* count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetKeyFromName", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Keycode SDL_GetKeyFromName(CString name);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetKeyFromScancode", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetKeyName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetKeyName(SDL_Keycode key);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetKeyboardFocus", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_GetKeyboardFocus();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetKeyboardState", CallingConvention = CallingConvention.Cdecl)]
    public static extern byte* SDL_GetKeyboardState(int* numkeys);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetMasksForPixelFormatEnum", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetMasksForPixelFormatEnum(uint format, int* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetMemoryFunctions", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetModState", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Keymod SDL_GetModState();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetMouseFocus", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_GetMouseFocus();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetMouseState", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_GetMouseState(float* x, float* y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNaturalDisplayOrientation", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumAllocations", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumAllocations();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumAudioDrivers", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumAudioDrivers();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumGamepadMappings", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumGamepadMappings();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumGamepadTouchpadFingers", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumGamepadTouchpads", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumGamepadTouchpads(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumJoystickAxes", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumJoystickAxes(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumJoystickButtons", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumJoystickButtons(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumJoystickHats", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumJoystickHats(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumRenderDrivers", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumRenderDrivers();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumTouchDevices", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumTouchDevices();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumTouchFingers", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumTouchFingers(SDL_TouchID touchID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetNumVideoDrivers", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumVideoDrivers();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetOriginalMemoryFunctions", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetOriginalMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPerformanceCounter", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_GetPerformanceCounter();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPerformanceFrequency", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_GetPerformanceFrequency();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPixelFormatEnumForMasks", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_GetPixelFormatEnumForMasks(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPixelFormatName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetPixelFormatName(uint format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPlatform", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetPlatform();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPowerInfo", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PowerState SDL_GetPowerInfo(int* seconds, int* percent);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPrefPath", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetPrefPath(CString org, CString app);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPreferredLocales", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Locale* SDL_GetPreferredLocales();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPrimaryDisplay", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayID SDL_GetPrimaryDisplay();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetPrimarySelectionText", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetPrimarySelectionText();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRGB", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetRGB(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRGBA", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetRGBA(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b, byte* a);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRealGamepadInstanceType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetRealGamepadInstanceType(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRealGamepadType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad* gamepad);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectAndLineIntersection", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetRectAndLineIntersection(SDL_Rect* rect, int* X1, int* Y1, int* X2, int* Y2);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectAndLineIntersectionFloat", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetRectAndLineIntersectionFloat(SDL_FRect* rect, float* X1, float* Y1, float* X2, float* Y2);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectEnclosingPoints", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetRectEnclosingPoints(SDL_Point* points, int count, SDL_Rect* clip, SDL_Rect* result);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectEnclosingPointsFloat", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetRectEnclosingPointsFloat(SDL_FPoint* points, int count, SDL_FRect* clip, SDL_FRect* result);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectIntersection", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetRectIntersection(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectIntersectionFloat", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetRectIntersectionFloat(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectUnion", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectUnion(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRectUnionFloat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectUnionFloat(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRelativeMouseMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetRelativeMouseMode();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRelativeMouseState", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_GetRelativeMouseState(float* x, float* y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderClipRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderDrawBlendMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderDrawColor", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderDrawColor(SDL_Renderer* renderer, byte* r, byte* g, byte* b, byte* a);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderDriver", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetRenderDriver(int index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderLogicalPresentation", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderLogicalPresentation(SDL_Renderer* renderer, int* w, int* h, SDL_RendererLogicalPresentation* mode, SDL_ScaleMode* scale_mode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderMetalCommandEncoder", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_GetRenderMetalCommandEncoder(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderMetalLayer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_GetRenderMetalLayer(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderOutputSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderScale", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderTarget", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderVSync", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderVSync(SDL_Renderer* renderer, int* vsync);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderViewport", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_GetRenderWindow(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRenderer", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Renderer* SDL_GetRenderer(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRendererInfo", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRendererInfo(SDL_Renderer* renderer, SDL_RendererInfo* info);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetRevision", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetRevision();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetScancodeFromKey", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetScancodeFromName", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Scancode SDL_GetScancodeFromName(CString name);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetScancodeName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetScancodeName(SDL_Scancode scancode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSemaphoreValue", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_GetSemaphoreValue(SDL_Semaphore* sem);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorData", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSensorData(SDL_Sensor* sensor, float* data, int num_values);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorFromInstanceID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Sensor* SDL_GetSensorFromInstanceID(SDL_SensorID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorInstanceID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SensorID SDL_GetSensorInstanceID(SDL_Sensor* sensor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorInstanceName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetSensorInstanceName(SDL_SensorID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorInstanceNonPortableType", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSensorInstanceNonPortableType(SDL_SensorID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorInstanceType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SensorType SDL_GetSensorInstanceType(SDL_SensorID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetSensorName(SDL_Sensor* sensor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorNonPortableType", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSensorNonPortableType(SDL_Sensor* sensor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensorType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SensorType SDL_GetSensorType(SDL_Sensor* sensor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSensors", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SensorID* SDL_GetSensors(int* count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetShapedWindowMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetShapedWindowMode(SDL_Window* window, SDL_WindowShapeMode* shape_mode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSilenceValueForFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSilenceValueForFormat(SDL_AudioFormat format);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSurfaceAlphaMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, byte* alpha);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSurfaceBlendMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSurfaceClipRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceClipRect(SDL_Surface* surface, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorKey", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceColorKey(SDL_Surface* surface, uint* key);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceColorMod(SDL_Surface* surface, byte* r, byte* g, byte* b);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSystemRAM", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSystemRAM();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetSystemTheme", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SystemTheme SDL_GetSystemTheme();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTLS", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_GetTLS(SDL_TLSID id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTextureAlphaMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureAlphaMod(SDL_Texture* texture, byte* alpha);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTextureBlendMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTextureColorMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureColorMod(SDL_Texture* texture, byte* r, byte* g, byte* b);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTextureScaleMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTextureUserData", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_GetTextureUserData(SDL_Texture* texture);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetThreadName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetThreadName(SDL_Thread* thread);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTicks", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_GetTicks();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTicksNS", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_GetTicksNS();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTouchDevice", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_TouchID SDL_GetTouchDevice(int index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTouchDeviceType", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTouchFinger", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID, int index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetTouchName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetTouchName(int index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetUserFolder", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetUserFolder(SDL_Folder folder);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetVersion", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetVersion(SDL_version* ver);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetVideoDriver", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetVideoDriver(int index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowBordersSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowBordersSize(SDL_Window* window, int* top, int* left, int* bottom, int* right);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowData", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_GetWindowData(SDL_Window* window, CString name);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowDisplayScale", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetWindowDisplayScale(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowFlags", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_GetWindowFlags(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowFromID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_GetWindowFromID(SDL_WindowID id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowFullscreenMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayMode* SDL_GetWindowFullscreenMode(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowGrab", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetWindowGrab(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowICCProfile", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_GetWindowICCProfile(SDL_Window* window, ulong* size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowID", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_WindowID SDL_GetWindowID(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowKeyboardGrab", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetWindowKeyboardGrab(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowMaximumSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowMaximumSize(SDL_Window* window, int* w, int* h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowMinimumSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowMinimumSize(SDL_Window* window, int* w, int* h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowMouseGrab", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_GetWindowMouseGrab(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowMouseRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Rect* SDL_GetWindowMouseRect(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowOpacity", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowOpacity(SDL_Window* window, float* out_opacity);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowParent", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Window* SDL_GetWindowParent(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowPixelDensity", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetWindowPixelDensity(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowPixelFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_GetWindowPixelFormat(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowPosition", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowPosition(SDL_Window* window, int* x, int* y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowSize(SDL_Window* window, int* w, int* h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowSizeInPixels", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowSizeInPixels(SDL_Window* window, int* w, int* h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_GetWindowSurface(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetWindowTitle", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_GetWindowTitle(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetYUVConversionMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_GetYUVConversionModeForResolution", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticClose", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_HapticClose(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticDestroyEffect", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_HapticDestroyEffect(SDL_Haptic* haptic, int effect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticEffectSupported", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticGetEffectStatus", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticGetEffectStatus(SDL_Haptic* haptic, int effect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticIndex(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticName", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_HapticName(int device_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticNewEffect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticNewEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticNumAxes", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticNumAxes(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticNumEffects", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticNumEffects(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticNumEffectsPlaying", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticNumEffectsPlaying(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticOpen", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Haptic* SDL_HapticOpen(int device_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticOpenFromJoystick", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticOpenFromMouse", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Haptic* SDL_HapticOpenFromMouse();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticOpened", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticOpened(int device_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticPause", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticPause(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticQuery", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_HapticQuery(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticRumbleInit", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticRumbleInit(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticRumblePlay", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticRumblePlay(SDL_Haptic* haptic, float strength, uint length);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticRumbleStop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticRumbleStop(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticRumbleSupported", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticRumbleSupported(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticRunEffect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticRunEffect(SDL_Haptic* haptic, int effect, uint iterations);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticSetAutocenter", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticSetAutocenter(SDL_Haptic* haptic, int autocenter);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticSetGain", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticSetGain(SDL_Haptic* haptic, int gain);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticStopAll", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticStopAll(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticStopEffect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticStopEffect(SDL_Haptic* haptic, int effect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticUnpause", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticUnpause(SDL_Haptic* haptic);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HapticUpdateEffect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticUpdateEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasARMSIMD", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasARMSIMD();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasAVX", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasAVX();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasAVX2", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasAVX2();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasAVX512F", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasAVX512F();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasAltiVec", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasAltiVec();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasClipboardData", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasClipboardData(CString mime_type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasClipboardText", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasClipboardText();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasEvent", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasEvent(uint type);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasEvents", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasEvents(uint minType, uint maxType);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasLASX", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasLASX();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasLSX", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasLSX();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasMMX", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasMMX();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasNEON", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasNEON();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasPrimarySelectionText", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasPrimarySelectionText();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasRectIntersection", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasRectIntersection(SDL_Rect* A, SDL_Rect* B);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasRectIntersectionFloat", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasRectIntersectionFloat(SDL_FRect* A, SDL_FRect* B);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasSSE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasSSE();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasSSE2", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasSSE2();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasSSE3", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasSSE3();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasSSE41", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasSSE41();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasSSE42", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasSSE42();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasScreenKeyboardSupport", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasScreenKeyboardSupport();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HasWindowSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_HasWindowSurface(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HideCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HideCursor();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_HideWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HideWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_Init(uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_InitSubSystem", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_InitSubSystem(uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_IsAudioDevicePaused", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_IsAudioDevicePaused(SDL_AudioDeviceID dev);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_IsGamepad", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_IsGamepad(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_IsJoystickVirtual", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_IsShapedWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_IsShapedWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_IsTablet", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_IsTablet();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_JoystickConnected", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_JoystickConnected(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_JoystickEventsEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_JoystickEventsEnabled();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_JoystickHasLED", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_JoystickHasLED(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_JoystickHasRumble", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_JoystickHasRumble(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_JoystickHasRumbleTriggers", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_JoystickHasRumbleTriggers(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_JoystickIsHaptic", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_JoystickIsHaptic(SDL_Joystick* joystick);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadBMP", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_LoadBMP(CString file);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadBMP_RW", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Surface* SDL_LoadBMP_RW(SDL_RWops* src, CBool freesrc);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadFile", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_LoadFile(CString file, ulong* datasize);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadFile_RW", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_LoadFile_RW(SDL_RWops* src, ulong* datasize, CBool freesrc);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadFunction", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_FunctionPointer SDL_LoadFunction(void* handle, CString name);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadObject", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_LoadObject(CString sofile);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadWAV", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LoadWAV(CString path, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LoadWAV_RW", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LoadWAV_RW(SDL_RWops* src, CBool freesrc, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockAudioStream(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockJoysticks", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LockJoysticks();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockMutex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockMutex(SDL_Mutex* mutex);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockRWLockForReading", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockRWLockForReading(SDL_RWLock* rwlock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockRWLockForWriting", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockRWLockForWriting(SDL_RWLock* rwlock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockSurface(SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockTexture(SDL_Texture* texture, SDL_Rect* rect, void** pixels, int* pitch);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LockTextureToSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockTextureToSurface(SDL_Texture* texture, SDL_Rect* rect, SDL_Surface** surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Log", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Log(CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogCritical", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogCritical(int category, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogDebug", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogDebug(int category, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogError", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogError(int category, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogGetOutputFunction", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogGetOutputFunction(SDL_LogOutputFunction* callback, void** userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogGetPriority", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_LogPriority SDL_LogGetPriority(int category);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogInfo", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogInfo(int category, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogMessage", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogMessage(int category, SDL_LogPriority priority, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogMessageV", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogMessageV(int category, SDL_LogPriority priority, CString fmt, void* ap);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogResetPriorities", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogResetPriorities();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogSetAllPriority", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogSetAllPriority(SDL_LogPriority priority);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogSetOutputFunction", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogSetPriority", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogSetPriority(int category, SDL_LogPriority priority);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogVerbose", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogVerbose(int category, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_LogWarn", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogWarn(int category, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MapRGB", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_MapRGB(SDL_PixelFormat* format, byte r, byte g, byte b);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MapRGBA", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_MapRGBA(SDL_PixelFormat* format, byte r, byte g, byte b, byte a);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MaximizeWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MaximizeWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MemoryBarrierAcquireFunction", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_MemoryBarrierAcquireFunction();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MemoryBarrierReleaseFunction", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_MemoryBarrierReleaseFunction();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Metal_CreateView", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_MetalView SDL_Metal_CreateView(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Metal_DestroyView", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Metal_DestroyView(SDL_MetalView view);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Metal_GetLayer", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_Metal_GetLayer(SDL_MetalView view);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MinimizeWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MinimizeWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MixAudioFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MixAudioFormat(byte* dst, byte* src, SDL_AudioFormat format, uint len, int volume);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_MouseIsHaptic", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MouseIsHaptic();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_NumHaptics", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_NumHaptics();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OnApplicationDidBecomeActive", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationDidBecomeActive();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OnApplicationDidEnterBackground", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationDidEnterBackground();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationDidReceiveMemoryWarning();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OnApplicationWillEnterForeground", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationWillEnterForeground();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OnApplicationWillResignActive", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationWillResignActive();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OnApplicationWillTerminate", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationWillTerminate();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OpenAudioDevice", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AudioDeviceID SDL_OpenAudioDevice(SDL_AudioDeviceID devid, SDL_AudioSpec* spec);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OpenAudioDeviceStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AudioStream* SDL_OpenAudioDeviceStream(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, SDL_AudioStreamCallback callback, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OpenGamepad", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Gamepad* SDL_OpenGamepad(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OpenJoystick", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Joystick* SDL_OpenJoystick(SDL_JoystickID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OpenSensor", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Sensor* SDL_OpenSensor(SDL_SensorID instance_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_OpenURL", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_OpenURL(CString url);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PauseAudioDevice", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PauseAudioDevice(SDL_AudioDeviceID dev);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PeepEvents", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_eventaction action, uint minType, uint maxType);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PollEvent", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PollEvent(SDL_Event* @event);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PostSemaphore", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PostSemaphore(SDL_Semaphore* sem);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PremultiplyAlpha", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PremultiplyAlpha(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, void* dst, int dst_pitch);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PumpEvents", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_PumpEvents();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PushEvent", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PushEvent(SDL_Event* @event);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_PutAudioStreamData", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PutAudioStreamData(SDL_AudioStream* stream, void* buf, int len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_QueryTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_QueryTexture(SDL_Texture* texture, uint* format, int* access, int* w, int* h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_Quit", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Quit();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_QuitSubSystem", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_QuitSubSystem(uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWFromConstMem", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_RWops* SDL_RWFromConstMem(void* mem, ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWFromFile", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_RWops* SDL_RWFromFile(CString file, CString mode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWFromMem", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_RWops* SDL_RWFromMem(void* mem, ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWclose", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RWclose(SDL_RWops* context);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWread", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_RWread(SDL_RWops* context, void* ptr, ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWseek", CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_RWseek(SDL_RWops* context, long offset, int whence);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWsize", CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_RWsize(SDL_RWops* context);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWtell", CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_RWtell(SDL_RWops* context);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RWwrite", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_RWwrite(SDL_RWops* context, void* ptr, ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RaiseWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RaiseWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadS16BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadS16BE(SDL_RWops* src, short* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadS16LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadS16LE(SDL_RWops* src, short* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadS32BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadS32BE(SDL_RWops* src, int* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadS32LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadS32LE(SDL_RWops* src, int* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadS64BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadS64BE(SDL_RWops* src, long* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadS64LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadS64LE(SDL_RWops* src, long* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadU16BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadU16BE(SDL_RWops* src, ushort* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadU16LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadU16LE(SDL_RWops* src, ushort* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadU32BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadU32BE(SDL_RWops* src, uint* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadU32LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadU32LE(SDL_RWops* src, uint* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadU64BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadU64BE(SDL_RWops* src, ulong* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadU64LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadU64LE(SDL_RWops* src, ulong* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReadU8", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ReadU8(SDL_RWops* src, byte* value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RegisterEvents", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_RegisterEvents(int numevents);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReloadGamepadMappings", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReloadGamepadMappings();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RemoveTimer", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_RemoveTimer(SDL_TimerID id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderClear", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderClear(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderClipEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_RenderClipEnabled(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderCoordinatesFromWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderCoordinatesFromWindow(SDL_Renderer* renderer, float window_x, float window_y, float* x, float* y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderCoordinatesToWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderCoordinatesToWindow(SDL_Renderer* renderer, float x, float y, float* window_x, float* window_y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderFillRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderFillRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderFillRects", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderFillRects(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderFlush", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderFlush(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderGeometry", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderGeometry(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Vertex* vertices, int num_vertices, int* indices, int num_indices);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderGeometryRaw", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderGeometryRaw(SDL_Renderer* renderer, SDL_Texture* texture, float* xy, int xy_stride, SDL_Color* color, int color_stride, float* uv, int uv_stride, int num_vertices, void* indices, int num_indices, int size_indices);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderLine", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderLine(SDL_Renderer* renderer, float x1, float y1, float x2, float y2);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderLines", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderLines(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderPoint", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderPoint(SDL_Renderer* renderer, float x, float y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderPoints", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderPoints(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderPresent", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderPresent(SDL_Renderer* renderer);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderReadPixels", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderReadPixels(SDL_Renderer* renderer, SDL_Rect* rect, uint format, void* pixels, int pitch);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderRects", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderRects(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderTexture(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, SDL_FRect* dstrect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RenderTextureRotated", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderTextureRotated(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, SDL_FRect* dstrect, double angle, SDL_FPoint* center, SDL_RendererFlip flip);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ReportAssertion", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AssertState SDL_ReportAssertion(SDL_AssertData* data, CString func, CString file, int line);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ResetAssertionReport", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ResetAssertionReport();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ResetHint", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ResetHint(CString name);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ResetHints", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ResetHints();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ResetKeyboard", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ResetKeyboard();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RestoreWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RestoreWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ResumeAudioDevice", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ResumeAudioDevice(SDL_AudioDeviceID dev);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RumbleGamepad", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleGamepad(SDL_Gamepad* gamepad, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RumbleGamepadTriggers", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleGamepadTriggers(SDL_Gamepad* gamepad, ushort left_rumble, ushort right_rumble, uint duration_ms);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RumbleJoystick", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleJoystick(SDL_Joystick* joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_RumbleJoystickTriggers", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleJoystickTriggers(SDL_Joystick* joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SIMDGetAlignment", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_SIMDGetAlignment();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SaveBMP", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SaveBMP(SDL_Surface* surface, CString file);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SaveBMP_RW", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SaveBMP_RW(SDL_Surface* surface, SDL_RWops* dst, CBool freedst);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ScreenKeyboardShown", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ScreenKeyboardShown(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ScreenSaverEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_ScreenSaverEnabled();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SendGamepadEffect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SendGamepadEffect(SDL_Gamepad* gamepad, void* data, int size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SendJoystickEffect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SendJoystickEffect(SDL_Joystick* joystick, void* data, int size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetAssertionHandler", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetAudioStreamFormat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamFormat(SDL_AudioStream* stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetAudioStreamGetCallback", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamGetCallback(SDL_AudioStream* stream, SDL_AudioStreamCallback callback, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetAudioStreamPutCallback", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamPutCallback(SDL_AudioStream* stream, SDL_AudioStreamCallback callback, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetClipboardData", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void* userdata, CString* mime_types, ulong num_mime_types);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetClipboardText", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetClipboardText(CString text);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetCursor(SDL_Cursor* cursor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetError", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetError(CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetEventEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetEventEnabled(uint type, CBool enabled);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetEventFilter", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetGamepadEventsEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetGamepadEventsEnabled(CBool enabled);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetGamepadLED", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadLED(SDL_Gamepad* gamepad, byte red, byte green, byte blue);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetGamepadMapping", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadMapping(SDL_JoystickID instance_id, CString mapping);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetGamepadPlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetGamepadSensorEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type, CBool enabled);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetHint", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_SetHint(CString name, CString value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetHintWithPriority", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_SetHintWithPriority(CString name, CString value, SDL_HintPriority priority);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetJoystickEventsEnabled", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetJoystickEventsEnabled(CBool enabled);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetJoystickLED", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickLED(SDL_Joystick* joystick, byte red, byte green, byte blue);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetJoystickPlayerIndex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualAxis", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualAxis(SDL_Joystick* joystick, int axis, short value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualButton", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualButton(SDL_Joystick* joystick, int button, byte value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualHat", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualHat(SDL_Joystick* joystick, int hat, byte value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetMemoryFunctions", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func, SDL_realloc_func realloc_func, SDL_free_func free_func);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetModState", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetModState(SDL_Keymod modstate);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetPaletteColors", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetPixelFormatPalette", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetPixelFormatPalette(SDL_PixelFormat* format, SDL_Palette* palette);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetPrimarySelectionText", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetPrimarySelectionText(CString text);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRelativeMouseMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRelativeMouseMode(CBool enabled);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderClipRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderDrawBlendMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderDrawColor", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderDrawColor(SDL_Renderer* renderer, byte r, byte g, byte b, byte a);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderLogicalPresentation", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderLogicalPresentation(SDL_Renderer* renderer, int w, int h, SDL_RendererLogicalPresentation mode, SDL_ScaleMode scale_mode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderScale", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderTarget", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderVSync", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderVSync(SDL_Renderer* renderer, int vsync);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetRenderViewport", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetSurfaceAlphaMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, byte alpha);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetSurfaceBlendMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetSurfaceClipRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_SetSurfaceClipRect(SDL_Surface* surface, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorKey", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceColorKey(SDL_Surface* surface, int flag, uint key);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceColorMod(SDL_Surface* surface, byte r, byte g, byte b);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetSurfacePalette", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetSurfaceRLE", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceRLE(SDL_Surface* surface, int flag);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetTLS", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTLS(SDL_TLSID id, void* value, FnPtr_VoidPtr_Void destructor);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetTextInputRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextInputRect(SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetTextureAlphaMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureAlphaMod(SDL_Texture* texture, byte alpha);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetTextureBlendMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetTextureColorMod", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureColorMod(SDL_Texture* texture, byte r, byte g, byte b);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetTextureScaleMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetTextureUserData", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureUserData(SDL_Texture* texture, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetThreadPriority", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetThreadPriority(SDL_ThreadPriority priority);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowAlwaysOnTop", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowAlwaysOnTop(SDL_Window* window, CBool on_top);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowBordered", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowBordered(SDL_Window* window, CBool bordered);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowData", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_SetWindowData(SDL_Window* window, CString name, void* userdata);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowFocusable", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowFocusable(SDL_Window* window, CBool focusable);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowFullscreen", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowFullscreen(SDL_Window* window, CBool fullscreen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowFullscreenMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowFullscreenMode(SDL_Window* window, SDL_DisplayMode* mode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowGrab", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowGrab(SDL_Window* window, CBool grabbed);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowHitTest", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowIcon", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowInputFocus", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowInputFocus(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowKeyboardGrab", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowKeyboardGrab(SDL_Window* window, CBool grabbed);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowMaximumSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowMinimumSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowModalFor", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowMouseGrab", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMouseGrab(SDL_Window* window, CBool grabbed);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowMouseRect", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMouseRect(SDL_Window* window, SDL_Rect* rect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowOpacity", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowOpacity(SDL_Window* window, float opacity);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowPosition", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowPosition(SDL_Window* window, int x, int y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowResizable", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowResizable(SDL_Window* window, CBool resizable);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowShape", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowShape(SDL_Window* window, SDL_Surface* shape, SDL_WindowShapeMode* shape_mode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowSize", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowSize(SDL_Window* window, int w, int h);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetWindowTitle", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowTitle(SDL_Window* window, CString title);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SetYUVConversionMode", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ShowCursor", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowCursor();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ShowMessageBox", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, int* buttonid);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ShowSimpleMessageBox", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowSimpleMessageBox(uint flags, CString title, CString message, SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ShowWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowWindow(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ShowWindowSystemMenu", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowWindowSystemMenu(SDL_Window* window, int x, int y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SignalCondition", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SignalCondition(SDL_Condition* cond);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SoftStretch", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SoftStretch(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SoftStretchLinear", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SoftStretchLinear(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_StartTextInput", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_StartTextInput();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_StopTextInput", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_StopTextInput();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SurfaceHasColorKey", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_SurfaceHasColorKey(SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_SurfaceHasRLE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_SurfaceHasRLE(SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_TextInputActive", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_TextInputActive();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_TextInputShown", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_TextInputShown();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_TryLockMutex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryLockMutex(SDL_Mutex* mutex);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_TryLockRWLockForReading", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryLockRWLockForReading(SDL_RWLock* rwlock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_TryLockRWLockForWriting", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryLockRWLockForWriting(SDL_RWLock* rwlock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_TryWaitSemaphore", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryWaitSemaphore(SDL_Semaphore* sem);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnbindAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnbindAudioStream(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnbindAudioStreams", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnbindAudioStreams(SDL_AudioStream** streams, int num_streams);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnloadObject", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnloadObject(void* handle);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnlockAudioStream", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UnlockAudioStream(SDL_AudioStream* stream);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnlockJoysticks", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockJoysticks();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnlockMutex", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UnlockMutex(SDL_Mutex* mutex);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnlockRWLock", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UnlockRWLock(SDL_RWLock* rwlock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnlockSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockSurface(SDL_Surface* surface);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UnlockTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockTexture(SDL_Texture* texture);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateGamepads", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UpdateGamepads();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateJoysticks", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UpdateJoysticks();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateNVTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateNVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* UVplane, int UVpitch);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateSensors", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UpdateSensors();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateTexture(SDL_Texture* texture, SDL_Rect* rect, void* pixels, int pitch);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateWindowSurface", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateWindowSurface(SDL_Window* window);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateWindowSurfaceRects", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateWindowSurfaceRects(SDL_Window* window, SDL_Rect* rects, int numrects);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_UpdateYUVTexture", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateYUVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* Uplane, int Upitch, byte* Vplane, int Vpitch);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WaitCondition", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WaitConditionTimeout", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitConditionTimeout(SDL_Condition* cond, SDL_Mutex* mutex, int timeoutMS);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WaitEvent", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitEvent(SDL_Event* @event);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WaitEventTimeout", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitEventTimeout(SDL_Event* @event, int timeoutMS);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WaitSemaphore", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitSemaphore(SDL_Semaphore* sem);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WaitSemaphoreTimeout", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitSemaphoreTimeout(SDL_Semaphore* sem, int timeoutMS);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WaitThread", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_WaitThread(SDL_Thread* thread, int* status);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WarpMouseGlobal", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WarpMouseGlobal(float x, float y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WarpMouseInWindow", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_WarpMouseInWindow(SDL_Window* window, float x, float y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WasInit", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_WasInit(uint flags);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteS16BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteS16BE(SDL_RWops* dst, short value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteS16LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteS16LE(SDL_RWops* dst, short value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteS32BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteS32BE(SDL_RWops* dst, int value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteS32LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteS32LE(SDL_RWops* dst, int value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteS64BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteS64BE(SDL_RWops* dst, long value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteS64LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteS64LE(SDL_RWops* dst, long value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteU16BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteU16BE(SDL_RWops* dst, ushort value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteU16LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteU16LE(SDL_RWops* dst, ushort value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteU32BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteU32BE(SDL_RWops* dst, uint value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteU32LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteU32LE(SDL_RWops* dst, uint value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteU64BE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteU64BE(SDL_RWops* dst, ulong value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteU64LE", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteU64LE(SDL_RWops* dst, ulong value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_WriteU8", CallingConvention = CallingConvention.Cdecl)]
    public static extern CBool SDL_WriteU8(SDL_RWops* dst, byte value);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_abs", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_abs(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_acos", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_acos(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_acosf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_acosf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_aligned_alloc", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_aligned_alloc(ulong alignment, ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_aligned_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_aligned_free(void* mem);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_asin", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_asin(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_asinf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_asinf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_asprintf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_asprintf(CString* strp, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_atan", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_atan(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_atan2", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_atan2(double y, double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_atan2f", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_atan2f(float y, float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_atanf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_atanf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_atof", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_atof(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_atoi", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_atoi(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_bsearch", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_bsearch(void* key, void* @base, ulong nmemb, ulong size, FnPtr_VoidPtr_VoidPtr_Int compare);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_calloc", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_calloc(ulong nmemb, ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ceil", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_ceil(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ceilf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_ceilf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_copysign", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_copysign(double x, double y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_copysignf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_copysignf(float x, float y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_cos", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_cos(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_cosf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_cosf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_crc16", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort SDL_crc16(ushort crc, void* data, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_crc32", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_crc32(uint crc, void* data, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_exp", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_exp(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_expf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_expf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_fabs", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_fabs(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_fabsf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_fabsf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_floor", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_floor(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_floorf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_floorf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_fmod", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_fmod(double x, double y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_fmodf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_fmodf(float x, float y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_free", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_free(void* mem);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_getenv", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_getenv(CString name);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_ble_scan", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_hid_ble_scan(CBool active);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_close", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_close(SDL_hid_device* dev);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_device_change_count", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint SDL_hid_device_change_count();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_enumerate", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_hid_device_info* SDL_hid_enumerate(ushort vendor_id, ushort product_id);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_exit", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_exit();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_free_enumeration", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_hid_free_enumeration(SDL_hid_device_info* devs);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_device_info", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_hid_device_info* SDL_hid_get_device_info(SDL_hid_device* dev);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_feature_report", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_feature_report(SDL_hid_device* dev, byte* data, ulong length);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_indexed_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_indexed_string(SDL_hid_device* dev, int string_index, CStringWide @string, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_input_report", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_input_report(SDL_hid_device* dev, byte* data, ulong length);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_manufacturer_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_manufacturer_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_product_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_product_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_report_descriptor", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_report_descriptor(SDL_hid_device* dev, byte* buf, ulong buf_size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_get_serial_number_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_serial_number_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_init", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_init();

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_open", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_hid_device* SDL_hid_open(ushort vendor_id, ushort product_id, CStringWide serial_number);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_open_path", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_hid_device* SDL_hid_open_path(CString path);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_read", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_read(SDL_hid_device* dev, byte* data, ulong length);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_read_timeout", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_read_timeout(SDL_hid_device* dev, byte* data, ulong length, int milliseconds);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_send_feature_report", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_send_feature_report(SDL_hid_device* dev, byte* data, ulong length);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_set_nonblocking", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_set_nonblocking(SDL_hid_device* dev, int nonblock);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_hid_write", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_write(SDL_hid_device* dev, byte* data, ulong length);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_iconv", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_iconv(SDL_iconv_t cd, CString* inbuf, ulong* inbytesleft, CString* outbuf, ulong* outbytesleft);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_iconv_close", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_iconv_close(SDL_iconv_t cd);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_iconv_open", CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_iconv_t SDL_iconv_open(CString tocode, CString fromcode);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_iconv_string", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_iconv_string(CString tocode, CString fromcode, CString inbuf, ulong inbytesleft);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isalnum", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isalnum(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isalpha", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isalpha(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isblank", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isblank(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_iscntrl", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_iscntrl(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isdigit", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isdigit(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isgraph", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isgraph(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_islower", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_islower(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isprint", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isprint(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ispunct", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ispunct(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isspace", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isspace(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isupper", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isupper(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_isxdigit", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isxdigit(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_itoa", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_itoa(int value, CString str, int radix);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_lltoa", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_lltoa(long value, CString str, int radix);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_log", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_log(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_log10", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_log10(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_log10f", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_log10f(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_logf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_logf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_malloc", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_malloc(ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_memcmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_memcmp(void* s1, void* s2, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_memcpy", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_memcpy(void* dst, void* src, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_memmove", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_memmove(void* dst, void* src, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_memset", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_memset(void* dst, int c, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_memset4", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_memset4(void* dst, uint val, ulong dwords);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_modf", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_modf(double x, double* y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_modff", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_modff(float x, float* y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_pow", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_pow(double x, double y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_powf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_powf(float x, float y);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_qsort", CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_qsort(void* @base, ulong nmemb, ulong size, FnPtr_VoidPtr_VoidPtr_Int compare);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_realloc", CallingConvention = CallingConvention.Cdecl)]
    public static extern void* SDL_realloc(void* mem, ulong size);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_round", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_round(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_roundf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_roundf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_scalbn", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_scalbn(double x, int n);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_scalbnf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_scalbnf(float x, int n);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_setenv", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_setenv(CString name, CString value, int overwrite);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_sin", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_sin(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_sinf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_sinf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_snprintf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_snprintf(CString text, ulong maxlen, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_sqrt", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_sqrt(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_sqrtf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_sqrtf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_sscanf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_sscanf(CString text, CString fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strcasecmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strcasecmp(CString str1, CString str2);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strcasestr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strcasestr(CString haystack, CString needle);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strchr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strchr(CString str, int c);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strcmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strcmp(CString str1, CString str2);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strdup", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strdup(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strlcat", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_strlcat(CString dst, CString src, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strlcpy", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_strlcpy(CString dst, CString src, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strlen", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_strlen(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strlwr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strlwr(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strncasecmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strncasecmp(CString str1, CString str2, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strncmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strncmp(CString str1, CString str2, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strndup", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strndup(CString str, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strnlen", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_strnlen(CString str, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strrchr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strrchr(CString str, int c);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strrev", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strrev(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strstr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strstr(CString haystack, CString needle);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strtod", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_strtod(CString str, CString* endp);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strtok_r", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strtok_r(CString s1, CString s2, CString* saveptr);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strtoll", CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_strtoll(CString str, CString* endp, int @base);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strtoull", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_strtoull(CString str, CString* endp, int @base);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_strupr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_strupr(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_swprintf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_swprintf(CStringWide text, ulong maxlen, CStringWide fmt);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_tan", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_tan(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_tanf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_tanf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_tolower", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_tolower(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_toupper", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_toupper(int x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_trunc", CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_trunc(double x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_truncf", CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_truncf(float x);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_uitoa", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_uitoa(uint value, CString str, int radix);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_ulltoa", CallingConvention = CallingConvention.Cdecl)]
    public static extern CString SDL_ulltoa(ulong value, CString str, int radix);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_utf8strlcpy", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_utf8strlcpy(CString dst, CString src, ulong dst_bytes);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_utf8strlen", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_utf8strlen(CString str);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_utf8strnlen", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_utf8strnlen(CString str, ulong bytes);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_vasprintf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vasprintf(CString* strp, CString fmt, void* ap);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_vsnprintf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vsnprintf(CString text, ulong maxlen, CString fmt, void* ap);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_vsscanf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vsscanf(CString text, CString fmt, void* ap);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_vswprintf", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vswprintf(CStringWide text, ulong maxlen, CStringWide fmt, void* ap);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcscasecmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcscasecmp(CStringWide str1, CStringWide str2);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcscmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcscmp(CStringWide str1, CStringWide str2);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcsdup", CallingConvention = CallingConvention.Cdecl)]
    public static extern CStringWide SDL_wcsdup(CStringWide wstr);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcslcat", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_wcslcat(CStringWide dst, CStringWide src, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcslcpy", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_wcslcpy(CStringWide dst, CStringWide src, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcslen", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_wcslen(CStringWide wstr);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcsncasecmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcsncasecmp(CStringWide str1, CStringWide str2, ulong len);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcsncmp", CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcsncmp(CStringWide str1, CStringWide str2, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcsnlen", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_wcsnlen(CStringWide wstr, ulong maxlen);

    [CNode(Kind = "Function")]
    [DllImport(LibraryName, EntryPoint = "SDL_wcsstr", CallingConvention = CallingConvention.Cdecl)]
    public static extern CStringWide SDL_wcsstr(CStringWide haystack, CStringWide needle);

    #endregion

    #region Types

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState
    {
        public delegate* unmanaged<SDL_AssertData*, void*, SDL_AssertState> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLEGLAttribPtr
    {
        public delegate* unmanaged<SDL_EGLAttrib*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLEGLintPtr
    {
        public delegate* unmanaged<SDL_EGLint*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult
    {
        public delegate* unmanaged<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Uint_VoidPtr_Uint
    {
        public delegate* unmanaged<uint, void*, uint> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Ulong_Ulong_VoidPtr
    {
        public delegate* unmanaged<ulong, ulong, void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Ulong_VoidPtr
    {
        public delegate* unmanaged<ulong, void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Void
    {
        public delegate* unmanaged<void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Byte_Byte_Byte_Int
    {
        public delegate* unmanaged<void*, byte, byte, byte, int> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_CString_CString_Void
    {
        public delegate* unmanaged<void*, CString, CString, CString, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_UlongPtr_VoidPtr
    {
        public delegate* unmanaged<void*, CString, ulong*, void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Int
    {
        public delegate* unmanaged<void*, int> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void
    {
        public delegate* unmanaged<void*, int, SDL_LogPriority, CString, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Int_Void
    {
        public delegate* unmanaged<void*, int, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Void
    {
        public delegate* unmanaged<void*, SDL_AudioStream*, int, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLEventPtr_Int
    {
        public delegate* unmanaged<void*, SDL_Event*, int> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Ulong_VoidPtr
    {
        public delegate* unmanaged<void*, ulong, void*> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Ushort_Ushort_Int
    {
        public delegate* unmanaged<void*, ushort, ushort, int> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Int
    {
        public delegate* unmanaged<void*, void*, int> Pointer;
    }

    [CNode(Kind = "FunctionPointer")]
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Int_Int
    {
        public delegate* unmanaged<void*, void*, int, int> Pointer;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_AssertData
    {
        [FieldOffset(0)] // size = 4
        public int always_ignore;

        [FieldOffset(4)] // size = 4
        public uint trigger_count;

        [FieldOffset(8)] // size = 8
        public CString _condition;

        public string condition
        {
            get
            {
                return CString.ToString(_condition);
            }
            set
            {
                _condition = CString.FromString(value);
            }
        }

        [FieldOffset(16)] // size = 8
        public CString _filename;

        public string filename
        {
            get
            {
                return CString.ToString(_filename);
            }
            set
            {
                _filename = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 4
        public int linenum;

        [FieldOffset(32)] // size = 8
        public CString _function;

        public string function
        {
            get
            {
                return CString.ToString(_function);
            }
            set
            {
                _function = CString.FromString(value);
            }
        }

        [FieldOffset(40)] // size = 8
        public SDL_AssertData* next;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_AtomicInt
    {
        [FieldOffset(0)] // size = 4
        public int value;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_AudioDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_AudioDeviceID which;

        [FieldOffset(20)] // size = 1
        public byte iscapture;

        [FieldOffset(21)] // size = 1
        public byte padding1;

        [FieldOffset(22)] // size = 1
        public byte padding2;

        [FieldOffset(23)] // size = 1
        public byte padding3;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_AudioSpec
    {
        [FieldOffset(0)] // size = 2
        public SDL_AudioFormat format;

        [FieldOffset(4)] // size = 4
        public int channels;

        [FieldOffset(8)] // size = 4
        public int freq;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_ClipboardEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public struct SDL_Color
    {
        [FieldOffset(0)] // size = 1
        public byte r;

        [FieldOffset(1)] // size = 1
        public byte g;

        [FieldOffset(2)] // size = 1
        public byte b;

        [FieldOffset(3)] // size = 1
        public byte a;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_CommonEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_DisplayEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_DisplayID displayID;

        [FieldOffset(20)] // size = 4
        public int data1;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_DisplayMode
    {
        [FieldOffset(0)] // size = 4
        public SDL_DisplayID displayID;

        [FieldOffset(4)] // size = 4
        public uint format;

        [FieldOffset(8)] // size = 4
        public int w;

        [FieldOffset(12)] // size = 4
        public int h;

        [FieldOffset(16)] // size = 4
        public float pixel_density;

        [FieldOffset(20)] // size = 4
        public float refresh_rate;

        [FieldOffset(24)] // size = 8
        public void* driverdata;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_DropEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 8
        public CString _file;

        public string file
        {
            get
            {
                return CString.ToString(_file);
            }
            set
            {
                _file = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;
    }

    [CNode(Kind = "Union")]
    [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 8)]
    public struct SDL_Event
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(0)] // size = 16
        public SDL_CommonEvent common;

        [FieldOffset(0)] // size = 24
        public SDL_DisplayEvent display;

        [FieldOffset(0)] // size = 32
        public SDL_WindowEvent window;

        [FieldOffset(0)] // size = 40
        public SDL_KeyboardEvent key;

        [FieldOffset(0)] // size = 64
        public SDL_TextEditingEvent edit;

        [FieldOffset(0)] // size = 40
        public SDL_TextEditingExtEvent editExt;

        [FieldOffset(0)] // size = 56
        public SDL_TextInputEvent text;

        [FieldOffset(0)] // size = 48
        public SDL_MouseMotionEvent motion;

        [FieldOffset(0)] // size = 40
        public SDL_MouseButtonEvent button;

        [FieldOffset(0)] // size = 48
        public SDL_MouseWheelEvent wheel;

        [FieldOffset(0)] // size = 32
        public SDL_JoyAxisEvent jaxis;

        [FieldOffset(0)] // size = 24
        public SDL_JoyHatEvent jhat;

        [FieldOffset(0)] // size = 24
        public SDL_JoyButtonEvent jbutton;

        [FieldOffset(0)] // size = 24
        public SDL_JoyDeviceEvent jdevice;

        [FieldOffset(0)] // size = 24
        public SDL_JoyBatteryEvent jbattery;

        [FieldOffset(0)] // size = 32
        public SDL_GamepadAxisEvent gaxis;

        [FieldOffset(0)] // size = 24
        public SDL_GamepadButtonEvent gbutton;

        [FieldOffset(0)] // size = 24
        public SDL_GamepadDeviceEvent gdevice;

        [FieldOffset(0)] // size = 40
        public SDL_GamepadTouchpadEvent gtouchpad;

        [FieldOffset(0)] // size = 48
        public SDL_GamepadSensorEvent gsensor;

        [FieldOffset(0)] // size = 24
        public SDL_AudioDeviceEvent adevice;

        [FieldOffset(0)] // size = 56
        public SDL_SensorEvent sensor;

        [FieldOffset(0)] // size = 16
        public SDL_QuitEvent quit;

        [FieldOffset(0)] // size = 40
        public SDL_UserEvent user;

        [FieldOffset(0)] // size = 24
        public SDL_SysWMEvent syswm;

        [FieldOffset(0)] // size = 56
        public SDL_TouchFingerEvent tfinger;

        [FieldOffset(0)] // size = 40
        public SDL_DropEvent drop;

        [FieldOffset(0)] // size = 16
        public SDL_ClipboardEvent clipboard;

        [FieldOffset(0)] // size = 128
        public fixed byte _padding[128]; // Uint8[128]

        public readonly Span<byte> padding
        {
            get
            {
                fixed (SDL_Event* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<byte>(pointer, 128);
                    return span;
                }
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_FPoint
    {
        [FieldOffset(0)] // size = 4
        public float x;

        [FieldOffset(4)] // size = 4
        public float y;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_FRect
    {
        [FieldOffset(0)] // size = 4
        public float x;

        [FieldOffset(4)] // size = 4
        public float y;

        [FieldOffset(8)] // size = 4
        public float w;

        [FieldOffset(12)] // size = 4
        public float h;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Finger
    {
        [FieldOffset(0)] // size = 8
        public SDL_FingerID id;

        [FieldOffset(8)] // size = 4
        public float x;

        [FieldOffset(12)] // size = 4
        public float y;

        [FieldOffset(16)] // size = 4
        public float pressure;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    public struct SDL_GUID
    {
        [FieldOffset(0)] // size = 16
        public fixed byte _data[16]; // Uint8[16]

        public readonly Span<byte> data
        {
            get
            {
                fixed (SDL_GUID* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<byte>(pointer, 16);
                    return span;
                }
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_GamepadAxisEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public byte axis;

        [FieldOffset(21)] // size = 1
        public byte padding1;

        [FieldOffset(22)] // size = 1
        public byte padding2;

        [FieldOffset(23)] // size = 1
        public byte padding3;

        [FieldOffset(24)] // size = 2
        public short value;

        [FieldOffset(26)] // size = 2
        public ushort padding4;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_GamepadButtonEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public byte button;

        [FieldOffset(21)] // size = 1
        public byte state;

        [FieldOffset(22)] // size = 1
        public byte padding1;

        [FieldOffset(23)] // size = 1
        public byte padding2;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_GamepadDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_GamepadSensorEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 4
        public int sensor;

        [FieldOffset(24)] // size = 12
        public fixed byte _data[12]; // float[3]

        public readonly Span<float> data
        {
            get
            {
                fixed (SDL_GamepadSensorEvent* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<float>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(40)] // size = 8
        public ulong sensor_timestamp;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_GamepadTouchpadEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 4
        public int touchpad;

        [FieldOffset(24)] // size = 4
        public int finger;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;

        [FieldOffset(36)] // size = 4
        public float pressure;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 68, Pack = 4)]
    public struct SDL_HapticCondition
    {
        [FieldOffset(0)] // size = 2
        public ushort type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public uint length;

        [FieldOffset(24)] // size = 2
        public ushort delay;

        [FieldOffset(26)] // size = 2
        public ushort button;

        [FieldOffset(28)] // size = 2
        public ushort interval;

        [FieldOffset(30)] // size = 6
        public fixed byte _right_sat[6]; // Uint16[3]

        public readonly Span<ushort> right_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_sat[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(36)] // size = 6
        public fixed byte _left_sat[6]; // Uint16[3]

        public readonly Span<ushort> left_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_sat[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(42)] // size = 6
        public fixed byte _right_coeff[6]; // Sint16[3]

        public readonly Span<short> right_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_coeff[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(48)] // size = 6
        public fixed byte _left_coeff[6]; // Sint16[3]

        public readonly Span<short> left_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_coeff[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(54)] // size = 6
        public fixed byte _deadband[6]; // Uint16[3]

        public readonly Span<ushort> deadband
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_deadband[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(60)] // size = 6
        public fixed byte _center[6]; // Sint16[3]

        public readonly Span<short> center
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_center[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
    public struct SDL_HapticConstant
    {
        [FieldOffset(0)] // size = 2
        public ushort type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public uint length;

        [FieldOffset(24)] // size = 2
        public ushort delay;

        [FieldOffset(26)] // size = 2
        public ushort button;

        [FieldOffset(28)] // size = 2
        public ushort interval;

        [FieldOffset(30)] // size = 2
        public short level;

        [FieldOffset(32)] // size = 2
        public ushort attack_length;

        [FieldOffset(34)] // size = 2
        public ushort attack_level;

        [FieldOffset(36)] // size = 2
        public ushort fade_length;

        [FieldOffset(38)] // size = 2
        public ushort fade_level;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_HapticCustom
    {
        [FieldOffset(0)] // size = 2
        public ushort type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public uint length;

        [FieldOffset(24)] // size = 2
        public ushort delay;

        [FieldOffset(26)] // size = 2
        public ushort button;

        [FieldOffset(28)] // size = 2
        public ushort interval;

        [FieldOffset(30)] // size = 1
        public byte channels;

        [FieldOffset(32)] // size = 2
        public ushort period;

        [FieldOffset(34)] // size = 2
        public ushort samples;

        [FieldOffset(40)] // size = 8
        public ushort* data;

        [FieldOffset(48)] // size = 2
        public ushort attack_length;

        [FieldOffset(50)] // size = 2
        public ushort attack_level;

        [FieldOffset(52)] // size = 2
        public ushort fade_length;

        [FieldOffset(54)] // size = 2
        public ushort fade_level;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_HapticDirection
    {
        [FieldOffset(0)] // size = 1
        public byte type;

        [FieldOffset(4)] // size = 12
        public fixed byte _dir[12]; // Sint32[3]

        public readonly Span<int> dir
        {
            get
            {
                fixed (SDL_HapticDirection* @this = &this)
                {
                    var pointer = &@this->_dir[0];
                    var span = new Span<int>(pointer, 3);
                    return span;
                }
            }
        }
    }

    [CNode(Kind = "Union")]
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct SDL_HapticEffect
    {
        [FieldOffset(0)] // size = 2
        public ushort type;

        [FieldOffset(0)] // size = 40
        public SDL_HapticConstant constant;

        [FieldOffset(0)] // size = 48
        public SDL_HapticPeriodic periodic;

        [FieldOffset(0)] // size = 68
        public SDL_HapticCondition condition;

        [FieldOffset(0)] // size = 44
        public SDL_HapticRamp ramp;

        [FieldOffset(0)] // size = 12
        public SDL_HapticLeftRight leftright;

        [FieldOffset(0)] // size = 56
        public SDL_HapticCustom custom;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_HapticLeftRight
    {
        [FieldOffset(0)] // size = 2
        public ushort type;

        [FieldOffset(4)] // size = 4
        public uint length;

        [FieldOffset(8)] // size = 2
        public ushort large_magnitude;

        [FieldOffset(10)] // size = 2
        public ushort small_magnitude;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
    public struct SDL_HapticPeriodic
    {
        [FieldOffset(0)] // size = 2
        public ushort type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public uint length;

        [FieldOffset(24)] // size = 2
        public ushort delay;

        [FieldOffset(26)] // size = 2
        public ushort button;

        [FieldOffset(28)] // size = 2
        public ushort interval;

        [FieldOffset(30)] // size = 2
        public ushort period;

        [FieldOffset(32)] // size = 2
        public short magnitude;

        [FieldOffset(34)] // size = 2
        public short offset;

        [FieldOffset(36)] // size = 2
        public ushort phase;

        [FieldOffset(38)] // size = 2
        public ushort attack_length;

        [FieldOffset(40)] // size = 2
        public ushort attack_level;

        [FieldOffset(42)] // size = 2
        public ushort fade_length;

        [FieldOffset(44)] // size = 2
        public ushort fade_level;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public struct SDL_HapticRamp
    {
        [FieldOffset(0)] // size = 2
        public ushort type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public uint length;

        [FieldOffset(24)] // size = 2
        public ushort delay;

        [FieldOffset(26)] // size = 2
        public ushort button;

        [FieldOffset(28)] // size = 2
        public ushort interval;

        [FieldOffset(30)] // size = 2
        public short start;

        [FieldOffset(32)] // size = 2
        public short end;

        [FieldOffset(34)] // size = 2
        public ushort attack_length;

        [FieldOffset(36)] // size = 2
        public ushort attack_level;

        [FieldOffset(38)] // size = 2
        public ushort fade_length;

        [FieldOffset(40)] // size = 2
        public ushort fade_level;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_JoyAxisEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public byte axis;

        [FieldOffset(21)] // size = 1
        public byte padding1;

        [FieldOffset(22)] // size = 1
        public byte padding2;

        [FieldOffset(23)] // size = 1
        public byte padding3;

        [FieldOffset(24)] // size = 2
        public short value;

        [FieldOffset(26)] // size = 2
        public ushort padding4;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_JoyBatteryEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 4
        public SDL_JoystickPowerLevel level;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_JoyButtonEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public byte button;

        [FieldOffset(21)] // size = 1
        public byte state;

        [FieldOffset(22)] // size = 1
        public byte padding1;

        [FieldOffset(23)] // size = 1
        public byte padding2;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_JoyDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_JoyHatEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public byte hat;

        [FieldOffset(21)] // size = 1
        public byte value;

        [FieldOffset(22)] // size = 1
        public byte padding1;

        [FieldOffset(23)] // size = 1
        public byte padding2;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_KeyboardEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 1
        public byte state;

        [FieldOffset(21)] // size = 1
        public byte repeat;

        [FieldOffset(22)] // size = 1
        public byte padding2;

        [FieldOffset(23)] // size = 1
        public byte padding3;

        [FieldOffset(24)] // size = 16
        public SDL_Keysym keysym;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_Keysym
    {
        [FieldOffset(0)] // size = 4
        public SDL_Scancode scancode;

        [FieldOffset(4)] // size = 4
        public SDL_Keycode sym;

        [FieldOffset(8)] // size = 2
        public ushort mod;

        [FieldOffset(12)] // size = 4
        public uint unused;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_Locale
    {
        [FieldOffset(0)] // size = 8
        public CString _language;

        public string language
        {
            get
            {
                return CString.ToString(_language);
            }
            set
            {
                _language = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _country;

        public string country
        {
            get
            {
                return CString.ToString(_country);
            }
            set
            {
                _country = CString.FromString(value);
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_MessageBoxButtonData
    {
        [FieldOffset(0)] // size = 4
        public uint flags;

        [FieldOffset(4)] // size = 4
        public int buttonid;

        [FieldOffset(8)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public struct SDL_MessageBoxColor
    {
        [FieldOffset(0)] // size = 1
        public byte r;

        [FieldOffset(1)] // size = 1
        public byte g;

        [FieldOffset(2)] // size = 1
        public byte b;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 15, Pack = 1)]
    public struct SDL_MessageBoxColorScheme
    {
        [FieldOffset(0)] // size = 15
        public fixed byte _colors[15]; // SDL_MessageBoxColor[5]

        public readonly Span<SDL_MessageBoxColor> colors
        {
            get
            {
                fixed (SDL_MessageBoxColorScheme* @this = &this)
                {
                    var pointer = &@this->_colors[0];
                    var span = new Span<SDL_MessageBoxColor>(pointer, 5);
                    return span;
                }
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_MessageBoxData
    {
        [FieldOffset(0)] // size = 4
        public uint flags;

        [FieldOffset(8)] // size = 8
        public SDL_Window* window;

        [FieldOffset(16)] // size = 8
        public CString _title;

        public string title
        {
            get
            {
                return CString.ToString(_title);
            }
            set
            {
                _title = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 8
        public CString _message;

        public string message
        {
            get
            {
                return CString.ToString(_message);
            }
            set
            {
                _message = CString.FromString(value);
            }
        }

        [FieldOffset(32)] // size = 4
        public int numbuttons;

        [FieldOffset(40)] // size = 8
        public SDL_MessageBoxButtonData* buttons;

        [FieldOffset(48)] // size = 8
        public SDL_MessageBoxColorScheme* colorScheme;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_MouseButtonEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_MouseID which;

        [FieldOffset(24)] // size = 1
        public byte button;

        [FieldOffset(25)] // size = 1
        public byte state;

        [FieldOffset(26)] // size = 1
        public byte clicks;

        [FieldOffset(27)] // size = 1
        public byte padding;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_MouseMotionEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_MouseID which;

        [FieldOffset(24)] // size = 4
        public uint state;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;

        [FieldOffset(36)] // size = 4
        public float xrel;

        [FieldOffset(40)] // size = 4
        public float yrel;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_MouseWheelEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_MouseID which;

        [FieldOffset(24)] // size = 4
        public float x;

        [FieldOffset(28)] // size = 4
        public float y;

        [FieldOffset(32)] // size = 4
        public uint direction;

        [FieldOffset(36)] // size = 4
        public float mouseX;

        [FieldOffset(40)] // size = 4
        public float mouseY;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_OSEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Palette
    {
        [FieldOffset(0)] // size = 4
        public int ncolors;

        [FieldOffset(8)] // size = 8
        public SDL_Color* colors;

        [FieldOffset(16)] // size = 4
        public uint version;

        [FieldOffset(20)] // size = 4
        public int refcount;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_PixelFormat
    {
        [FieldOffset(0)] // size = 4
        public uint format;

        [FieldOffset(8)] // size = 8
        public SDL_Palette* palette;

        [FieldOffset(16)] // size = 1
        public byte BitsPerPixel;

        [FieldOffset(17)] // size = 1
        public byte BytesPerPixel;

        [FieldOffset(18)] // size = 2
        public fixed byte _padding[2]; // Uint8[2]

        public readonly Span<byte> padding
        {
            get
            {
                fixed (SDL_PixelFormat* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<byte>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(20)] // size = 4
        public uint Rmask;

        [FieldOffset(24)] // size = 4
        public uint Gmask;

        [FieldOffset(28)] // size = 4
        public uint Bmask;

        [FieldOffset(32)] // size = 4
        public uint Amask;

        [FieldOffset(36)] // size = 1
        public byte Rloss;

        [FieldOffset(37)] // size = 1
        public byte Gloss;

        [FieldOffset(38)] // size = 1
        public byte Bloss;

        [FieldOffset(39)] // size = 1
        public byte Aloss;

        [FieldOffset(40)] // size = 1
        public byte Rshift;

        [FieldOffset(41)] // size = 1
        public byte Gshift;

        [FieldOffset(42)] // size = 1
        public byte Bshift;

        [FieldOffset(43)] // size = 1
        public byte Ashift;

        [FieldOffset(44)] // size = 4
        public int refcount;

        [FieldOffset(48)] // size = 8
        public SDL_PixelFormat* next;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_Point
    {
        [FieldOffset(0)] // size = 4
        public int x;

        [FieldOffset(4)] // size = 4
        public int y;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_QuitEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_Rect
    {
        [FieldOffset(0)] // size = 4
        public int x;

        [FieldOffset(4)] // size = 4
        public int y;

        [FieldOffset(8)] // size = 4
        public int w;

        [FieldOffset(12)] // size = 4
        public int h;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct SDL_RendererInfo
    {
        [FieldOffset(0)] // size = 8
        public CString _name;

        public string name
        {
            get
            {
                return CString.ToString(_name);
            }
            set
            {
                _name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 4
        public uint flags;

        [FieldOffset(12)] // size = 4
        public uint num_texture_formats;

        [FieldOffset(16)] // size = 64
        public fixed byte _texture_formats[64]; // Uint32[16]

        public readonly Span<uint> texture_formats
        {
            get
            {
                fixed (SDL_RendererInfo* @this = &this)
                {
                    var pointer = &@this->_texture_formats[0];
                    var span = new Span<uint>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(80)] // size = 4
        public int max_texture_width;

        [FieldOffset(84)] // size = 4
        public int max_texture_height;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_SensorEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_SensorID which;

        [FieldOffset(20)] // size = 24
        public fixed byte _data[24]; // float[6]

        public readonly Span<float> data
        {
            get
            {
                fixed (SDL_SensorEvent* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<float>(pointer, 6);
                    return span;
                }
            }
        }

        [FieldOffset(48)] // size = 8
        public ulong sensor_timestamp;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct SDL_Surface
    {
        [FieldOffset(0)] // size = 4
        public uint flags;

        [FieldOffset(8)] // size = 8
        public SDL_PixelFormat* format;

        [FieldOffset(16)] // size = 4
        public int w;

        [FieldOffset(20)] // size = 4
        public int h;

        [FieldOffset(24)] // size = 4
        public int pitch;

        [FieldOffset(32)] // size = 8
        public void* pixels;

        [FieldOffset(40)] // size = 8
        public void* userdata;

        [FieldOffset(48)] // size = 4
        public int locked;

        [FieldOffset(56)] // size = 8
        public void* list_blitmap;

        [FieldOffset(64)] // size = 16
        public SDL_Rect clip_rect;

        [FieldOffset(80)] // size = 8
        public SDL_BlitMap* map;

        [FieldOffset(88)] // size = 4
        public int refcount;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_SysWMEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 8
        public SDL_SysWMmsg* msg;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct SDL_TextEditingEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 32
        public fixed byte _text[32]; // char[32]

        public string text
        {
            get
            {
                fixed (SDL_TextEditingEvent* @this = &this)
                {
                    var pointer = &@this->_text[0];
                    var cString = new CString(pointer);
                    return CString.ToString(cString);
                }
            }
        }

        [FieldOffset(52)] // size = 4
        public int start;

        [FieldOffset(56)] // size = 4
        public int length;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_TextEditingExtEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(24)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }

        [FieldOffset(32)] // size = 4
        public int start;

        [FieldOffset(36)] // size = 4
        public int length;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_TextInputEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 32
        public fixed byte _text[32]; // char[32]

        public string text
        {
            get
            {
                fixed (SDL_TextInputEvent* @this = &this)
                {
                    var pointer = &@this->_text[0];
                    var cString = new CString(pointer);
                    return CString.ToString(cString);
                }
            }
        }
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_TouchFingerEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 8
        public SDL_TouchID touchId;

        [FieldOffset(24)] // size = 8
        public SDL_FingerID fingerId;

        [FieldOffset(32)] // size = 4
        public float x;

        [FieldOffset(36)] // size = 4
        public float y;

        [FieldOffset(40)] // size = 4
        public float dx;

        [FieldOffset(44)] // size = 4
        public float dy;

        [FieldOffset(48)] // size = 4
        public float pressure;

        [FieldOffset(52)] // size = 4
        public SDL_WindowID windowID;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_UserEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public int code;

        [FieldOffset(24)] // size = 8
        public void* data1;

        [FieldOffset(32)] // size = 8
        public void* data2;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_Vertex
    {
        [FieldOffset(0)] // size = 8
        public SDL_FPoint position;

        [FieldOffset(8)] // size = 4
        public SDL_Color color;

        [FieldOffset(12)] // size = 8
        public SDL_FPoint tex_coord;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct SDL_VirtualJoystickDesc
    {
        [FieldOffset(0)] // size = 2
        public ushort version;

        [FieldOffset(2)] // size = 2
        public ushort type;

        [FieldOffset(4)] // size = 2
        public ushort naxes;

        [FieldOffset(6)] // size = 2
        public ushort nbuttons;

        [FieldOffset(8)] // size = 2
        public ushort nhats;

        [FieldOffset(10)] // size = 2
        public ushort vendor_id;

        [FieldOffset(12)] // size = 2
        public ushort product_id;

        [FieldOffset(14)] // size = 2
        public ushort padding;

        [FieldOffset(16)] // size = 4
        public uint button_mask;

        [FieldOffset(20)] // size = 4
        public uint axis_mask;

        [FieldOffset(24)] // size = 8
        public CString _name;

        public string name
        {
            get
            {
                return CString.ToString(_name);
            }
            set
            {
                _name = CString.FromString(value);
            }
        }

        [FieldOffset(32)] // size = 8
        public void* userdata;

        [FieldOffset(40)] // size = 8
        public FnPtr_VoidPtr_Void Update;

        [FieldOffset(48)] // size = 8
        public FnPtr_VoidPtr_Int_Void SetPlayerIndex;

        [FieldOffset(56)] // size = 8
        public FnPtr_VoidPtr_Ushort_Ushort_Int Rumble;

        [FieldOffset(64)] // size = 8
        public FnPtr_VoidPtr_Ushort_Ushort_Int RumbleTriggers;

        [FieldOffset(72)] // size = 8
        public FnPtr_VoidPtr_Byte_Byte_Byte_Int SetLED;

        [FieldOffset(80)] // size = 8
        public FnPtr_VoidPtr_VoidPtr_Int_Int SendEffect;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_WindowEvent
    {
        [FieldOffset(0)] // size = 4
        public uint type;

        [FieldOffset(8)] // size = 8
        public ulong timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public int data1;

        [FieldOffset(24)] // size = 4
        public int data2;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_WindowShapeMode
    {
        [FieldOffset(0)] // size = 4
        public WindowShapeMode mode;

        [FieldOffset(4)] // size = 4
        public SDL_WindowShapeParams parameters;
    }

    [CNode(Kind = "Union")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public struct SDL_WindowShapeParams
    {
        [FieldOffset(0)] // size = 1
        public byte binarizationCutoff;

        [FieldOffset(0)] // size = 4
        public SDL_Color colorKey;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct SDL_hid_device_info
    {
        [FieldOffset(0)] // size = 8
        public CString _path;

        public string path
        {
            get
            {
                return CString.ToString(_path);
            }
            set
            {
                _path = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 2
        public ushort vendor_id;

        [FieldOffset(10)] // size = 2
        public ushort product_id;

        [FieldOffset(16)] // size = 8
        public CStringWide serial_number;

        [FieldOffset(24)] // size = 2
        public ushort release_number;

        [FieldOffset(32)] // size = 8
        public CStringWide manufacturer_string;

        [FieldOffset(40)] // size = 8
        public CStringWide product_string;

        [FieldOffset(48)] // size = 2
        public ushort usage_page;

        [FieldOffset(50)] // size = 2
        public ushort usage;

        [FieldOffset(52)] // size = 4
        public int interface_number;

        [FieldOffset(56)] // size = 4
        public int interface_class;

        [FieldOffset(60)] // size = 4
        public int interface_subclass;

        [FieldOffset(64)] // size = 4
        public int interface_protocol;

        [FieldOffset(68)] // size = 4
        public SDL_hid_bus_type bus_type;

        [FieldOffset(72)] // size = 8
        public SDL_hid_device_info* next;
    }

    [CNode(Kind = "Struct")]
    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public struct SDL_version
    {
        [FieldOffset(0)] // size = 1
        public byte major;

        [FieldOffset(1)] // size = 1
        public byte minor;

        [FieldOffset(2)] // size = 1
        public byte patch;
    }

    [CNode(Kind = "Enum")]
    public enum SDL_ArrayOrder : int
    {
        SDL_ARRAYORDER_NONE = 0,
        SDL_ARRAYORDER_RGB = 1,
        SDL_ARRAYORDER_UNUSED1 = 2,
        SDL_ARRAYORDER_UNUSED2 = 3,
        SDL_ARRAYORDER_BGR = 4
    }

    [CNode(Kind = "Enum")]
    public enum SDL_AssertState : int
    {
        SDL_ASSERTION_RETRY = 0,
        SDL_ASSERTION_BREAK = 1,
        SDL_ASSERTION_ABORT = 2,
        SDL_ASSERTION_IGNORE = 3,
        SDL_ASSERTION_ALWAYS_IGNORE = 4
    }

    [CNode(Kind = "Enum")]
    public enum SDL_BitmapOrder : int
    {
        SDL_BITMAPORDER_NONE = 0,
        SDL_BITMAPORDER_4321 = 1,
        SDL_BITMAPORDER_1234 = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_BlendFactor : int
    {
        SDL_BLENDFACTOR_ZERO = 1,
        SDL_BLENDFACTOR_ONE = 2,
        SDL_BLENDFACTOR_SRC_COLOR = 3,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
        SDL_BLENDFACTOR_SRC_ALPHA = 5,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
        SDL_BLENDFACTOR_DST_COLOR = 7,
        SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
        SDL_BLENDFACTOR_DST_ALPHA = 9,
        SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
    }

    [CNode(Kind = "Enum")]
    public enum SDL_BlendMode : int
    {
        SDL_BLENDMODE_NONE = 0,
        SDL_BLENDMODE_BLEND = 1,
        SDL_BLENDMODE_ADD = 2,
        SDL_BLENDMODE_MOD = 4,
        SDL_BLENDMODE_MUL = 8,
        SDL_BLENDMODE_INVALID = 2147483647
    }

    [CNode(Kind = "Enum")]
    public enum SDL_BlendOperation : int
    {
        SDL_BLENDOPERATION_ADD = 1,
        SDL_BLENDOPERATION_SUBTRACT = 2,
        SDL_BLENDOPERATION_REV_SUBTRACT = 3,
        SDL_BLENDOPERATION_MINIMUM = 4,
        SDL_BLENDOPERATION_MAXIMUM = 5
    }

    [CNode(Kind = "Enum")]
    public enum SDL_DUMMY_ENUM : int
    {
        DUMMY_ENUM_VALUE = 0
    }

    [CNode(Kind = "Enum")]
    public enum SDL_DisplayOrientation : int
    {
        SDL_ORIENTATION_UNKNOWN = 0,
        SDL_ORIENTATION_LANDSCAPE = 1,
        SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
        SDL_ORIENTATION_PORTRAIT = 3,
        SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
    }

    [CNode(Kind = "Enum")]
    public enum SDL_EventType : int
    {
        SDL_EVENT_FIRST = 0,
        SDL_EVENT_QUIT = 256,
        SDL_EVENT_TERMINATING = 257,
        SDL_EVENT_LOW_MEMORY = 258,
        SDL_EVENT_WILL_ENTER_BACKGROUND = 259,
        SDL_EVENT_DID_ENTER_BACKGROUND = 260,
        SDL_EVENT_WILL_ENTER_FOREGROUND = 261,
        SDL_EVENT_DID_ENTER_FOREGROUND = 262,
        SDL_EVENT_LOCALE_CHANGED = 263,
        SDL_EVENT_SYSTEM_THEME_CHANGED = 264,
        SDL_EVENT_DISPLAY_ORIENTATION = 337,
        SDL_EVENT_DISPLAY_CONNECTED = 338,
        SDL_EVENT_DISPLAY_DISCONNECTED = 339,
        SDL_EVENT_DISPLAY_MOVED = 340,
        SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 341,
        SDL_EVENT_DISPLAY_FIRST = 337,
        SDL_EVENT_DISPLAY_LAST = 341,
        SDL_EVENT_SYSWM = 513,
        SDL_EVENT_WINDOW_SHOWN = 514,
        SDL_EVENT_WINDOW_HIDDEN = 515,
        SDL_EVENT_WINDOW_EXPOSED = 516,
        SDL_EVENT_WINDOW_MOVED = 517,
        SDL_EVENT_WINDOW_RESIZED = 518,
        SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519,
        SDL_EVENT_WINDOW_MINIMIZED = 520,
        SDL_EVENT_WINDOW_MAXIMIZED = 521,
        SDL_EVENT_WINDOW_RESTORED = 522,
        SDL_EVENT_WINDOW_MOUSE_ENTER = 523,
        SDL_EVENT_WINDOW_MOUSE_LEAVE = 524,
        SDL_EVENT_WINDOW_FOCUS_GAINED = 525,
        SDL_EVENT_WINDOW_FOCUS_LOST = 526,
        SDL_EVENT_WINDOW_CLOSE_REQUESTED = 527,
        SDL_EVENT_WINDOW_TAKE_FOCUS = 528,
        SDL_EVENT_WINDOW_HIT_TEST = 529,
        SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530,
        SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531,
        SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532,
        SDL_EVENT_WINDOW_OCCLUDED = 533,
        SDL_EVENT_WINDOW_DESTROYED = 534,
        SDL_EVENT_WINDOW_FIRST = 514,
        SDL_EVENT_WINDOW_LAST = 534,
        SDL_EVENT_KEY_DOWN = 768,
        SDL_EVENT_KEY_UP = 769,
        SDL_EVENT_TEXT_EDITING = 770,
        SDL_EVENT_TEXT_INPUT = 771,
        SDL_EVENT_KEYMAP_CHANGED = 772,
        SDL_EVENT_TEXT_EDITING_EXT = 773,
        SDL_EVENT_MOUSE_MOTION = 1024,
        SDL_EVENT_MOUSE_BUTTON_DOWN = 1025,
        SDL_EVENT_MOUSE_BUTTON_UP = 1026,
        SDL_EVENT_MOUSE_WHEEL = 1027,
        SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536,
        SDL_EVENT_JOYSTICK_HAT_MOTION = 1538,
        SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539,
        SDL_EVENT_JOYSTICK_BUTTON_UP = 1540,
        SDL_EVENT_JOYSTICK_ADDED = 1541,
        SDL_EVENT_JOYSTICK_REMOVED = 1542,
        SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543,
        SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544,
        SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616,
        SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617,
        SDL_EVENT_GAMEPAD_BUTTON_UP = 1618,
        SDL_EVENT_GAMEPAD_ADDED = 1619,
        SDL_EVENT_GAMEPAD_REMOVED = 1620,
        SDL_EVENT_GAMEPAD_REMAPPED = 1621,
        SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622,
        SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623,
        SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624,
        SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625,
        SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626,
        SDL_EVENT_FINGER_DOWN = 1792,
        SDL_EVENT_FINGER_UP = 1793,
        SDL_EVENT_FINGER_MOTION = 1794,
        SDL_EVENT_CLIPBOARD_UPDATE = 2304,
        SDL_EVENT_DROP_FILE = 4096,
        SDL_EVENT_DROP_TEXT = 4097,
        SDL_EVENT_DROP_BEGIN = 4098,
        SDL_EVENT_DROP_COMPLETE = 4099,
        SDL_EVENT_DROP_POSITION = 4100,
        SDL_EVENT_AUDIO_DEVICE_ADDED = 4352,
        SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353,
        SDL_EVENT_SENSOR_UPDATE = 4608,
        SDL_EVENT_RENDER_TARGETS_RESET = 8192,
        SDL_EVENT_RENDER_DEVICE_RESET = 8193,
        SDL_EVENT_POLL_SENTINEL = 32512,
        SDL_EVENT_USER = 32768,
        SDL_EVENT_LAST = 65535
    }

    [CNode(Kind = "Enum")]
    public enum SDL_FlashOperation : int
    {
        SDL_FLASH_CANCEL = 0,
        SDL_FLASH_BRIEFLY = 1,
        SDL_FLASH_UNTIL_FOCUSED = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_Folder : int
    {
        SDL_FOLDER_HOME = 0,
        SDL_FOLDER_DESKTOP = 1,
        SDL_FOLDER_DOCUMENTS = 2,
        SDL_FOLDER_DOWNLOADS = 3,
        SDL_FOLDER_MUSIC = 4,
        SDL_FOLDER_PICTURES = 5,
        SDL_FOLDER_PUBLICSHARE = 6,
        SDL_FOLDER_SAVEDGAMES = 7,
        SDL_FOLDER_SCREENSHOTS = 8,
        SDL_FOLDER_TEMPLATES = 9,
        SDL_FOLDER_VIDEOS = 10
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GLContextResetNotification : int
    {
        SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0,
        SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GLattr : int
    {
        SDL_GL_RED_SIZE = 0,
        SDL_GL_GREEN_SIZE = 1,
        SDL_GL_BLUE_SIZE = 2,
        SDL_GL_ALPHA_SIZE = 3,
        SDL_GL_BUFFER_SIZE = 4,
        SDL_GL_DOUBLEBUFFER = 5,
        SDL_GL_DEPTH_SIZE = 6,
        SDL_GL_STENCIL_SIZE = 7,
        SDL_GL_ACCUM_RED_SIZE = 8,
        SDL_GL_ACCUM_GREEN_SIZE = 9,
        SDL_GL_ACCUM_BLUE_SIZE = 10,
        SDL_GL_ACCUM_ALPHA_SIZE = 11,
        SDL_GL_STEREO = 12,
        SDL_GL_MULTISAMPLEBUFFERS = 13,
        SDL_GL_MULTISAMPLESAMPLES = 14,
        SDL_GL_ACCELERATED_VISUAL = 15,
        SDL_GL_RETAINED_BACKING = 16,
        SDL_GL_CONTEXT_MAJOR_VERSION = 17,
        SDL_GL_CONTEXT_MINOR_VERSION = 18,
        SDL_GL_CONTEXT_FLAGS = 19,
        SDL_GL_CONTEXT_PROFILE_MASK = 20,
        SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21,
        SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23,
        SDL_GL_CONTEXT_RESET_NOTIFICATION = 24,
        SDL_GL_CONTEXT_NO_ERROR = 25,
        SDL_GL_FLOATBUFFERS = 26,
        SDL_GL_EGL_PLATFORM = 27
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GLcontextFlag : int
    {
        SDL_GL_CONTEXT_DEBUG_FLAG = 1,
        SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2,
        SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4,
        SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GLcontextReleaseFlag : int
    {
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GLprofile : int
    {
        SDL_GL_CONTEXT_PROFILE_CORE = 1,
        SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2,
        SDL_GL_CONTEXT_PROFILE_ES = 4
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GamepadAxis : int
    {
        SDL_GAMEPAD_AXIS_INVALID = -1,
        SDL_GAMEPAD_AXIS_LEFTX = 0,
        SDL_GAMEPAD_AXIS_LEFTY = 1,
        SDL_GAMEPAD_AXIS_RIGHTX = 2,
        SDL_GAMEPAD_AXIS_RIGHTY = 3,
        SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4,
        SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
        SDL_GAMEPAD_AXIS_MAX = 6
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GamepadButton : int
    {
        SDL_GAMEPAD_BUTTON_INVALID = -1,
        SDL_GAMEPAD_BUTTON_A = 0,
        SDL_GAMEPAD_BUTTON_B = 1,
        SDL_GAMEPAD_BUTTON_X = 2,
        SDL_GAMEPAD_BUTTON_Y = 3,
        SDL_GAMEPAD_BUTTON_BACK = 4,
        SDL_GAMEPAD_BUTTON_GUIDE = 5,
        SDL_GAMEPAD_BUTTON_START = 6,
        SDL_GAMEPAD_BUTTON_LEFT_STICK = 7,
        SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8,
        SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
        SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10,
        SDL_GAMEPAD_BUTTON_DPAD_UP = 11,
        SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12,
        SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13,
        SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14,
        SDL_GAMEPAD_BUTTON_MISC1 = 15,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19,
        SDL_GAMEPAD_BUTTON_TOUCHPAD = 20,
        SDL_GAMEPAD_BUTTON_MAX = 21
    }

    [CNode(Kind = "Enum")]
    public enum SDL_GamepadType : int
    {
        SDL_GAMEPAD_TYPE_UNKNOWN = 0,
        SDL_GAMEPAD_TYPE_STANDARD = 1,
        SDL_GAMEPAD_TYPE_XBOX360 = 2,
        SDL_GAMEPAD_TYPE_XBOXONE = 3,
        SDL_GAMEPAD_TYPE_PS3 = 4,
        SDL_GAMEPAD_TYPE_PS4 = 5,
        SDL_GAMEPAD_TYPE_PS5 = 6,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10,
        SDL_GAMEPAD_TYPE_MAX = 11
    }

    [CNode(Kind = "Enum")]
    public enum SDL_HintPriority : int
    {
        SDL_HINT_DEFAULT = 0,
        SDL_HINT_NORMAL = 1,
        SDL_HINT_OVERRIDE = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_HitTestResult : int
    {
        SDL_HITTEST_NORMAL = 0,
        SDL_HITTEST_DRAGGABLE = 1,
        SDL_HITTEST_RESIZE_TOPLEFT = 2,
        SDL_HITTEST_RESIZE_TOP = 3,
        SDL_HITTEST_RESIZE_TOPRIGHT = 4,
        SDL_HITTEST_RESIZE_RIGHT = 5,
        SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
        SDL_HITTEST_RESIZE_BOTTOM = 7,
        SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
        SDL_HITTEST_RESIZE_LEFT = 9
    }

    [CNode(Kind = "Enum")]
    public enum SDL_InitFlags : int
    {
        SDL_INIT_TIMER = 1,
        SDL_INIT_AUDIO = 16,
        SDL_INIT_VIDEO = 32,
        SDL_INIT_JOYSTICK = 512,
        SDL_INIT_HAPTIC = 4096,
        SDL_INIT_GAMEPAD = 8192,
        SDL_INIT_EVENTS = 16384,
        SDL_INIT_SENSOR = 32768
    }

    [CNode(Kind = "Enum")]
    public enum SDL_JoystickPowerLevel : int
    {
        SDL_JOYSTICK_POWER_UNKNOWN = -1,
        SDL_JOYSTICK_POWER_EMPTY = 0,
        SDL_JOYSTICK_POWER_LOW = 1,
        SDL_JOYSTICK_POWER_MEDIUM = 2,
        SDL_JOYSTICK_POWER_FULL = 3,
        SDL_JOYSTICK_POWER_WIRED = 4,
        SDL_JOYSTICK_POWER_MAX = 5
    }

    [CNode(Kind = "Enum")]
    public enum SDL_JoystickType : int
    {
        SDL_JOYSTICK_TYPE_UNKNOWN = 0,
        SDL_JOYSTICK_TYPE_GAMEPAD = 1,
        SDL_JOYSTICK_TYPE_WHEEL = 2,
        SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
        SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
        SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
        SDL_JOYSTICK_TYPE_GUITAR = 6,
        SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
        SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
        SDL_JOYSTICK_TYPE_THROTTLE = 9
    }

    [CNode(Kind = "Enum")]
    public enum SDL_KeyCode : int
    {
        SDLK_UNKNOWN = 0,
        SDLK_RETURN = 13,
        SDLK_ESCAPE = 27,
        SDLK_BACKSPACE = 8,
        SDLK_TAB = 9,
        SDLK_SPACE = 32,
        SDLK_EXCLAIM = 33,
        SDLK_QUOTEDBL = 34,
        SDLK_HASH = 35,
        SDLK_PERCENT = 37,
        SDLK_DOLLAR = 36,
        SDLK_AMPERSAND = 38,
        SDLK_QUOTE = 39,
        SDLK_LEFTPAREN = 40,
        SDLK_RIGHTPAREN = 41,
        SDLK_ASTERISK = 42,
        SDLK_PLUS = 43,
        SDLK_COMMA = 44,
        SDLK_MINUS = 45,
        SDLK_PERIOD = 46,
        SDLK_SLASH = 47,
        SDLK_0 = 48,
        SDLK_1 = 49,
        SDLK_2 = 50,
        SDLK_3 = 51,
        SDLK_4 = 52,
        SDLK_5 = 53,
        SDLK_6 = 54,
        SDLK_7 = 55,
        SDLK_8 = 56,
        SDLK_9 = 57,
        SDLK_COLON = 58,
        SDLK_SEMICOLON = 59,
        SDLK_LESS = 60,
        SDLK_EQUALS = 61,
        SDLK_GREATER = 62,
        SDLK_QUESTION = 63,
        SDLK_AT = 64,
        SDLK_LEFTBRACKET = 91,
        SDLK_BACKSLASH = 92,
        SDLK_RIGHTBRACKET = 93,
        SDLK_CARET = 94,
        SDLK_UNDERSCORE = 95,
        SDLK_BACKQUOTE = 96,
        SDLK_a = 97,
        SDLK_b = 98,
        SDLK_c = 99,
        SDLK_d = 100,
        SDLK_e = 101,
        SDLK_f = 102,
        SDLK_g = 103,
        SDLK_h = 104,
        SDLK_i = 105,
        SDLK_j = 106,
        SDLK_k = 107,
        SDLK_l = 108,
        SDLK_m = 109,
        SDLK_n = 110,
        SDLK_o = 111,
        SDLK_p = 112,
        SDLK_q = 113,
        SDLK_r = 114,
        SDLK_s = 115,
        SDLK_t = 116,
        SDLK_u = 117,
        SDLK_v = 118,
        SDLK_w = 119,
        SDLK_x = 120,
        SDLK_y = 121,
        SDLK_z = 122,
        SDLK_CAPSLOCK = 1073741881,
        SDLK_F1 = 1073741882,
        SDLK_F2 = 1073741883,
        SDLK_F3 = 1073741884,
        SDLK_F4 = 1073741885,
        SDLK_F5 = 1073741886,
        SDLK_F6 = 1073741887,
        SDLK_F7 = 1073741888,
        SDLK_F8 = 1073741889,
        SDLK_F9 = 1073741890,
        SDLK_F10 = 1073741891,
        SDLK_F11 = 1073741892,
        SDLK_F12 = 1073741893,
        SDLK_PRINTSCREEN = 1073741894,
        SDLK_SCROLLLOCK = 1073741895,
        SDLK_PAUSE = 1073741896,
        SDLK_INSERT = 1073741897,
        SDLK_HOME = 1073741898,
        SDLK_PAGEUP = 1073741899,
        SDLK_DELETE = 127,
        SDLK_END = 1073741901,
        SDLK_PAGEDOWN = 1073741902,
        SDLK_RIGHT = 1073741903,
        SDLK_LEFT = 1073741904,
        SDLK_DOWN = 1073741905,
        SDLK_UP = 1073741906,
        SDLK_NUMLOCKCLEAR = 1073741907,
        SDLK_KP_DIVIDE = 1073741908,
        SDLK_KP_MULTIPLY = 1073741909,
        SDLK_KP_MINUS = 1073741910,
        SDLK_KP_PLUS = 1073741911,
        SDLK_KP_ENTER = 1073741912,
        SDLK_KP_1 = 1073741913,
        SDLK_KP_2 = 1073741914,
        SDLK_KP_3 = 1073741915,
        SDLK_KP_4 = 1073741916,
        SDLK_KP_5 = 1073741917,
        SDLK_KP_6 = 1073741918,
        SDLK_KP_7 = 1073741919,
        SDLK_KP_8 = 1073741920,
        SDLK_KP_9 = 1073741921,
        SDLK_KP_0 = 1073741922,
        SDLK_KP_PERIOD = 1073741923,
        SDLK_APPLICATION = 1073741925,
        SDLK_POWER = 1073741926,
        SDLK_KP_EQUALS = 1073741927,
        SDLK_F13 = 1073741928,
        SDLK_F14 = 1073741929,
        SDLK_F15 = 1073741930,
        SDLK_F16 = 1073741931,
        SDLK_F17 = 1073741932,
        SDLK_F18 = 1073741933,
        SDLK_F19 = 1073741934,
        SDLK_F20 = 1073741935,
        SDLK_F21 = 1073741936,
        SDLK_F22 = 1073741937,
        SDLK_F23 = 1073741938,
        SDLK_F24 = 1073741939,
        SDLK_EXECUTE = 1073741940,
        SDLK_HELP = 1073741941,
        SDLK_MENU = 1073741942,
        SDLK_SELECT = 1073741943,
        SDLK_STOP = 1073741944,
        SDLK_AGAIN = 1073741945,
        SDLK_UNDO = 1073741946,
        SDLK_CUT = 1073741947,
        SDLK_COPY = 1073741948,
        SDLK_PASTE = 1073741949,
        SDLK_FIND = 1073741950,
        SDLK_MUTE = 1073741951,
        SDLK_VOLUMEUP = 1073741952,
        SDLK_VOLUMEDOWN = 1073741953,
        SDLK_KP_COMMA = 1073741957,
        SDLK_KP_EQUALSAS400 = 1073741958,
        SDLK_ALTERASE = 1073741977,
        SDLK_SYSREQ = 1073741978,
        SDLK_CANCEL = 1073741979,
        SDLK_CLEAR = 1073741980,
        SDLK_PRIOR = 1073741981,
        SDLK_RETURN2 = 1073741982,
        SDLK_SEPARATOR = 1073741983,
        SDLK_OUT = 1073741984,
        SDLK_OPER = 1073741985,
        SDLK_CLEARAGAIN = 1073741986,
        SDLK_CRSEL = 1073741987,
        SDLK_EXSEL = 1073741988,
        SDLK_KP_00 = 1073742000,
        SDLK_KP_000 = 1073742001,
        SDLK_THOUSANDSSEPARATOR = 1073742002,
        SDLK_DECIMALSEPARATOR = 1073742003,
        SDLK_CURRENCYUNIT = 1073742004,
        SDLK_CURRENCYSUBUNIT = 1073742005,
        SDLK_KP_LEFTPAREN = 1073742006,
        SDLK_KP_RIGHTPAREN = 1073742007,
        SDLK_KP_LEFTBRACE = 1073742008,
        SDLK_KP_RIGHTBRACE = 1073742009,
        SDLK_KP_TAB = 1073742010,
        SDLK_KP_BACKSPACE = 1073742011,
        SDLK_KP_A = 1073742012,
        SDLK_KP_B = 1073742013,
        SDLK_KP_C = 1073742014,
        SDLK_KP_D = 1073742015,
        SDLK_KP_E = 1073742016,
        SDLK_KP_F = 1073742017,
        SDLK_KP_XOR = 1073742018,
        SDLK_KP_POWER = 1073742019,
        SDLK_KP_PERCENT = 1073742020,
        SDLK_KP_LESS = 1073742021,
        SDLK_KP_GREATER = 1073742022,
        SDLK_KP_AMPERSAND = 1073742023,
        SDLK_KP_DBLAMPERSAND = 1073742024,
        SDLK_KP_VERTICALBAR = 1073742025,
        SDLK_KP_DBLVERTICALBAR = 1073742026,
        SDLK_KP_COLON = 1073742027,
        SDLK_KP_HASH = 1073742028,
        SDLK_KP_SPACE = 1073742029,
        SDLK_KP_AT = 1073742030,
        SDLK_KP_EXCLAM = 1073742031,
        SDLK_KP_MEMSTORE = 1073742032,
        SDLK_KP_MEMRECALL = 1073742033,
        SDLK_KP_MEMCLEAR = 1073742034,
        SDLK_KP_MEMADD = 1073742035,
        SDLK_KP_MEMSUBTRACT = 1073742036,
        SDLK_KP_MEMMULTIPLY = 1073742037,
        SDLK_KP_MEMDIVIDE = 1073742038,
        SDLK_KP_PLUSMINUS = 1073742039,
        SDLK_KP_CLEAR = 1073742040,
        SDLK_KP_CLEARENTRY = 1073742041,
        SDLK_KP_BINARY = 1073742042,
        SDLK_KP_OCTAL = 1073742043,
        SDLK_KP_DECIMAL = 1073742044,
        SDLK_KP_HEXADECIMAL = 1073742045,
        SDLK_LCTRL = 1073742048,
        SDLK_LSHIFT = 1073742049,
        SDLK_LALT = 1073742050,
        SDLK_LGUI = 1073742051,
        SDLK_RCTRL = 1073742052,
        SDLK_RSHIFT = 1073742053,
        SDLK_RALT = 1073742054,
        SDLK_RGUI = 1073742055,
        SDLK_MODE = 1073742081,
        SDLK_AUDIONEXT = 1073742082,
        SDLK_AUDIOPREV = 1073742083,
        SDLK_AUDIOSTOP = 1073742084,
        SDLK_AUDIOPLAY = 1073742085,
        SDLK_AUDIOMUTE = 1073742086,
        SDLK_MEDIASELECT = 1073742087,
        SDLK_WWW = 1073742088,
        SDLK_MAIL = 1073742089,
        SDLK_CALCULATOR = 1073742090,
        SDLK_COMPUTER = 1073742091,
        SDLK_AC_SEARCH = 1073742092,
        SDLK_AC_HOME = 1073742093,
        SDLK_AC_BACK = 1073742094,
        SDLK_AC_FORWARD = 1073742095,
        SDLK_AC_STOP = 1073742096,
        SDLK_AC_REFRESH = 1073742097,
        SDLK_AC_BOOKMARKS = 1073742098,
        SDLK_BRIGHTNESSDOWN = 1073742099,
        SDLK_BRIGHTNESSUP = 1073742100,
        SDLK_DISPLAYSWITCH = 1073742101,
        SDLK_KBDILLUMTOGGLE = 1073742102,
        SDLK_KBDILLUMDOWN = 1073742103,
        SDLK_KBDILLUMUP = 1073742104,
        SDLK_EJECT = 1073742105,
        SDLK_SLEEP = 1073742106,
        SDLK_APP1 = 1073742107,
        SDLK_APP2 = 1073742108,
        SDLK_AUDIOREWIND = 1073742109,
        SDLK_AUDIOFASTFORWARD = 1073742110,
        SDLK_SOFTLEFT = 1073742111,
        SDLK_SOFTRIGHT = 1073742112,
        SDLK_CALL = 1073742113,
        SDLK_ENDCALL = 1073742114
    }

    [CNode(Kind = "Enum")]
    public enum SDL_Keymod : int
    {
        SDL_KMOD_NONE = 0,
        SDL_KMOD_LSHIFT = 1,
        SDL_KMOD_RSHIFT = 2,
        SDL_KMOD_LCTRL = 64,
        SDL_KMOD_RCTRL = 128,
        SDL_KMOD_LALT = 256,
        SDL_KMOD_RALT = 512,
        SDL_KMOD_LGUI = 1024,
        SDL_KMOD_RGUI = 2048,
        SDL_KMOD_NUM = 4096,
        SDL_KMOD_CAPS = 8192,
        SDL_KMOD_MODE = 16384,
        SDL_KMOD_SCROLL = 32768,
        SDL_KMOD_CTRL = 192,
        SDL_KMOD_SHIFT = 3,
        SDL_KMOD_ALT = 768,
        SDL_KMOD_GUI = 3072,
        SDL_KMOD_RESERVED = 32768
    }

    [CNode(Kind = "Enum")]
    public enum SDL_LogCategory : int
    {
        SDL_LOG_CATEGORY_APPLICATION = 0,
        SDL_LOG_CATEGORY_ERROR = 1,
        SDL_LOG_CATEGORY_ASSERT = 2,
        SDL_LOG_CATEGORY_SYSTEM = 3,
        SDL_LOG_CATEGORY_AUDIO = 4,
        SDL_LOG_CATEGORY_VIDEO = 5,
        SDL_LOG_CATEGORY_RENDER = 6,
        SDL_LOG_CATEGORY_INPUT = 7,
        SDL_LOG_CATEGORY_TEST = 8,
        SDL_LOG_CATEGORY_RESERVED1 = 9,
        SDL_LOG_CATEGORY_RESERVED2 = 10,
        SDL_LOG_CATEGORY_RESERVED3 = 11,
        SDL_LOG_CATEGORY_RESERVED4 = 12,
        SDL_LOG_CATEGORY_RESERVED5 = 13,
        SDL_LOG_CATEGORY_RESERVED6 = 14,
        SDL_LOG_CATEGORY_RESERVED7 = 15,
        SDL_LOG_CATEGORY_RESERVED8 = 16,
        SDL_LOG_CATEGORY_RESERVED9 = 17,
        SDL_LOG_CATEGORY_RESERVED10 = 18,
        SDL_LOG_CATEGORY_CUSTOM = 19
    }

    [CNode(Kind = "Enum")]
    public enum SDL_LogPriority : int
    {
        SDL_LOG_PRIORITY_VERBOSE = 1,
        SDL_LOG_PRIORITY_DEBUG = 2,
        SDL_LOG_PRIORITY_INFO = 3,
        SDL_LOG_PRIORITY_WARN = 4,
        SDL_LOG_PRIORITY_ERROR = 5,
        SDL_LOG_PRIORITY_CRITICAL = 6,
        SDL_NUM_LOG_PRIORITIES = 7
    }

    [CNode(Kind = "Enum")]
    public enum SDL_MessageBoxButtonFlags : int
    {
        SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1,
        SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_MessageBoxColorType : int
    {
        SDL_MESSAGEBOX_COLOR_BACKGROUND = 0,
        SDL_MESSAGEBOX_COLOR_TEXT = 1,
        SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
        SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
        SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4,
        SDL_MESSAGEBOX_COLOR_MAX = 5
    }

    [CNode(Kind = "Enum")]
    public enum SDL_MessageBoxFlags : int
    {
        SDL_MESSAGEBOX_ERROR = 16,
        SDL_MESSAGEBOX_WARNING = 32,
        SDL_MESSAGEBOX_INFORMATION = 64,
        SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128,
        SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256
    }

    [CNode(Kind = "Enum")]
    public enum SDL_MouseWheelDirection : int
    {
        SDL_MOUSEWHEEL_NORMAL = 0,
        SDL_MOUSEWHEEL_FLIPPED = 1
    }

    [CNode(Kind = "Enum")]
    public enum SDL_PackedLayout : int
    {
        SDL_PACKEDLAYOUT_NONE = 0,
        SDL_PACKEDLAYOUT_332 = 1,
        SDL_PACKEDLAYOUT_4444 = 2,
        SDL_PACKEDLAYOUT_1555 = 3,
        SDL_PACKEDLAYOUT_5551 = 4,
        SDL_PACKEDLAYOUT_565 = 5,
        SDL_PACKEDLAYOUT_8888 = 6,
        SDL_PACKEDLAYOUT_2101010 = 7,
        SDL_PACKEDLAYOUT_1010102 = 8
    }

    [CNode(Kind = "Enum")]
    public enum SDL_PackedOrder : int
    {
        SDL_PACKEDORDER_NONE = 0,
        SDL_PACKEDORDER_XRGB = 1,
        SDL_PACKEDORDER_RGBX = 2,
        SDL_PACKEDORDER_ARGB = 3,
        SDL_PACKEDORDER_RGBA = 4,
        SDL_PACKEDORDER_XBGR = 5,
        SDL_PACKEDORDER_BGRX = 6,
        SDL_PACKEDORDER_ABGR = 7,
        SDL_PACKEDORDER_BGRA = 8
    }

    [CNode(Kind = "Enum")]
    public enum SDL_PixelFormatEnum : int
    {
        SDL_PIXELFORMAT_UNKNOWN = 0,
        SDL_PIXELFORMAT_INDEX1LSB = 286261504,
        SDL_PIXELFORMAT_INDEX1MSB = 287310080,
        SDL_PIXELFORMAT_INDEX4LSB = 303039488,
        SDL_PIXELFORMAT_INDEX4MSB = 304088064,
        SDL_PIXELFORMAT_INDEX8 = 318769153,
        SDL_PIXELFORMAT_RGB332 = 336660481,
        SDL_PIXELFORMAT_XRGB4444 = 353504258,
        SDL_PIXELFORMAT_RGB444 = 353504258,
        SDL_PIXELFORMAT_XBGR4444 = 357698562,
        SDL_PIXELFORMAT_BGR444 = 357698562,
        SDL_PIXELFORMAT_XRGB1555 = 353570562,
        SDL_PIXELFORMAT_RGB555 = 353570562,
        SDL_PIXELFORMAT_XBGR1555 = 357764866,
        SDL_PIXELFORMAT_BGR555 = 357764866,
        SDL_PIXELFORMAT_ARGB4444 = 355602434,
        SDL_PIXELFORMAT_RGBA4444 = 356651010,
        SDL_PIXELFORMAT_ABGR4444 = 359796738,
        SDL_PIXELFORMAT_BGRA4444 = 360845314,
        SDL_PIXELFORMAT_ARGB1555 = 355667970,
        SDL_PIXELFORMAT_RGBA5551 = 356782082,
        SDL_PIXELFORMAT_ABGR1555 = 359862274,
        SDL_PIXELFORMAT_BGRA5551 = 360976386,
        SDL_PIXELFORMAT_RGB565 = 353701890,
        SDL_PIXELFORMAT_BGR565 = 357896194,
        SDL_PIXELFORMAT_RGB24 = 386930691,
        SDL_PIXELFORMAT_BGR24 = 390076419,
        SDL_PIXELFORMAT_XRGB8888 = 370546692,
        SDL_PIXELFORMAT_RGBX8888 = 371595268,
        SDL_PIXELFORMAT_XBGR8888 = 374740996,
        SDL_PIXELFORMAT_BGRX8888 = 375789572,
        SDL_PIXELFORMAT_ARGB8888 = 372645892,
        SDL_PIXELFORMAT_RGBA8888 = 373694468,
        SDL_PIXELFORMAT_ABGR8888 = 376840196,
        SDL_PIXELFORMAT_BGRA8888 = 377888772,
        SDL_PIXELFORMAT_ARGB2101010 = 372711428,
        SDL_PIXELFORMAT_RGBA32 = 376840196,
        SDL_PIXELFORMAT_ARGB32 = 377888772,
        SDL_PIXELFORMAT_BGRA32 = 372645892,
        SDL_PIXELFORMAT_ABGR32 = 373694468,
        SDL_PIXELFORMAT_RGBX32 = 374740996,
        SDL_PIXELFORMAT_XRGB32 = 375789572,
        SDL_PIXELFORMAT_BGRX32 = 370546692,
        SDL_PIXELFORMAT_XBGR32 = 371595268,
        SDL_PIXELFORMAT_YV12 = 842094169,
        SDL_PIXELFORMAT_IYUV = 1448433993,
        SDL_PIXELFORMAT_YUY2 = 844715353,
        SDL_PIXELFORMAT_UYVY = 1498831189,
        SDL_PIXELFORMAT_YVYU = 1431918169,
        SDL_PIXELFORMAT_NV12 = 842094158,
        SDL_PIXELFORMAT_NV21 = 825382478,
        SDL_PIXELFORMAT_EXTERNAL_OES = 542328143
    }

    [CNode(Kind = "Enum")]
    public enum SDL_PixelType : int
    {
        SDL_PIXELTYPE_UNKNOWN = 0,
        SDL_PIXELTYPE_INDEX1 = 1,
        SDL_PIXELTYPE_INDEX4 = 2,
        SDL_PIXELTYPE_INDEX8 = 3,
        SDL_PIXELTYPE_PACKED8 = 4,
        SDL_PIXELTYPE_PACKED16 = 5,
        SDL_PIXELTYPE_PACKED32 = 6,
        SDL_PIXELTYPE_ARRAYU8 = 7,
        SDL_PIXELTYPE_ARRAYU16 = 8,
        SDL_PIXELTYPE_ARRAYU32 = 9,
        SDL_PIXELTYPE_ARRAYF16 = 10,
        SDL_PIXELTYPE_ARRAYF32 = 11
    }

    [CNode(Kind = "Enum")]
    public enum SDL_PowerState : int
    {
        SDL_POWERSTATE_UNKNOWN = 0,
        SDL_POWERSTATE_ON_BATTERY = 1,
        SDL_POWERSTATE_NO_BATTERY = 2,
        SDL_POWERSTATE_CHARGING = 3,
        SDL_POWERSTATE_CHARGED = 4
    }

    [CNode(Kind = "Enum")]
    public enum SDL_RendererFlags : int
    {
        SDL_RENDERER_SOFTWARE = 1,
        SDL_RENDERER_ACCELERATED = 2,
        SDL_RENDERER_PRESENTVSYNC = 4
    }

    [CNode(Kind = "Enum")]
    public enum SDL_RendererFlip : int
    {
        SDL_FLIP_NONE = 0,
        SDL_FLIP_HORIZONTAL = 1,
        SDL_FLIP_VERTICAL = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_RendererLogicalPresentation : int
    {
        SDL_LOGICAL_PRESENTATION_DISABLED = 0,
        SDL_LOGICAL_PRESENTATION_STRETCH = 1,
        SDL_LOGICAL_PRESENTATION_LETTERBOX = 2,
        SDL_LOGICAL_PRESENTATION_OVERSCAN = 3,
        SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4
    }

    [CNode(Kind = "Enum")]
    public enum SDL_ScaleMode : int
    {
        SDL_SCALEMODE_NEAREST = 0,
        SDL_SCALEMODE_LINEAR = 1,
        SDL_SCALEMODE_BEST = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_Scancode : int
    {
        SDL_SCANCODE_UNKNOWN = 0,
        SDL_SCANCODE_A = 4,
        SDL_SCANCODE_B = 5,
        SDL_SCANCODE_C = 6,
        SDL_SCANCODE_D = 7,
        SDL_SCANCODE_E = 8,
        SDL_SCANCODE_F = 9,
        SDL_SCANCODE_G = 10,
        SDL_SCANCODE_H = 11,
        SDL_SCANCODE_I = 12,
        SDL_SCANCODE_J = 13,
        SDL_SCANCODE_K = 14,
        SDL_SCANCODE_L = 15,
        SDL_SCANCODE_M = 16,
        SDL_SCANCODE_N = 17,
        SDL_SCANCODE_O = 18,
        SDL_SCANCODE_P = 19,
        SDL_SCANCODE_Q = 20,
        SDL_SCANCODE_R = 21,
        SDL_SCANCODE_S = 22,
        SDL_SCANCODE_T = 23,
        SDL_SCANCODE_U = 24,
        SDL_SCANCODE_V = 25,
        SDL_SCANCODE_W = 26,
        SDL_SCANCODE_X = 27,
        SDL_SCANCODE_Y = 28,
        SDL_SCANCODE_Z = 29,
        SDL_SCANCODE_1 = 30,
        SDL_SCANCODE_2 = 31,
        SDL_SCANCODE_3 = 32,
        SDL_SCANCODE_4 = 33,
        SDL_SCANCODE_5 = 34,
        SDL_SCANCODE_6 = 35,
        SDL_SCANCODE_7 = 36,
        SDL_SCANCODE_8 = 37,
        SDL_SCANCODE_9 = 38,
        SDL_SCANCODE_0 = 39,
        SDL_SCANCODE_RETURN = 40,
        SDL_SCANCODE_ESCAPE = 41,
        SDL_SCANCODE_BACKSPACE = 42,
        SDL_SCANCODE_TAB = 43,
        SDL_SCANCODE_SPACE = 44,
        SDL_SCANCODE_MINUS = 45,
        SDL_SCANCODE_EQUALS = 46,
        SDL_SCANCODE_LEFTBRACKET = 47,
        SDL_SCANCODE_RIGHTBRACKET = 48,
        SDL_SCANCODE_BACKSLASH = 49,
        SDL_SCANCODE_NONUSHASH = 50,
        SDL_SCANCODE_SEMICOLON = 51,
        SDL_SCANCODE_APOSTROPHE = 52,
        SDL_SCANCODE_GRAVE = 53,
        SDL_SCANCODE_COMMA = 54,
        SDL_SCANCODE_PERIOD = 55,
        SDL_SCANCODE_SLASH = 56,
        SDL_SCANCODE_CAPSLOCK = 57,
        SDL_SCANCODE_F1 = 58,
        SDL_SCANCODE_F2 = 59,
        SDL_SCANCODE_F3 = 60,
        SDL_SCANCODE_F4 = 61,
        SDL_SCANCODE_F5 = 62,
        SDL_SCANCODE_F6 = 63,
        SDL_SCANCODE_F7 = 64,
        SDL_SCANCODE_F8 = 65,
        SDL_SCANCODE_F9 = 66,
        SDL_SCANCODE_F10 = 67,
        SDL_SCANCODE_F11 = 68,
        SDL_SCANCODE_F12 = 69,
        SDL_SCANCODE_PRINTSCREEN = 70,
        SDL_SCANCODE_SCROLLLOCK = 71,
        SDL_SCANCODE_PAUSE = 72,
        SDL_SCANCODE_INSERT = 73,
        SDL_SCANCODE_HOME = 74,
        SDL_SCANCODE_PAGEUP = 75,
        SDL_SCANCODE_DELETE = 76,
        SDL_SCANCODE_END = 77,
        SDL_SCANCODE_PAGEDOWN = 78,
        SDL_SCANCODE_RIGHT = 79,
        SDL_SCANCODE_LEFT = 80,
        SDL_SCANCODE_DOWN = 81,
        SDL_SCANCODE_UP = 82,
        SDL_SCANCODE_NUMLOCKCLEAR = 83,
        SDL_SCANCODE_KP_DIVIDE = 84,
        SDL_SCANCODE_KP_MULTIPLY = 85,
        SDL_SCANCODE_KP_MINUS = 86,
        SDL_SCANCODE_KP_PLUS = 87,
        SDL_SCANCODE_KP_ENTER = 88,
        SDL_SCANCODE_KP_1 = 89,
        SDL_SCANCODE_KP_2 = 90,
        SDL_SCANCODE_KP_3 = 91,
        SDL_SCANCODE_KP_4 = 92,
        SDL_SCANCODE_KP_5 = 93,
        SDL_SCANCODE_KP_6 = 94,
        SDL_SCANCODE_KP_7 = 95,
        SDL_SCANCODE_KP_8 = 96,
        SDL_SCANCODE_KP_9 = 97,
        SDL_SCANCODE_KP_0 = 98,
        SDL_SCANCODE_KP_PERIOD = 99,
        SDL_SCANCODE_NONUSBACKSLASH = 100,
        SDL_SCANCODE_APPLICATION = 101,
        SDL_SCANCODE_POWER = 102,
        SDL_SCANCODE_KP_EQUALS = 103,
        SDL_SCANCODE_F13 = 104,
        SDL_SCANCODE_F14 = 105,
        SDL_SCANCODE_F15 = 106,
        SDL_SCANCODE_F16 = 107,
        SDL_SCANCODE_F17 = 108,
        SDL_SCANCODE_F18 = 109,
        SDL_SCANCODE_F19 = 110,
        SDL_SCANCODE_F20 = 111,
        SDL_SCANCODE_F21 = 112,
        SDL_SCANCODE_F22 = 113,
        SDL_SCANCODE_F23 = 114,
        SDL_SCANCODE_F24 = 115,
        SDL_SCANCODE_EXECUTE = 116,
        SDL_SCANCODE_HELP = 117,
        SDL_SCANCODE_MENU = 118,
        SDL_SCANCODE_SELECT = 119,
        SDL_SCANCODE_STOP = 120,
        SDL_SCANCODE_AGAIN = 121,
        SDL_SCANCODE_UNDO = 122,
        SDL_SCANCODE_CUT = 123,
        SDL_SCANCODE_COPY = 124,
        SDL_SCANCODE_PASTE = 125,
        SDL_SCANCODE_FIND = 126,
        SDL_SCANCODE_MUTE = 127,
        SDL_SCANCODE_VOLUMEUP = 128,
        SDL_SCANCODE_VOLUMEDOWN = 129,
        SDL_SCANCODE_KP_COMMA = 133,
        SDL_SCANCODE_KP_EQUALSAS400 = 134,
        SDL_SCANCODE_INTERNATIONAL1 = 135,
        SDL_SCANCODE_INTERNATIONAL2 = 136,
        SDL_SCANCODE_INTERNATIONAL3 = 137,
        SDL_SCANCODE_INTERNATIONAL4 = 138,
        SDL_SCANCODE_INTERNATIONAL5 = 139,
        SDL_SCANCODE_INTERNATIONAL6 = 140,
        SDL_SCANCODE_INTERNATIONAL7 = 141,
        SDL_SCANCODE_INTERNATIONAL8 = 142,
        SDL_SCANCODE_INTERNATIONAL9 = 143,
        SDL_SCANCODE_LANG1 = 144,
        SDL_SCANCODE_LANG2 = 145,
        SDL_SCANCODE_LANG3 = 146,
        SDL_SCANCODE_LANG4 = 147,
        SDL_SCANCODE_LANG5 = 148,
        SDL_SCANCODE_LANG6 = 149,
        SDL_SCANCODE_LANG7 = 150,
        SDL_SCANCODE_LANG8 = 151,
        SDL_SCANCODE_LANG9 = 152,
        SDL_SCANCODE_ALTERASE = 153,
        SDL_SCANCODE_SYSREQ = 154,
        SDL_SCANCODE_CANCEL = 155,
        SDL_SCANCODE_CLEAR = 156,
        SDL_SCANCODE_PRIOR = 157,
        SDL_SCANCODE_RETURN2 = 158,
        SDL_SCANCODE_SEPARATOR = 159,
        SDL_SCANCODE_OUT = 160,
        SDL_SCANCODE_OPER = 161,
        SDL_SCANCODE_CLEARAGAIN = 162,
        SDL_SCANCODE_CRSEL = 163,
        SDL_SCANCODE_EXSEL = 164,
        SDL_SCANCODE_KP_00 = 176,
        SDL_SCANCODE_KP_000 = 177,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
        SDL_SCANCODE_DECIMALSEPARATOR = 179,
        SDL_SCANCODE_CURRENCYUNIT = 180,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181,
        SDL_SCANCODE_KP_LEFTPAREN = 182,
        SDL_SCANCODE_KP_RIGHTPAREN = 183,
        SDL_SCANCODE_KP_LEFTBRACE = 184,
        SDL_SCANCODE_KP_RIGHTBRACE = 185,
        SDL_SCANCODE_KP_TAB = 186,
        SDL_SCANCODE_KP_BACKSPACE = 187,
        SDL_SCANCODE_KP_A = 188,
        SDL_SCANCODE_KP_B = 189,
        SDL_SCANCODE_KP_C = 190,
        SDL_SCANCODE_KP_D = 191,
        SDL_SCANCODE_KP_E = 192,
        SDL_SCANCODE_KP_F = 193,
        SDL_SCANCODE_KP_XOR = 194,
        SDL_SCANCODE_KP_POWER = 195,
        SDL_SCANCODE_KP_PERCENT = 196,
        SDL_SCANCODE_KP_LESS = 197,
        SDL_SCANCODE_KP_GREATER = 198,
        SDL_SCANCODE_KP_AMPERSAND = 199,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200,
        SDL_SCANCODE_KP_VERTICALBAR = 201,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
        SDL_SCANCODE_KP_COLON = 203,
        SDL_SCANCODE_KP_HASH = 204,
        SDL_SCANCODE_KP_SPACE = 205,
        SDL_SCANCODE_KP_AT = 206,
        SDL_SCANCODE_KP_EXCLAM = 207,
        SDL_SCANCODE_KP_MEMSTORE = 208,
        SDL_SCANCODE_KP_MEMRECALL = 209,
        SDL_SCANCODE_KP_MEMCLEAR = 210,
        SDL_SCANCODE_KP_MEMADD = 211,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213,
        SDL_SCANCODE_KP_MEMDIVIDE = 214,
        SDL_SCANCODE_KP_PLUSMINUS = 215,
        SDL_SCANCODE_KP_CLEAR = 216,
        SDL_SCANCODE_KP_CLEARENTRY = 217,
        SDL_SCANCODE_KP_BINARY = 218,
        SDL_SCANCODE_KP_OCTAL = 219,
        SDL_SCANCODE_KP_DECIMAL = 220,
        SDL_SCANCODE_KP_HEXADECIMAL = 221,
        SDL_SCANCODE_LCTRL = 224,
        SDL_SCANCODE_LSHIFT = 225,
        SDL_SCANCODE_LALT = 226,
        SDL_SCANCODE_LGUI = 227,
        SDL_SCANCODE_RCTRL = 228,
        SDL_SCANCODE_RSHIFT = 229,
        SDL_SCANCODE_RALT = 230,
        SDL_SCANCODE_RGUI = 231,
        SDL_SCANCODE_MODE = 257,
        SDL_SCANCODE_AUDIONEXT = 258,
        SDL_SCANCODE_AUDIOPREV = 259,
        SDL_SCANCODE_AUDIOSTOP = 260,
        SDL_SCANCODE_AUDIOPLAY = 261,
        SDL_SCANCODE_AUDIOMUTE = 262,
        SDL_SCANCODE_MEDIASELECT = 263,
        SDL_SCANCODE_WWW = 264,
        SDL_SCANCODE_MAIL = 265,
        SDL_SCANCODE_CALCULATOR = 266,
        SDL_SCANCODE_COMPUTER = 267,
        SDL_SCANCODE_AC_SEARCH = 268,
        SDL_SCANCODE_AC_HOME = 269,
        SDL_SCANCODE_AC_BACK = 270,
        SDL_SCANCODE_AC_FORWARD = 271,
        SDL_SCANCODE_AC_STOP = 272,
        SDL_SCANCODE_AC_REFRESH = 273,
        SDL_SCANCODE_AC_BOOKMARKS = 274,
        SDL_SCANCODE_BRIGHTNESSDOWN = 275,
        SDL_SCANCODE_BRIGHTNESSUP = 276,
        SDL_SCANCODE_DISPLAYSWITCH = 277,
        SDL_SCANCODE_KBDILLUMTOGGLE = 278,
        SDL_SCANCODE_KBDILLUMDOWN = 279,
        SDL_SCANCODE_KBDILLUMUP = 280,
        SDL_SCANCODE_EJECT = 281,
        SDL_SCANCODE_SLEEP = 282,
        SDL_SCANCODE_APP1 = 283,
        SDL_SCANCODE_APP2 = 284,
        SDL_SCANCODE_AUDIOREWIND = 285,
        SDL_SCANCODE_AUDIOFASTFORWARD = 286,
        SDL_SCANCODE_SOFTLEFT = 287,
        SDL_SCANCODE_SOFTRIGHT = 288,
        SDL_SCANCODE_CALL = 289,
        SDL_SCANCODE_ENDCALL = 290,
        SDL_NUM_SCANCODES = 512
    }

    [CNode(Kind = "Enum")]
    public enum SDL_SensorType : int
    {
        SDL_SENSOR_INVALID = -1,
        SDL_SENSOR_UNKNOWN = 0,
        SDL_SENSOR_ACCEL = 1,
        SDL_SENSOR_GYRO = 2,
        SDL_SENSOR_ACCEL_L = 3,
        SDL_SENSOR_GYRO_L = 4,
        SDL_SENSOR_ACCEL_R = 5,
        SDL_SENSOR_GYRO_R = 6
    }

    [CNode(Kind = "Enum")]
    public enum SDL_SystemCursor : int
    {
        SDL_SYSTEM_CURSOR_ARROW = 0,
        SDL_SYSTEM_CURSOR_IBEAM = 1,
        SDL_SYSTEM_CURSOR_WAIT = 2,
        SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
        SDL_SYSTEM_CURSOR_WAITARROW = 4,
        SDL_SYSTEM_CURSOR_SIZENWSE = 5,
        SDL_SYSTEM_CURSOR_SIZENESW = 6,
        SDL_SYSTEM_CURSOR_SIZEWE = 7,
        SDL_SYSTEM_CURSOR_SIZENS = 8,
        SDL_SYSTEM_CURSOR_SIZEALL = 9,
        SDL_SYSTEM_CURSOR_NO = 10,
        SDL_SYSTEM_CURSOR_HAND = 11,
        SDL_NUM_SYSTEM_CURSORS = 12
    }

    [CNode(Kind = "Enum")]
    public enum SDL_SystemTheme : int
    {
        SDL_SYSTEM_THEME_UNKNOWN = 0,
        SDL_SYSTEM_THEME_LIGHT = 1,
        SDL_SYSTEM_THEME_DARK = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_TextureAccess : int
    {
        SDL_TEXTUREACCESS_STATIC = 0,
        SDL_TEXTUREACCESS_STREAMING = 1,
        SDL_TEXTUREACCESS_TARGET = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_TextureModulate : int
    {
        SDL_TEXTUREMODULATE_NONE = 0,
        SDL_TEXTUREMODULATE_COLOR = 1,
        SDL_TEXTUREMODULATE_ALPHA = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_ThreadPriority : int
    {
        SDL_THREAD_PRIORITY_LOW = 0,
        SDL_THREAD_PRIORITY_NORMAL = 1,
        SDL_THREAD_PRIORITY_HIGH = 2,
        SDL_THREAD_PRIORITY_TIME_CRITICAL = 3
    }

    [CNode(Kind = "Enum")]
    public enum SDL_TouchDeviceType : int
    {
        SDL_TOUCH_DEVICE_INVALID = -1,
        SDL_TOUCH_DEVICE_DIRECT = 0,
        SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
        SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_WindowFlags : int
    {
        SDL_WINDOW_FULLSCREEN = 1,
        SDL_WINDOW_OPENGL = 2,
        SDL_WINDOW_OCCLUDED = 4,
        SDL_WINDOW_HIDDEN = 8,
        SDL_WINDOW_BORDERLESS = 16,
        SDL_WINDOW_RESIZABLE = 32,
        SDL_WINDOW_MINIMIZED = 64,
        SDL_WINDOW_MAXIMIZED = 128,
        SDL_WINDOW_MOUSE_GRABBED = 256,
        SDL_WINDOW_INPUT_FOCUS = 512,
        SDL_WINDOW_MOUSE_FOCUS = 1024,
        SDL_WINDOW_FOREIGN = 2048,
        SDL_WINDOW_HIGH_PIXEL_DENSITY = 8192,
        SDL_WINDOW_MOUSE_CAPTURE = 16384,
        SDL_WINDOW_ALWAYS_ON_TOP = 32768,
        SDL_WINDOW_UTILITY = 131072,
        SDL_WINDOW_TOOLTIP = 262144,
        SDL_WINDOW_POPUP_MENU = 524288,
        SDL_WINDOW_KEYBOARD_GRABBED = 1048576,
        SDL_WINDOW_VULKAN = 268435456,
        SDL_WINDOW_METAL = 536870912,
        SDL_WINDOW_TRANSPARENT = 1073741824,
        SDL_WINDOW_NOT_FOCUSABLE = -2147483648
    }

    [CNode(Kind = "Enum")]
    public enum SDL_YUV_CONVERSION_MODE : int
    {
        SDL_YUV_CONVERSION_JPEG = 0,
        SDL_YUV_CONVERSION_BT601 = 1,
        SDL_YUV_CONVERSION_BT709 = 2,
        SDL_YUV_CONVERSION_AUTOMATIC = 3
    }

    [CNode(Kind = "Enum")]
    public enum SDL_bool : int
    {
        SDL_FALSE = 0,
        SDL_TRUE = 1
    }

    [CNode(Kind = "Enum")]
    public enum SDL_errorcode : int
    {
        SDL_ENOMEM = 0,
        SDL_EFREAD = 1,
        SDL_EFWRITE = 2,
        SDL_EFSEEK = 3,
        SDL_UNSUPPORTED = 4,
        SDL_LASTERROR = 5
    }

    [CNode(Kind = "Enum")]
    public enum SDL_eventaction : int
    {
        SDL_ADDEVENT = 0,
        SDL_PEEKEVENT = 1,
        SDL_GETEVENT = 2
    }

    [CNode(Kind = "Enum")]
    public enum SDL_hid_bus_type : int
    {
        SDL_HID_API_BUS_UNKNOWN = 0,
        SDL_HID_API_BUS_USB = 1,
        SDL_HID_API_BUS_BLUETOOTH = 2,
        SDL_HID_API_BUS_I2C = 3,
        SDL_HID_API_BUS_SPI = 4
    }

    [CNode(Kind = "Enum")]
    public enum WindowShapeMode : int
    {
        ShapeModeDefault = 0,
        ShapeModeBinarizeAlpha = 1,
        ShapeModeReverseBinarizeAlpha = 2,
        ShapeModeColorKey = 3
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioStream
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_BlitMap
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Condition
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Cursor
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Gamepad
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Haptic
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Joystick
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Mutex
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_RWLock
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_RWops
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Renderer
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Semaphore
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Sensor
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_SysWMmsg
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Texture
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Thread
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Window
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_hid_device
    {
    }

    [CNode(Kind = "OpaqueType")]
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_iconv_data_t
    {
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_AssertionHandler
    {
        [FieldOffset(0)]
        public FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState Data;

        public static implicit operator FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState(SDL_AssertionHandler data) => data.Data;
        public static implicit operator SDL_AssertionHandler(FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_AudioDeviceID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_AudioDeviceID data) => data.Data;
        public static implicit operator SDL_AudioDeviceID(uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
    public struct SDL_AudioFormat
    {
        [FieldOffset(0)]
        public ushort Data;

        public static implicit operator ushort(SDL_AudioFormat data) => data.Data;
        public static implicit operator SDL_AudioFormat(ushort data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_AudioStreamCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Void Data;

        public static implicit operator FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Void(SDL_AudioStreamCallback data) => data.Data;
        public static implicit operator SDL_AudioStreamCallback(FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Void data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_ClipboardCleanupCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Void Data;

        public static implicit operator FnPtr_VoidPtr_Void(SDL_ClipboardCleanupCallback data) => data.Data;
        public static implicit operator SDL_ClipboardCleanupCallback(FnPtr_VoidPtr_Void data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_ClipboardDataCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_CString_UlongPtr_VoidPtr Data;

        public static implicit operator FnPtr_VoidPtr_CString_UlongPtr_VoidPtr(SDL_ClipboardDataCallback data) => data.Data;
        public static implicit operator SDL_ClipboardDataCallback(FnPtr_VoidPtr_CString_UlongPtr_VoidPtr data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_DisplayID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_DisplayID data) => data.Data;
        public static implicit operator SDL_DisplayID(uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLAttrib
    {
        [FieldOffset(0)]
        public IntPtr Data;

        public static implicit operator IntPtr(SDL_EGLAttrib data) => data.Data;
        public static implicit operator SDL_EGLAttrib(IntPtr data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLAttribArrayCallback
    {
        [FieldOffset(0)]
        public FnPtr_SDLEGLAttribPtr Data;

        public static implicit operator FnPtr_SDLEGLAttribPtr(SDL_EGLAttribArrayCallback data) => data.Data;
        public static implicit operator SDL_EGLAttribArrayCallback(FnPtr_SDLEGLAttribPtr data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLConfig
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLConfig data) => data.Data;
        public static implicit operator SDL_EGLConfig(void* data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLDisplay
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLDisplay data) => data.Data;
        public static implicit operator SDL_EGLDisplay(void* data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLIntArrayCallback
    {
        [FieldOffset(0)]
        public FnPtr_SDLEGLintPtr Data;

        public static implicit operator FnPtr_SDLEGLintPtr(SDL_EGLIntArrayCallback data) => data.Data;
        public static implicit operator SDL_EGLIntArrayCallback(FnPtr_SDLEGLintPtr data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLSurface
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLSurface data) => data.Data;
        public static implicit operator SDL_EGLSurface(void* data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_EGLint
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_EGLint data) => data.Data;
        public static implicit operator SDL_EGLint(int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EventFilter
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLEventPtr_Int Data;

        public static implicit operator FnPtr_VoidPtr_SDLEventPtr_Int(SDL_EventFilter data) => data.Data;
        public static implicit operator SDL_EventFilter(FnPtr_VoidPtr_SDLEventPtr_Int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_FingerID
    {
        [FieldOffset(0)]
        public long Data;

        public static implicit operator long(SDL_FingerID data) => data.Data;
        public static implicit operator SDL_FingerID(long data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_FunctionPointer
    {
        [FieldOffset(0)]
        public FnPtr_Void Data;

        public static implicit operator FnPtr_Void(SDL_FunctionPointer data) => data.Data;
        public static implicit operator SDL_FunctionPointer(FnPtr_Void data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_GLContext
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_GLContext data) => data.Data;
        public static implicit operator SDL_GLContext(void* data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_HintCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_CString_CString_CString_Void Data;

        public static implicit operator FnPtr_VoidPtr_CString_CString_CString_Void(SDL_HintCallback data) => data.Data;
        public static implicit operator SDL_HintCallback(FnPtr_VoidPtr_CString_CString_CString_Void data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_HitTest
    {
        [FieldOffset(0)]
        public FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult Data;

        public static implicit operator FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult(SDL_HitTest data) => data.Data;
        public static implicit operator SDL_HitTest(FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    public struct SDL_JoystickGUID
    {
        [FieldOffset(0)]
        public SDL_GUID Data;

        public static implicit operator SDL_GUID(SDL_JoystickGUID data) => data.Data;
        public static implicit operator SDL_JoystickGUID(SDL_GUID data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_JoystickID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_JoystickID data) => data.Data;
        public static implicit operator SDL_JoystickID(uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_Keycode
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_Keycode data) => data.Data;
        public static implicit operator SDL_Keycode(int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_LogOutputFunction
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void Data;

        public static implicit operator FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void(SDL_LogOutputFunction data) => data.Data;
        public static implicit operator SDL_LogOutputFunction(FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_MetalView
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_MetalView data) => data.Data;
        public static implicit operator SDL_MetalView(void* data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_MouseID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_MouseID data) => data.Data;
        public static implicit operator SDL_MouseID(uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SensorID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_SensorID data) => data.Data;
        public static implicit operator SDL_SensorID(uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SpinLock
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_SpinLock data) => data.Data;
        public static implicit operator SDL_SpinLock(int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_TLSID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_TLSID data) => data.Data;
        public static implicit operator SDL_TLSID(uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_ThreadFunction
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Int Data;

        public static implicit operator FnPtr_VoidPtr_Int(SDL_ThreadFunction data) => data.Data;
        public static implicit operator SDL_ThreadFunction(FnPtr_VoidPtr_Int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_TimerCallback
    {
        [FieldOffset(0)]
        public FnPtr_Uint_VoidPtr_Uint Data;

        public static implicit operator FnPtr_Uint_VoidPtr_Uint(SDL_TimerCallback data) => data.Data;
        public static implicit operator SDL_TimerCallback(FnPtr_Uint_VoidPtr_Uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_TimerID
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_TimerID data) => data.Data;
        public static implicit operator SDL_TimerID(int data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_TouchID
    {
        [FieldOffset(0)]
        public long Data;

        public static implicit operator long(SDL_TouchID data) => data.Data;
        public static implicit operator SDL_TouchID(long data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_WindowID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_WindowID data) => data.Data;
        public static implicit operator SDL_WindowID(uint data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_calloc_func
    {
        [FieldOffset(0)]
        public FnPtr_Ulong_Ulong_VoidPtr Data;

        public static implicit operator FnPtr_Ulong_Ulong_VoidPtr(SDL_calloc_func data) => data.Data;
        public static implicit operator SDL_calloc_func(FnPtr_Ulong_Ulong_VoidPtr data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_free_func
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Void Data;

        public static implicit operator FnPtr_VoidPtr_Void(SDL_free_func data) => data.Data;
        public static implicit operator SDL_free_func(FnPtr_VoidPtr_Void data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_iconv_t
    {
        [FieldOffset(0)]
        public SDL_iconv_data_t* Data;

        public static implicit operator SDL_iconv_data_t*(SDL_iconv_t data) => data.Data;
        public static implicit operator SDL_iconv_t(SDL_iconv_data_t* data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_malloc_func
    {
        [FieldOffset(0)]
        public FnPtr_Ulong_VoidPtr Data;

        public static implicit operator FnPtr_Ulong_VoidPtr(SDL_malloc_func data) => data.Data;
        public static implicit operator SDL_malloc_func(FnPtr_Ulong_VoidPtr data) => new() { Data = data };
    }

    [CNode(Kind = "TypeAlias")]
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_realloc_func
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Ulong_VoidPtr Data;

        public static implicit operator FnPtr_VoidPtr_Ulong_VoidPtr(SDL_realloc_func data) => data.Data;
        public static implicit operator SDL_realloc_func(FnPtr_VoidPtr_Ulong_VoidPtr data) => new() { Data = data };
    }

    [CNode(Kind = "MacroObject")]
    public const int SDLK_SCANCODE_MASK = 1073741824;

    [CNode(Kind = "MacroObject")]
    public const int SDL_ALPHA_OPAQUE = 255;

    [CNode(Kind = "MacroObject")]
    public const int SDL_ALPHA_TRANSPARENT = 0;

    [CNode(Kind = "MacroObject")]
    public static SDL_AudioDeviceID SDL_AUDIO_DEVICE_DEFAULT_CAPTURE = 4294967294;

    [CNode(Kind = "MacroObject")]
    public static SDL_AudioDeviceID SDL_AUDIO_DEVICE_DEFAULT_OUTPUT = 4294967295;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_F32LSB = 33056;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_F32MSB = 37152;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_MASK_BITSIZE = 255;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_MASK_DATATYPE = 256;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_MASK_ENDIAN = 4096;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_MASK_SIGNED = 32768;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_S16LSB = 32784;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_S16MSB = 36880;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_S32LSB = 32800;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_S32MSB = 36896;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_S8 = 32776;

    [CNode(Kind = "MacroObject")]
    public const int SDL_AUDIO_U8 = 8;

    [CNode(Kind = "MacroObject")]
    public const int SDL_BIG_ENDIAN = 4321;

    [CNode(Kind = "MacroObject")]
    public const int SDL_BUTTON_LEFT = 1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_BUTTON_MIDDLE = 2;

    [CNode(Kind = "MacroObject")]
    public const int SDL_BUTTON_RIGHT = 3;

    [CNode(Kind = "MacroObject")]
    public const int SDL_BUTTON_X1 = 4;

    [CNode(Kind = "MacroObject")]
    public const int SDL_BUTTON_X2 = 5;

    [CNode(Kind = "MacroObject")]
    public const int SDL_CACHELINE_SIZE = 128;

    [CNode(Kind = "MacroObject")]
    public const int SDL_DONTFREE = 4;

    [CNode(Kind = "MacroObject")]
    public const float SDL_FLT_EPSILON = 1.1920928955078125E-07f;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_AUTOCENTER = 8192;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAPTIC_CARTESIAN = 1;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_CONSTANT = 1;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_CUSTOM = 2048;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_DAMPER = 256;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_FRICTION = 1024;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_GAIN = 4096;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_INERTIA = 512;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_INFINITY = 4294967295;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_LEFTRIGHT = 4;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_PAUSE = 32768;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAPTIC_POLAR = 0;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_RAMP = 64;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_SAWTOOTHDOWN = 32;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_SAWTOOTHUP = 16;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_SINE = 2;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAPTIC_SPHERICAL = 2;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_SPRING = 128;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_STATUS = 16384;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAPTIC_STEERING_AXIS = 3;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_HAPTIC_TRIANGLE = 8;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_CENTERED = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_DOWN = 4;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_LEFT = 8;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_LEFTDOWN = 12;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_LEFTUP = 9;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_RIGHT = 2;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_RIGHTDOWN = 6;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_RIGHTUP = 3;

    [CNode(Kind = "MacroObject")]
    public const int SDL_HAT_UP = 1;

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ACCELEROMETER_AS_JOYSTICK = "SDL_ACCELEROMETER_AS_JOYSTICK";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ALLOW_TOPMOST = "SDL_ALLOW_TOPMOST";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY = "SDL_ANDROID_ALLOW_RECREATE_ACTIVITY";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ANDROID_BLOCK_ON_PAUSE = "SDL_ANDROID_BLOCK_ON_PAUSE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ANDROID_TRAP_BACK_BUTTON = "SDL_ANDROID_TRAP_BACK_BUTTON";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_APP_ID = "SDL_APP_ID";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_APP_NAME = "SDL_APP_NAME";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUDIO_CATEGORY = "SDL_AUDIO_CATEGORY";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUDIO_DEVICE_APP_NAME = "SDL_AUDIO_DEVICE_APP_NAME";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUDIO_DEVICE_STREAM_NAME = "SDL_AUDIO_DEVICE_STREAM_NAME";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = "SDL_AUDIO_DEVICE_STREAM_ROLE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUDIO_DRIVER = "SDL_AUDIO_DRIVER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUDIO_INCLUDE_MONITORS = "SDL_AUDIO_INCLUDE_MONITORS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUTO_UPDATE_JOYSTICKS = "SDL_AUTO_UPDATE_JOYSTICKS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_AUTO_UPDATE_SENSORS = "SDL_AUTO_UPDATE_SENSORS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_BMP_SAVE_LEGACY_FORMAT = "SDL_BMP_SAVE_LEGACY_FORMAT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_DIRECTINPUT_ENABLED = "SDL_DIRECTINPUT_ENABLED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_DISPLAY_USABLE_BOUNDS = "SDL_DISPLAY_USABLE_BOUNDS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_EMSCRIPTEN_ASYNCIFY = "SDL_EMSCRIPTEN_ASYNCIFY";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR = "SDL_EMSCRIPTEN_CANVAS_SELECTOR";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ENABLE_SCREEN_KEYBOARD = "SDL_ENABLE_SCREEN_KEYBOARD";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_EVENT_LOGGING = "SDL_EVENT_LOGGING";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_FORCE_RAISEWINDOW = "SDL_HINT_FORCE_RAISEWINDOW";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GAMECONTROLLERCONFIG_FILE = "SDL_GAMECONTROLLERCONFIG_FILE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GAMECONTROLLERTYPE = "SDL_GAMECONTROLLERTYPE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = "SDL_GAMECONTROLLER_IGNORE_DEVICES";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GAMECONTROLLER_SENSOR_FUSION = "SDL_GAMECONTROLLER_SENSOR_FUSION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS = "SDL_GAMECONTROLLER_USE_BUTTON_LABELS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GDK_TEXTINPUT_DEFAULT = "SDL_GDK_TEXTINPUT_DEFAULT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GDK_TEXTINPUT_DESCRIPTION = "SDL_GDK_TEXTINPUT_DESCRIPTION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH = "SDL_GDK_TEXTINPUT_MAX_LENGTH";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GDK_TEXTINPUT_SCOPE = "SDL_GDK_TEXTINPUT_SCOPE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GDK_TEXTINPUT_TITLE = "SDL_GDK_TEXTINPUT_TITLE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_GRAB_KEYBOARD = "SDL_GRAB_KEYBOARD";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS = "SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_HIDAPI_IGNORE_DEVICES = "SDL_HIDAPI_IGNORE_DEVICES";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_IME_INTERNAL_EDITING = "SDL_IME_INTERNAL_EDITING";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_IME_SHOW_UI = "SDL_IME_SHOW_UI";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_IME_SUPPORT_EXTENDED_TEXT = "SDL_IME_SUPPORT_EXTENDED_TEXT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_IOS_HIDE_HOME_INDICATOR = "SDL_IOS_HIDE_HOME_INDICATOR";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_DEVICE = "SDL_JOYSTICK_DEVICE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE = "SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI = "SDL_JOYSTICK_HIDAPI";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS = "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = "SDL_JOYSTICK_HIDAPI_GAMECUBE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED = "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = "SDL_JOYSTICK_HIDAPI_JOY_CONS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_LUNA = "SDL_JOYSTICK_HIDAPI_LUNA";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC = "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_PS3 = "SDL_JOYSTICK_HIDAPI_PS3";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_PS4 = "SDL_JOYSTICK_HIDAPI_PS4";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_PS5 = "SDL_JOYSTICK_HIDAPI_PS5";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_SHIELD = "SDL_JOYSTICK_HIDAPI_SHIELD";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_STADIA = "SDL_JOYSTICK_HIDAPI_STADIA";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_STEAM = "SDL_JOYSTICK_HIDAPI_STEAM";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH = "SDL_JOYSTICK_HIDAPI_SWITCH";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS = "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_WII = "SDL_JOYSTICK_HIDAPI_WII";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX = "SDL_JOYSTICK_HIDAPI_XBOX";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = "SDL_JOYSTICK_HIDAPI_XBOX_360";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS = "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = "SDL_JOYSTICK_HIDAPI_XBOX_ONE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED = "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_RAWINPUT = "SDL_JOYSTICK_RAWINPUT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_ROG_CHAKRAM = "SDL_JOYSTICK_ROG_CHAKRAM";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_THREAD = "SDL_JOYSTICK_THREAD";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_JOYSTICK_WGI = "SDL_JOYSTICK_WGI";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_KMSDRM_DEVICE_INDEX = "SDL_KMSDRM_DEVICE_INDEX";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = "SDL_KMSDRM_REQUIRE_DRM_MASTER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_LINUX_DIGITAL_HATS = "SDL_LINUX_DIGITAL_HATS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_LINUX_HAT_DEADZONES = "SDL_LINUX_HAT_DEADZONES";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_LINUX_JOYSTICK_CLASSIC = "SDL_LINUX_JOYSTICK_CLASSIC";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_LINUX_JOYSTICK_DEADZONES = "SDL_LINUX_JOYSTICK_DEADZONES";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MAC_BACKGROUND_APP = "SDL_MAC_BACKGROUND_APP";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = "SDL_MAC_OPENGL_ASYNC_DISPATCH";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_AUTO_CAPTURE = "SDL_MOUSE_AUTO_CAPTURE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = "SDL_MOUSE_DOUBLE_CLICK_RADIUS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = "SDL_MOUSE_DOUBLE_CLICK_TIME";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = "SDL_MOUSE_FOCUS_CLICKTHROUGH";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = "SDL_MOUSE_NORMAL_SPEED_SCALE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = "SDL_MOUSE_RELATIVE_MODE_CENTER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = "SDL_MOUSE_RELATIVE_SPEED_SCALE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = "SDL_MOUSE_RELATIVE_SYSTEM_SCALE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = "SDL_MOUSE_RELATIVE_WARP_MOTION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_MOUSE_TOUCH_EVENTS = "SDL_MOUSE_TOUCH_EVENTS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_NO_SIGNAL_HANDLERS = "SDL_NO_SIGNAL_HANDLERS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_OPENGL_ES_DRIVER = "SDL_OPENGL_ES_DRIVER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_ORIENTATIONS = "SDL_IOS_ORIENTATIONS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_POLL_SENTINEL = "SDL_POLL_SENTINEL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_PREFERRED_LOCALES = "SDL_PREFERRED_LOCALES";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_PS2_DYNAMIC_VSYNC = "SDL_PS2_DYNAMIC_VSYNC";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION = "SDL_QTWAYLAND_CONTENT_ORIENTATION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_QTWAYLAND_WINDOW_FLAGS = "SDL_QTWAYLAND_WINDOW_FLAGS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = "SDL_QUIT_ON_LAST_WINDOW_CLOSE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_BATCHING = "SDL_RENDER_BATCHING";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_RENDER_DIRECT3D11_DEBUG";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_LINE_METHOD = "SDL_RENDER_LINE_METHOD";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE = "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_OPENGL_SHADERS = "SDL_RENDER_OPENGL_SHADERS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_SCALE_QUALITY = "SDL_RENDER_SCALE_QUALITY";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RETURN_KEY_HIDES_IME = "SDL_RETURN_KEY_HIDES_IME";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_RPI_VIDEO_LAYER = "SDL_RPI_VIDEO_LAYER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_THREAD_PRIORITY_POLICY = "SDL_THREAD_PRIORITY_POLICY";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_THREAD_STACK_SIZE = "SDL_THREAD_STACK_SIZE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_TOUCH_MOUSE_EVENTS = "SDL_TOUCH_MOUSE_EVENTS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = "SDL_TRACKPAD_IS_TOUCH_ONLY";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_TV_REMOTE_AS_JOYSTICK = "SDL_TV_REMOTE_AS_JOYSTICK";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_DOUBLE_BUFFER = "SDL_VIDEO_DOUBLE_BUFFER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_DRIVER = "SDL_VIDEO_DRIVER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK = "SDL_VIDEO_EGL_GETDISPLAY_FALLBACK";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_EXTERNAL_CONTEXT = "SDL_VIDEO_EXTERNAL_CONTEXT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_FORCE_EGL = "SDL_VIDEO_FORCE_EGL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL = "SDL_VIDEO_FOREIGN_WINDOW_OPENGL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN = "SDL_VIDEO_FOREIGN_WINDOW_VULKAN";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_VIDEO_MAC_FULLSCREEN_SPACES";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP = "SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = "SDL_VIDEO_WAYLAND_MODE_EMULATION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_WAYLAND_MODE_SCALING = "SDL_VIDEO_WAYLAND_MODE_SCALING";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_X11_NET_WM_PING = "SDL_VIDEO_X11_NET_WM_PING";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_X11_SCALING_FACTOR = "SDL_VIDEO_X11_SCALING_FACTOR";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_X11_WINDOW_VISUALID = "SDL_VIDEO_X11_WINDOW_VISUALID";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WAVE_FACT_CHUNK = "SDL_WAVE_FACT_CHUNK";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WAVE_RIFF_CHUNK_SIZE = "SDL_WAVE_RIFF_CHUNK_SIZE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WAVE_TRUNCATION = "SDL_WAVE_TRUNCATION";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING = "SDL_WINDOWS_DISABLE_THREAD_NAMING";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS = "SDL_WINDOWS_ENABLE_MENU_MNEMONICS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = "SDL_WINDOWS_ENABLE_MESSAGELOOP";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS = "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_INTRESOURCE_ICON = "SDL_WINDOWS_INTRESOURCE_ICON";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOWS_USE_D3D9EX = "SDL_WINDOWS_USE_D3D9EX";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED = "SDL_WINDOW_ACTIVATE_WHEN_RAISED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN = "SDL_WINDOW_ACTIVATE_WHEN_SHOWN";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINRT_HANDLE_BACK_BUTTON = "SDL_WINRT_HANDLE_BACK_BUTTON";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = "SDL_WINRT_PRIVACY_POLICY_LABEL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_WINRT_PRIVACY_POLICY_URL = "SDL_WINRT_PRIVACY_POLICY_URL";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = "SDL_X11_FORCE_OVERRIDE_REDIRECT";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_X11_WINDOW_TYPE = "SDL_X11_WINDOW_TYPE";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED";

    [CNode(Kind = "MacroObject")]
    public static string SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING";

    [CNode(Kind = "MacroObject")]
    public static ulong SDL_ICONV_E2BIG = 18446744073709551614;

    [CNode(Kind = "MacroObject")]
    public static ulong SDL_ICONV_EILSEQ = 18446744073709551613;

    [CNode(Kind = "MacroObject")]
    public static ulong SDL_ICONV_EINVAL = 18446744073709551612;

    [CNode(Kind = "MacroObject")]
    public static ulong SDL_ICONV_ERROR = 18446744073709551615;

    [CNode(Kind = "MacroObject")]
    public const int SDL_INIT_EVERYTHING = 62001;

    [CNode(Kind = "MacroObject")]
    public const int SDL_INVALID_SHAPE_ARGUMENT = -2;

    [CNode(Kind = "MacroObject")]
    public const double SDL_IPHONE_MAX_GFORCE = 5;

    [CNode(Kind = "MacroObject")]
    public const int SDL_JOYSTICK_AXIS_MAX = 32767;

    [CNode(Kind = "MacroObject")]
    public const int SDL_JOYSTICK_AXIS_MIN = -32768;

    [CNode(Kind = "MacroObject")]
    public const int SDL_LIL_ENDIAN = 1234;

    [CNode(Kind = "MacroObject")]
    public const int SDL_MAJOR_VERSION = 3;

    [CNode(Kind = "MacroObject")]
    public const int SDL_MAX_LOG_MESSAGE = 4096;

    [CNode(Kind = "MacroObject")]
    public static short SDL_MAX_SINT16 = 32767;

    [CNode(Kind = "MacroObject")]
    public static int SDL_MAX_SINT32 = 2147483647;

    [CNode(Kind = "MacroObject")]
    public static long SDL_MAX_SINT64 = -1;

    [CNode(Kind = "MacroObject")]
    public static sbyte SDL_MAX_SINT8 = 127;

    [CNode(Kind = "MacroObject")]
    public static ushort SDL_MAX_UINT16 = 65535;

    [CNode(Kind = "MacroObject")]
    public static uint SDL_MAX_UINT32 = 4294967295;

    [CNode(Kind = "MacroObject")]
    public static ulong SDL_MAX_UINT64 = 18446744073709551615;

    [CNode(Kind = "MacroObject")]
    public static byte SDL_MAX_UINT8 = 255;

    [CNode(Kind = "MacroObject")]
    public const int SDL_MINOR_VERSION = 0;

    [CNode(Kind = "MacroObject")]
    public static short SDL_MIN_SINT16 = -32768;

    [CNode(Kind = "MacroObject")]
    public static int SDL_MIN_SINT32 = -2147483648;

    [CNode(Kind = "MacroObject")]
    public static long SDL_MIN_SINT64 = 0;

    [CNode(Kind = "MacroObject")]
    public static sbyte SDL_MIN_SINT8 = -128;

    [CNode(Kind = "MacroObject")]
    public static ushort SDL_MIN_UINT16 = 0;

    [CNode(Kind = "MacroObject")]
    public static uint SDL_MIN_UINT32 = 0;

    [CNode(Kind = "MacroObject")]
    public static ulong SDL_MIN_UINT64 = 0;

    [CNode(Kind = "MacroObject")]
    public static byte SDL_MIN_UINT8 = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_MIX_MAXVOLUME = 128;

    [CNode(Kind = "MacroObject")]
    public static long SDL_MOUSE_TOUCHID = -1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_MS_PER_SECOND = 1000;

    [CNode(Kind = "MacroObject")]
    public const int SDL_MUTEX_MAXWAIT = -1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_MUTEX_TIMEDOUT = 1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_NONSHAPEABLE_WINDOW = -1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_NS_PER_MS = 1000000;

    [CNode(Kind = "MacroObject")]
    public const long SDL_NS_PER_SECOND = 1000000000;

    [CNode(Kind = "MacroObject")]
    public const int SDL_NS_PER_US = 1000;

    [CNode(Kind = "MacroObject")]
    public const int SDL_NULL_WHILE_LOOP_CONDITION = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_PATCHLEVEL = 0;

    [CNode(Kind = "MacroObject")]
    public const double SDL_PI_D = 3.141592653589793;

    [CNode(Kind = "MacroObject")]
    public const float SDL_PI_F = 3.1415927410125732f;

    [CNode(Kind = "MacroObject")]
    public const int SDL_PREALLOC = 1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_PRESSED = 1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RELEASED = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RLEACCEL = 2;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_JNIFILE = 3;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_MEMORY = 4;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_MEMORY_RO = 5;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_STATUS_EOF = 2;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_STATUS_ERROR = 1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_STATUS_NOT_READY = 3;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_STATUS_READONLY = 4;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_STATUS_READY = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_STATUS_WRITEONLY = 5;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_STDFILE = 2;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_UNKNOWN = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RWOPS_WINFILE = 1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RW_SEEK_CUR = 1;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RW_SEEK_END = 2;

    [CNode(Kind = "MacroObject")]
    public const int SDL_RW_SEEK_SET = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_SIMD_ALIGNED = 8;

    [CNode(Kind = "MacroObject")]
    public const float SDL_STANDARD_GRAVITY = 9.806650161743164f;

    [CNode(Kind = "MacroObject")]
    public const int SDL_SWSURFACE = 0;

    [CNode(Kind = "MacroObject")]
    public const int SDL_TEXTEDITINGEVENT_TEXT_SIZE = 32;

    [CNode(Kind = "MacroObject")]
    public const int SDL_TEXTINPUTEVENT_TEXT_SIZE = 32;

    [CNode(Kind = "MacroObject")]
    public static uint SDL_TOUCH_MOUSEID = 4294967295;

    [CNode(Kind = "MacroObject")]
    public const int SDL_US_PER_SECOND = 1000000;

    [CNode(Kind = "MacroObject")]
    public const int SDL_VIRTUAL_JOYSTICK_DESC_VERSION = 1;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_WINDOWPOS_CENTERED_MASK = 805240832;

    [CNode(Kind = "MacroObject")]
    public const uint SDL_WINDOWPOS_UNDEFINED_MASK = 536805376;

    [CNode(Kind = "MacroObject")]
    public const int SDL_WINDOW_LACKS_SHAPE = -3;

    #endregion
}
