// <auto-generated>
//  This code was generated by the following tool on 2025-01-20 01:07:13 GMT+00:00:
//      https://github.com/bottlenoselabs/c2cs (v2025.1.9.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ReSharper disable All

#region Template

#pragma warning disable CS1591
#pragma warning disable CS8981
using Interop.Runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

#endregion

namespace Interop;

public static unsafe partial class SDL
{
    private const string LibraryName = "SDL3";

    [LibraryImport(LibraryName, EntryPoint = "SDL_abs")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_abs(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_acos")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_acos(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_acosf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_acosf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AcquireCameraFrame")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_AcquireCameraFrame(SDL_Camera* camera, ulong* timestampNS);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AcquireGPUCommandBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUCommandBuffer* SDL_AcquireGPUCommandBuffer(SDL_GPUDevice* device);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AcquireGPUSwapchainTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_AcquireGPUSwapchainTexture(SDL_GPUCommandBuffer* command_buffer, SDL_Window* window, SDL_GPUTexture** swapchain_texture, uint* swapchain_texture_width, uint* swapchain_texture_height);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddEventWatch")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_AddEventWatch(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddGamepadMapping")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddGamepadMapping(CString mapping);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddGamepadMappingsFromFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddGamepadMappingsFromFile(CString file);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddGamepadMappingsFromIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddGamepadMappingsFromIO(SDL_IOStream* src, CBool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddHintCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_AddHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddSurfaceAlternateImage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_AddSurfaceAlternateImage(SDL_Surface* surface, SDL_Surface* image);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddTimer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TimerID SDL_AddTimer(uint interval, SDL_TimerCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddTimerNS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TimerID SDL_AddTimerNS(ulong interval, SDL_NSTimerCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddVulkanRenderSemaphores")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_AddVulkanRenderSemaphores(SDL_Renderer* renderer, uint wait_stage_mask, long wait_semaphore, long signal_semaphore);

    [LibraryImport(LibraryName, EntryPoint = "SDL_aligned_alloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_aligned_alloc(ulong alignment, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_aligned_free")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_aligned_free(void* mem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_asin")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_asin(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_asinf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_asinf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_asprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_asprintf(CString* strp, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AsyncIOFromFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AsyncIO* SDL_AsyncIOFromFile(CString file, CString mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_atan(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atan2")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_atan2(double y, double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atan2f")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_atan2f(float y, float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_atanf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atof")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_atof(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atoi")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_atoi(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AttachVirtualJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID SDL_AttachVirtualJoystick(SDL_VirtualJoystickDesc* desc);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BeginGPUComputePass")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUComputePass* SDL_BeginGPUComputePass(SDL_GPUCommandBuffer* command_buffer, SDL_GPUStorageTextureReadWriteBinding* storage_texture_bindings, uint num_storage_texture_bindings, SDL_GPUStorageBufferReadWriteBinding* storage_buffer_bindings, uint num_storage_buffer_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BeginGPUCopyPass")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUCopyPass* SDL_BeginGPUCopyPass(SDL_GPUCommandBuffer* command_buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BeginGPURenderPass")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPURenderPass* SDL_BeginGPURenderPass(SDL_GPUCommandBuffer* command_buffer, SDL_GPUColorTargetInfo* color_target_infos, uint num_color_targets, SDL_GPUDepthStencilTargetInfo* depth_stencil_target_info);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUComputePipeline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUComputePipeline(SDL_GPUComputePass* compute_pass, SDL_GPUComputePipeline* compute_pipeline);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUComputeSamplers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUComputeSamplers(SDL_GPUComputePass* compute_pass, uint first_slot, SDL_GPUTextureSamplerBinding* texture_sampler_bindings, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUComputeStorageBuffers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUComputeStorageBuffers(SDL_GPUComputePass* compute_pass, uint first_slot, SDL_GPUBuffer** storage_buffers, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUComputeStorageTextures")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUComputeStorageTextures(SDL_GPUComputePass* compute_pass, uint first_slot, SDL_GPUTexture** storage_textures, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUFragmentSamplers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUFragmentSamplers(SDL_GPURenderPass* render_pass, uint first_slot, SDL_GPUTextureSamplerBinding* texture_sampler_bindings, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUFragmentStorageBuffers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUFragmentStorageBuffers(SDL_GPURenderPass* render_pass, uint first_slot, SDL_GPUBuffer** storage_buffers, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUFragmentStorageTextures")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUFragmentStorageTextures(SDL_GPURenderPass* render_pass, uint first_slot, SDL_GPUTexture** storage_textures, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUGraphicsPipeline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUGraphicsPipeline(SDL_GPURenderPass* render_pass, SDL_GPUGraphicsPipeline* graphics_pipeline);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUIndexBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUIndexBuffer(SDL_GPURenderPass* render_pass, SDL_GPUBufferBinding* binding, SDL_GPUIndexElementSize index_element_size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUVertexBuffers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUVertexBuffers(SDL_GPURenderPass* render_pass, uint first_slot, SDL_GPUBufferBinding* bindings, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUVertexSamplers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUVertexSamplers(SDL_GPURenderPass* render_pass, uint first_slot, SDL_GPUTextureSamplerBinding* texture_sampler_bindings, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUVertexStorageBuffers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUVertexStorageBuffers(SDL_GPURenderPass* render_pass, uint first_slot, SDL_GPUBuffer** storage_buffers, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindGPUVertexStorageTextures")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BindGPUVertexStorageTextures(SDL_GPURenderPass* render_pass, uint first_slot, SDL_GPUTexture** storage_textures, uint num_bindings);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitGPUTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_BlitGPUTexture(SDL_GPUCommandBuffer* command_buffer, SDL_GPUBlitInfo* info);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_BlitSurface(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurface9Grid")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_BlitSurface9Grid(SDL_Surface* src, SDL_Rect* srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceScaled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_BlitSurfaceScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceTiled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_BlitSurfaceTiled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_BlitSurfaceTiledWithScale(SDL_Surface* src, SDL_Rect* srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceUnchecked")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_BlitSurfaceUnchecked(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_BlitSurfaceUncheckedScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_bsearch")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_bsearch(void* key, void* @base, ulong nmemb, ulong size, SDL_CompareCallback compare);

    [LibraryImport(LibraryName, EntryPoint = "SDL_bsearch_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_bsearch_r(void* key, void* @base, ulong nmemb, ulong size, SDL_CompareCallback_r compare, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CalculateGPUTextureFormatSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_CalculateGPUTextureFormatSize(SDL_GPUTextureFormat format, uint width, uint height, uint depth_or_layer_count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_calloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_calloc(ulong nmemb, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CancelGPUCommandBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CancelGPUCommandBuffer(SDL_GPUCommandBuffer* command_buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CaptureMouse")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CaptureMouse(CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ceil")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_ceil(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ceilf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_ceilf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClaimWindowForGPUDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ClaimWindowForGPUDevice(SDL_GPUDevice* device, SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ClearClipboardData();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearComposition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ClearComposition(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ClearError();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ClearProperty(SDL_PropertiesID props, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ClearSurface(SDL_Surface* surface, float r, float g, float b, float a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClickTrayEntry")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ClickTrayEntry(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseAsyncIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CloseAsyncIO(SDL_AsyncIO* asyncio, CBool flush, SDL_AsyncIOQueue* queue, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseCamera")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseCamera(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseGamepad(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseHaptic(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CloseIO(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseJoystick(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseSensor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseSensor(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CloseStorage(SDL_Storage* storage);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ComposeCustomBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ConvertEventToRenderCoordinates(SDL_Renderer* renderer, SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertPixels")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, void* src, int src_pitch, SDL_PixelFormat dst_format, void* dst, int dst_pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertPixelsAndColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, void* src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void* dst, int dst_pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_ConvertSurface(SDL_Surface* surface, SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_ConvertSurfaceAndColorspace(SDL_Surface* surface, SDL_PixelFormat format, SDL_Palette* palette, SDL_Colorspace colorspace, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CopyFile(CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyGPUBufferToBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CopyGPUBufferToBuffer(SDL_GPUCopyPass* copy_pass, SDL_GPUBufferLocation* source, SDL_GPUBufferLocation* destination, uint size, CBool cycle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyGPUTextureToTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CopyGPUTextureToTexture(SDL_GPUCopyPass* copy_pass, SDL_GPUTextureLocation* source, SDL_GPUTextureLocation* destination, uint w, uint h, uint d, CBool cycle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst);

    [LibraryImport(LibraryName, EntryPoint = "SDL_copysign")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_copysign(double x, double y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_copysignf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_copysignf(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyStorageFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CopyStorageFile(SDL_Storage* storage, CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_cos")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_cos(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_cosf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_cosf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_crc16")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_crc16(ushort crc, void* data, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_crc32")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_crc32(uint crc, void* data, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateAsyncIOQueue")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AsyncIOQueue* SDL_CreateAsyncIOQueue();

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateColorCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_CreateCursor(byte* data, byte* mask, int w, int h, int hot_x, int hot_y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CreateDirectory(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateEnvironment")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Environment* SDL_CreateEnvironment(CBool populated);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUBuffer* SDL_CreateGPUBuffer(SDL_GPUDevice* device, SDL_GPUBufferCreateInfo* createinfo);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUComputePipeline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUComputePipeline* SDL_CreateGPUComputePipeline(SDL_GPUDevice* device, SDL_GPUComputePipelineCreateInfo* createinfo);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUDevice* SDL_CreateGPUDevice(SDL_GPUShaderFormat format_flags, CBool debug_mode, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUDeviceWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUDevice* SDL_CreateGPUDeviceWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUGraphicsPipeline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUGraphicsPipeline* SDL_CreateGPUGraphicsPipeline(SDL_GPUDevice* device, SDL_GPUGraphicsPipelineCreateInfo* createinfo);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUSampler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUSampler* SDL_CreateGPUSampler(SDL_GPUDevice* device, SDL_GPUSamplerCreateInfo* createinfo);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUShader")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUShader* SDL_CreateGPUShader(SDL_GPUDevice* device, SDL_GPUShaderCreateInfo* createinfo);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUTexture* SDL_CreateGPUTexture(SDL_GPUDevice* device, SDL_GPUTextureCreateInfo* createinfo);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateGPUTransferBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUTransferBuffer* SDL_CreateGPUTransferBuffer(SDL_GPUDevice* device, SDL_GPUTransferBufferCreateInfo* createinfo);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CreateHapticEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreatePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Palette* SDL_CreatePalette(int ncolors);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreatePopupWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_CreatePopupWindow(SDL_Window* parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateProcess")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Process* SDL_CreateProcess(CString* args, CBool pipe_stdio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateProcessWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Process* SDL_CreateProcessWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_CreateProperties();

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateRendererWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_CreateRendererWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSoftwareRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateStorageDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CreateStorageDirectory(SDL_Storage* storage, CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_CreateSurface(int width, int height, SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSurfaceFrom")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void* pixels, int pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSurfacePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Palette* SDL_CreateSurfacePalette(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSystemCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTextureFromSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTextureWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_CreateTextureWithProperties(SDL_Renderer* renderer, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTray")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Tray* SDL_CreateTray(SDL_Surface* icon, CString tooltip);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTrayMenu")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayMenu* SDL_CreateTrayMenu(SDL_Tray* tray);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTraySubmenu")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayMenu* SDL_CreateTraySubmenu(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_CreateWindow(CString title, int w, int h, SDL_WindowFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateWindowAndRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CreateWindowAndRenderer(CString title, int width, int height, SDL_WindowFlags window_flags, SDL_Window** window, SDL_Renderer** renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateWindowWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_CreateWindowWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CursorVisible")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_CursorVisible();

    [LibraryImport(LibraryName, EntryPoint = "SDL_DateTimeToTime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_DateTimeToTime(SDL_DateTime* dt, SDL_Time* ticks);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Delay")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Delay(uint ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DelayNS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DelayNS(ulong ns);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DelayPrecise")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DelayPrecise(ulong ns);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyAsyncIOQueue")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyAsyncIOQueue(SDL_AsyncIOQueue* queue);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyCursor(SDL_Cursor* cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyEnvironment")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyEnvironment(SDL_Environment* env);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyGPUDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyGPUDevice(SDL_GPUDevice* device);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyHapticEffect(SDL_Haptic* haptic, int effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyPalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyPalette(SDL_Palette* palette);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyProcess")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyProcess(SDL_Process* process);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyRenderer(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroySurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroySurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyTexture(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyTray")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyTray(SDL_Tray* tray);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_DestroyWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DetachVirtualJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DisableScreenSaver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_DisableScreenSaver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_DispatchGPUCompute")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DispatchGPUCompute(SDL_GPUComputePass* compute_pass, uint groupcount_x, uint groupcount_y, uint groupcount_z);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DispatchGPUComputeIndirect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DispatchGPUComputeIndirect(SDL_GPUComputePass* compute_pass, SDL_GPUBuffer* buffer, uint offset);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DownloadFromGPUBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DownloadFromGPUBuffer(SDL_GPUCopyPass* copy_pass, SDL_GPUBufferRegion* source, SDL_GPUTransferBufferLocation* destination);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DownloadFromGPUTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DownloadFromGPUTexture(SDL_GPUCopyPass* copy_pass, SDL_GPUTextureRegion* source, SDL_GPUTextureTransferInfo* destination);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DrawGPUIndexedPrimitives")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DrawGPUIndexedPrimitives(SDL_GPURenderPass* render_pass, uint num_indices, uint num_instances, uint first_index, int vertex_offset, uint first_instance);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DrawGPUIndexedPrimitivesIndirect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DrawGPUIndexedPrimitivesIndirect(SDL_GPURenderPass* render_pass, SDL_GPUBuffer* buffer, uint offset, uint draw_count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DrawGPUPrimitives")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DrawGPUPrimitives(SDL_GPURenderPass* render_pass, uint num_vertices, uint num_instances, uint first_vertex, uint first_instance);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DrawGPUPrimitivesIndirect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DrawGPUPrimitivesIndirect(SDL_GPURenderPass* render_pass, SDL_GPUBuffer* buffer, uint offset, uint draw_count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DuplicateSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetCurrentConfig")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_EGLConfig SDL_EGL_GetCurrentConfig();

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetCurrentDisplay")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_EGLDisplay SDL_EGL_GetCurrentDisplay();

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetProcAddress")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_FunctionPointer SDL_EGL_GetProcAddress(CString proc);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_EGLSurface SDL_EGL_GetWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_EGL_SetAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback, SDL_EGLIntArrayCallback surfaceAttribCallback, SDL_EGLIntArrayCallback contextAttribCallback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnableScreenSaver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_EnableScreenSaver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_EndGPUComputePass")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_EndGPUComputePass(SDL_GPUComputePass* compute_pass);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EndGPUCopyPass")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_EndGPUCopyPass(SDL_GPUCopyPass* copy_pass);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EndGPURenderPass")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_EndGPURenderPass(SDL_GPURenderPass* render_pass);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnterAppMainCallbacks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_EnterAppMainCallbacks(int argc, CString* argv, SDL_AppInit_func appinit, SDL_AppIterate_func appiter, SDL_AppEvent_func appevent, SDL_AppQuit_func appquit);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnumerateDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_EnumerateDirectory(CString path, SDL_EnumerateDirectoryCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnumerateProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_EnumerateProperties(SDL_PropertiesID props, SDL_EnumeratePropertiesCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnumerateStorageDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_EnumerateStorageDirectory(SDL_Storage* storage, CString path, SDL_EnumerateDirectoryCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EventEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_EventEnabled(uint type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_exp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_exp(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_expf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_expf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fabs")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_fabs(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fabsf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_fabsf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FillSurfaceRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_FillSurfaceRect(SDL_Surface* dst, SDL_Rect* rect, uint color);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FillSurfaceRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_FillSurfaceRects(SDL_Surface* dst, SDL_Rect* rects, int count, uint color);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FilterEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_FilterEvents(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlashWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_FlashWindow(SDL_Window* window, SDL_FlashOperation operation);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlipSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_FlipSurface(SDL_Surface* surface, SDL_FlipMode flip);

    [LibraryImport(LibraryName, EntryPoint = "SDL_floor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_floor(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_floorf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_floorf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_FlushEvent(uint type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_FlushEvents(uint minType, uint maxType);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_FlushIO(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_FlushRenderer(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fmod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_fmod(double x, double y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fmodf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_fmodf(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_free")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_free(void* mem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadConnected")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GamepadConnected(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GamepadEventsEnabled();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadHasAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GamepadHasAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadHasButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GamepadHasButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadHasSensor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GamepadHasSensor(SDL_Gamepad* gamepad, SDL_SensorType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadSensorEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GDKSuspendComplete")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GDKSuspendComplete();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GenerateMipmapsForGPUTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GenerateMipmapsForGPUTexture(SDL_GPUCommandBuffer* command_buffer, SDL_GPUTexture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAppMetadataProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetAppMetadataProperty(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAssertionHandler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertionHandler SDL_GetAssertionHandler(void** puserdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAssertionReport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertData* SDL_GetAssertionReport();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAsyncIOResult")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetAsyncIOResult(SDL_AsyncIOQueue* queue, SDL_AsyncIOOutcome* outcome);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAsyncIOSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_GetAsyncIOSize(SDL_AsyncIO* asyncio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetBasePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetBasePath();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetBooleanProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetBooleanProperty(SDL_PropertiesID props, CString name, CBool default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCameraDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetCameraFormat(SDL_Camera* camera, SDL_CameraSpec* spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraID SDL_GetCameraID(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCameraName(SDL_CameraID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraPermissionState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCameraPermissionState(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraPosition SDL_GetCameraPosition(SDL_CameraID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetCameraProperties(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameras")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraID* SDL_GetCameras(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraSupportedFormats")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraSpec** SDL_GetCameraSupportedFormats(SDL_CameraID devid, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetClipboardData(CString mime_type, ulong* size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetClipboardMimeTypes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GetClipboardMimeTypes(ulong* num_mime_types);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetClipboardText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetClipboardText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, CBool include_high_density_modes, SDL_DisplayMode* closest);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCPUCacheLineSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCPUCacheLineSize();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentCameraDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCurrentCameraDriver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCurrentDirectory();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentDisplayMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode* SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentDisplayOrientation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentRenderOutputSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentTime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetCurrentTime(SDL_Time* ticks);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentVideoDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCurrentVideoDriver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_GetCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDateTimeLocalePreferences")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetDateTimeLocalePreferences(SDL_DateFormat* dateFormat, SDL_TimeFormat* timeFormat);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDayOfWeek")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDayOfWeek(int year, int month, int day);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDayOfYear")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDayOfYear(int year, int month, int day);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDaysInMonth")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDaysInMonth(int year, int month);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDefaultAssertionHandler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertionHandler SDL_GetDefaultAssertionHandler();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDefaultCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_GetDefaultCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDefaultLogOutputFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_LogOutputFunction SDL_GetDefaultLogOutputFunction();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDesktopDisplayMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode* SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayBounds")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetDisplayBounds(SDL_DisplayID displayID, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayContentScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetDisplayContentScale(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayForPoint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetDisplayForPoint(SDL_Point* point);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayForRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetDisplayForRect(SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayForWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetDisplayForWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetDisplayName(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetDisplayProperties(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplays")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID* SDL_GetDisplays(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayUsableBounds")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_getenv")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_getenv(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_getenv_unsafe")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_getenv_unsafe(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetEnvironment")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Environment* SDL_GetEnvironment();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetEnvironmentVariable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetEnvironmentVariable(SDL_Environment* env, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetEnvironmentVariables")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GetEnvironmentVariables(SDL_Environment* env);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetError();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetEventFilter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetFloatProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetFloatProperty(SDL_PropertiesID props, CString name, float default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetFullscreenDisplayModes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode** SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial short SDL_GetGamepadAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAxisFromString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadAxis SDL_GetGamepadAxisFromString(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadBindings")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadBinding** SDL_GetGamepadBindings(SDL_Gamepad* gamepad, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetGamepadButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButtonFromString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadButton SDL_GetGamepadButtonFromString(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButtonLabel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButtonLabelForType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadConnectionState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickConnectionState SDL_GetGamepadConnectionState(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadFirmwareVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetGamepadFirmwareVersion(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Gamepad* SDL_GetGamepadFromID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Gamepad* SDL_GetGamepadFromPlayerIndex(int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadGUIDForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_GetGamepadGUIDForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID SDL_GetGamepadID(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_GetGamepadJoystick(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMapping")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadMapping(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMappingForGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadMappingForGUID(SDL_GUID guid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMappingForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadMappingForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMappings")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GetGamepadMappings(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadName(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadNameForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadPath(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPathForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadPathForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetGamepadPlayerIndex(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPlayerIndexForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetGamepadPlayerIndexForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPowerInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PowerState SDL_GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProduct")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetGamepadProduct(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProductForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetGamepadProductForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProductVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetGamepadProductVersion(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProductVersionForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetGamepadProductVersionForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetGamepadProperties(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepads")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID* SDL_GetGamepads(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSensorData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetGamepadSensorData(SDL_Gamepad* gamepad, SDL_SensorType type, float* data, int num_values);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSensorDataRate")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SDL_SensorType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSerial")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadSerial(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSteamHandle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetGamepadSteamHandle(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadStringForButton(SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadStringForType(SDL_GamepadType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadTouchpadFinger")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetGamepadTouchpadFinger(SDL_Gamepad* gamepad, int touchpad, int finger, CBool* down, float* x, float* y, float* pressure);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetGamepadTypeForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadTypeFromString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetGamepadTypeFromString(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadVendor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetGamepadVendor(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadVendorForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetGamepadVendorForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGlobalMouseState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseButtonFlags SDL_GetGlobalMouseState(float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGlobalProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetGlobalProperties();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGPUDeviceDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGPUDeviceDriver(SDL_GPUDevice* device);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGPUDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGPUDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGPUShaderFormats")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUShaderFormat SDL_GetGPUShaderFormats(SDL_GPUDevice* device);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGPUSwapchainTextureFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUTextureFormat SDL_GetGPUSwapchainTextureFormat(SDL_GPUDevice* device, SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGrabbedWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetGrabbedWindow();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticEffectStatus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetHapticEffectStatus(SDL_Haptic* haptic, int effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticFeatures")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_GetHapticFeatures(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_GetHapticFromID(SDL_HapticID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_HapticID SDL_GetHapticID(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetHapticName(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetHapticNameForID(SDL_HapticID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHaptics")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_HapticID* SDL_GetHaptics(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetHint(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHintBoolean")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetHintBoolean(CString name, CBool default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetIOProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetIOProperties(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetIOSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_GetIOSize(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetIOStatus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStatus SDL_GetIOStatus(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial short SDL_GetJoystickAxis(SDL_Joystick* joystick, int axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickAxisInitialState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetJoystickAxisInitialState(SDL_Joystick* joystick, int axis, short* state);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickBall")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetJoystickButton(SDL_Joystick* joystick, int button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickConnectionState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickConnectionState SDL_GetJoystickConnectionState(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickFirmwareVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetJoystickFirmwareVersion(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_GetJoystickFromID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_GetJoystickFromPlayerIndex(int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_GetJoystickGUID(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickGUIDForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_GetJoystickGUIDForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickGUIDInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetJoystickGUIDInfo(SDL_GUID guid, ushort* vendor, ushort* product, ushort* version, ushort* crc16);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickHat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial byte SDL_GetJoystickHat(SDL_Joystick* joystick, int hat);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID SDL_GetJoystickID(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickName(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickNameForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickPath(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPathForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickPathForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetJoystickPlayerIndex(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPlayerIndexForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetJoystickPlayerIndexForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPowerInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PowerState SDL_GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProduct")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetJoystickProduct(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProductForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetJoystickProductForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProductVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetJoystickProductVersion(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProductVersionForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetJoystickProductVersionForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetJoystickProperties(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID* SDL_GetJoysticks(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickSerial")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickSerial(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickType SDL_GetJoystickType(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickType SDL_GetJoystickTypeForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickVendor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetJoystickVendor(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickVendorForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ushort SDL_GetJoystickVendorForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboardFocus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetKeyboardFocus();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboardNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetKeyboardNameForID(SDL_KeyboardID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboards")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_KeyboardID* SDL_GetKeyboards(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboardState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool* SDL_GetKeyboardState(int* numkeys);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyFromName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Keycode SDL_GetKeyFromName(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyFromScancode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, CBool key_event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetKeyName(SDL_Keycode key);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetLogOutputFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetLogOutputFunction(SDL_LogOutputFunction* callback, void** userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetLogPriority")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_LogPriority SDL_GetLogPriority(int category);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMasksForPixelFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMaxHapticEffects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetMaxHapticEffects(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetMaxHapticEffectsPlaying(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMemoryFunctions")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseID* SDL_GetMice(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetModState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Keymod SDL_GetModState();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMouseFocus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetMouseFocus();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMouseNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetMouseNameForID(SDL_MouseID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMouseState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseButtonFlags SDL_GetMouseState(float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNaturalDisplayOrientation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumAllocations")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumAllocations();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumberProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_GetNumberProperty(SDL_PropertiesID props, CString name, long default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumCameraDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumCameraDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumGamepadTouchpads")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumGamepadTouchpads(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumGPUDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumGPUDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumHapticAxes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumHapticAxes(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickAxes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickAxes(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickBalls")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickBalls(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickButtons")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickButtons(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickHats")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickHats(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumLogicalCPUCores")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumLogicalCPUCores();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumRenderDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumRenderDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumVideoDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumVideoDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetOriginalMemoryFunctions")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetOriginalMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPathInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetPathInfo(CString path, SDL_PathInfo* info);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPerformanceCounter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetPerformanceCounter();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPerformanceFrequency")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetPerformanceFrequency();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPixelFormatDetails")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PixelFormatDetails* SDL_GetPixelFormatDetails(SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPixelFormatForMasks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPixelFormatName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPixelFormatName(SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPlatform")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPlatform();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPointerProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetPointerProperty(SDL_PropertiesID props, CString name, void* default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPowerInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PowerState SDL_GetPowerInfo(int* seconds, int* percent);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPreferredLocales")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Locale** SDL_GetPreferredLocales(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPrefPath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPrefPath(CString org, CString app);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPrimaryDisplay")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetPrimaryDisplay();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPrimarySelectionText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPrimarySelectionText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetProcessInput")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_GetProcessInput(SDL_Process* process);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetProcessOutput")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_GetProcessOutput(SDL_Process* process);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetProcessProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetProcessProperties(SDL_Process* process);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPropertyType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRealGamepadType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRealGamepadTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetRealGamepadTypeForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectAndLineIntersection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectAndLineIntersection(SDL_Rect* rect, int* X1, int* Y1, int* X2, int* Y2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectAndLineIntersectionFloat(SDL_FRect* rect, float* X1, float* Y1, float* X2, float* Y2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectEnclosingPoints")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectEnclosingPoints(SDL_Point* points, int count, SDL_Rect* clip, SDL_Rect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectEnclosingPointsFloat(SDL_FPoint* points, int count, SDL_FRect* clip, SDL_FRect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectIntersection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectIntersection(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectIntersectionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectIntersectionFloat(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectUnion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectUnion(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectUnionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRectUnionFloat(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRelativeMouseState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseButtonFlags SDL_GetRelativeMouseState(float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderColorScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderColorScale(SDL_Renderer* renderer, float* scale);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDrawBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDrawColor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderDrawColor(SDL_Renderer* renderer, byte* r, byte* g, byte* b, byte* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDrawColorFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderDrawColorFloat(SDL_Renderer* renderer, float* r, float* g, float* b, float* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetRenderDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_GetRenderer(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRendererFromTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_GetRendererFromTexture(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRendererName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetRendererName(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRendererProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetRendererProperties(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderLogicalPresentation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderLogicalPresentation(SDL_Renderer* renderer, int* w, int* h, SDL_RendererLogicalPresentation* mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderLogicalPresentationRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetRenderMetalCommandEncoder(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderMetalLayer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetRenderMetalLayer(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderOutputSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderSafeArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderSafeArea(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderTarget")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderViewport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetRenderVSync(SDL_Renderer* renderer, int* vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetRenderWindow(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRevision")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetRevision();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRGB")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetRGB(uint pixel, SDL_PixelFormatDetails* format, SDL_Palette* palette, byte* r, byte* g, byte* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRGBA")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetRGBA(uint pixel, SDL_PixelFormatDetails* format, SDL_Palette* palette, byte* r, byte* g, byte* b, byte* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetScancodeFromKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key, SDL_Keymod* modstate);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetScancodeFromName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Scancode SDL_GetScancodeFromName(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetScancodeName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetScancodeName(SDL_Scancode scancode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetSensorData(SDL_Sensor* sensor, float* data, int num_values);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Sensor* SDL_GetSensorFromID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorID SDL_GetSensorID(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetSensorName(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetSensorNameForID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorNonPortableType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSensorNonPortableType(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorNonPortableTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSensorNonPortableTypeForID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetSensorProperties(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensors")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorID* SDL_GetSensors(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorType SDL_GetSensorType(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorType SDL_GetSensorTypeForID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSIMDAlignment")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetSIMDAlignment();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStorageFileSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetStorageFileSize(SDL_Storage* storage, CString path, ulong* length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStoragePathInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetStoragePathInfo(SDL_Storage* storage, CString path, SDL_PathInfo* info);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStorageSpaceRemaining")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetStorageSpaceRemaining(SDL_Storage* storage);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStringProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetStringProperty(SDL_PropertiesID props, CString name, CString default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetSurfaceAlphaMod(SDL_Surface* surface, byte* alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetSurfaceClipRect(SDL_Surface* surface, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetSurfaceColorKey(SDL_Surface* surface, uint* key);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetSurfaceColorMod(SDL_Surface* surface, byte* r, byte* g, byte* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Colorspace SDL_GetSurfaceColorspace(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceImages")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface** SDL_GetSurfaceImages(SDL_Surface* surface, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfacePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Palette* SDL_GetSurfacePalette(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetSurfaceProperties(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSystemRAM")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSystemRAM();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSystemTheme")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SystemTheme SDL_GetSystemTheme();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextInputArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextInputArea(SDL_Window* window, SDL_Rect* rect, int* cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextureAlphaMod(SDL_Texture* texture, byte* alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureAlphaModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextureColorMod(SDL_Texture* texture, byte* r, byte* g, byte* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureColorModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextureColorModFloat(SDL_Texture* texture, float* r, float* g, float* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetTextureProperties(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureScaleMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTextureSize(SDL_Texture* texture, float* w, float* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTicks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetTicks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTicksNS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetTicksNS();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchDeviceName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetTouchDeviceName(SDL_TouchID touchID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchDevices")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TouchID* SDL_GetTouchDevices(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchDeviceType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchFingers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Finger** SDL_GetTouchFingers(SDL_TouchID touchID, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayEntries")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayEntry** SDL_GetTrayEntries(SDL_TrayMenu* menu, int* size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayEntryChecked")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTrayEntryChecked(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayEntryEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetTrayEntryEnabled(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayEntryLabel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetTrayEntryLabel(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayEntryParent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayMenu* SDL_GetTrayEntryParent(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayMenu")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayMenu* SDL_GetTrayMenu(SDL_Tray* tray);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayMenuParentEntry")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayEntry* SDL_GetTrayMenuParentEntry(SDL_TrayMenu* menu);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTrayMenuParentTray")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Tray* SDL_GetTrayMenuParentTray(SDL_TrayMenu* menu);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTraySubmenu")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayMenu* SDL_GetTraySubmenu(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetUserFolder")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetUserFolder(SDL_Folder folder);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetVersion();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetVideoDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetVideoDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowAspectRatio")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowAspectRatio(SDL_Window* window, float* min_aspect, float* max_aspect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowBordersSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowBordersSize(SDL_Window* window, int* top, int* left, int* bottom, int* right);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowDisplayScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetWindowDisplayScale(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFlags")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_WindowFlags SDL_GetWindowFlags(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFromEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetWindowFromEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetWindowFromID(SDL_WindowID id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFullscreenMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode* SDL_GetWindowFullscreenMode(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowICCProfile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetWindowICCProfile(SDL_Window* window, ulong* size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_WindowID SDL_GetWindowID(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowKeyboardGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowKeyboardGrab(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMaximumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowMaximumSize(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMinimumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowMinimumSize(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMouseGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowMouseGrab(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMouseRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Rect* SDL_GetWindowMouseRect(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowOpacity")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetWindowOpacity(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowParent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetWindowParent(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowPixelDensity")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetWindowPixelDensity(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowPixelFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PixelFormat SDL_GetWindowPixelFormat(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowPosition(SDL_Window* window, int* x, int* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetWindowProperties(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowRelativeMouseMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowRelativeMouseMode(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindows")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window** SDL_GetWindows(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSafeArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowSafeArea(SDL_Window* window, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowSize(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSizeInPixels")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowSizeInPixels(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_GetWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSurfaceVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GetWindowSurfaceVSync(SDL_Window* window, int* vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowTitle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetWindowTitle(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_CreateContext")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GLContext SDL_GL_CreateContext(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_DestroyContext")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_DestroyContext(SDL_GLContext context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_ExtensionSupported")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_ExtensionSupported(CString extension);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetAttribute")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_GetAttribute(SDL_GLAttr attr, int* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetCurrentContext")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GLContext SDL_GL_GetCurrentContext();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetCurrentWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GL_GetCurrentWindow();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetProcAddress")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_FunctionPointer SDL_GL_GetProcAddress(CString proc);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetSwapInterval")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_GetSwapInterval(int* interval);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_LoadLibrary")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_LoadLibrary(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_MakeCurrent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_ResetAttributes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GL_ResetAttributes();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_SetAttribute")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_SetAttribute(SDL_GLAttr attr, int value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_SetSwapInterval")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_SetSwapInterval(int interval);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_SwapWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GL_SwapWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_UnloadLibrary")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GL_UnloadLibrary();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GlobDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GlobDirectory(CString path, CString pattern, SDL_GlobFlags flags, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GlobStorageDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GlobStorageDirectory(SDL_Storage* storage, CString path, CString pattern, SDL_GlobFlags flags, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GPUSupportsProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GPUSupportsProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GPUSupportsShaderFormats")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GPUSupportsShaderFormats(SDL_GPUShaderFormat format_flags, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GPUTextureFormatTexelBlockSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_GPUTextureFormatTexelBlockSize(SDL_GPUTextureFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GPUTextureSupportsFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GPUTextureSupportsFormat(SDL_GPUDevice* device, SDL_GPUTextureFormat format, SDL_GPUTextureType type, SDL_GPUTextureUsageFlags usage);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GPUTextureSupportsSampleCount")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_GPUTextureSupportsSampleCount(SDL_GPUDevice* device, SDL_GPUTextureFormat format, SDL_GPUSampleCount sample_count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GUIDToString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GUIDToString(SDL_GUID guid, CString pszGUID, int cbGUID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HapticEffectSupported")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HapticRumbleSupported")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HapticRumbleSupported(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAltiVec")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasAltiVec();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasARMSIMD")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasARMSIMD();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAVX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasAVX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAVX2")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasAVX2();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAVX512F")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasAVX512F();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasClipboardData(CString mime_type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasClipboardText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasClipboardText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasEvent(uint type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasEvents(uint minType, uint maxType);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasGamepad();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasJoystick();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasKeyboard")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasKeyboard();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasLASX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasLASX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasLSX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasLSX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasMMX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasMMX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasMouse")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasMouse();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasNEON")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasNEON();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasPrimarySelectionText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasPrimarySelectionText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasProperty(SDL_PropertiesID props, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasRectIntersection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasRectIntersection(SDL_Rect* A, SDL_Rect* B);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasRectIntersectionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasRectIntersectionFloat(SDL_FRect* A, SDL_FRect* B);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasScreenKeyboardSupport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasScreenKeyboardSupport();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasSSE();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE2")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasSSE2();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE3")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasSSE3();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE41")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasSSE41();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE42")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HasSSE42();

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_ble_scan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_hid_ble_scan(CBool active);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_close")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_close(SDL_hid_device* dev);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_device_change_count")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_hid_device_change_count();

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_enumerate")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device_info* SDL_hid_enumerate(ushort vendor_id, ushort product_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_exit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_exit();

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_free_enumeration")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_hid_free_enumeration(SDL_hid_device_info* devs);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_device_info")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device_info* SDL_hid_get_device_info(SDL_hid_device* dev);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_feature_report")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_feature_report(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_indexed_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_indexed_string(SDL_hid_device* dev, int string_index, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_input_report")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_input_report(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_manufacturer_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_manufacturer_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_product_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_product_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_report_descriptor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_report_descriptor(SDL_hid_device* dev, byte* buf, ulong buf_size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_serial_number_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_serial_number_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_init")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_init();

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_open")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device* SDL_hid_open(ushort vendor_id, ushort product_id, CStringWide serial_number);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_open_path")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device* SDL_hid_open_path(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_read")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_read(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_read_timeout")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_read_timeout(SDL_hid_device* dev, byte* data, ulong length, int milliseconds);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_send_feature_report")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_send_feature_report(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_set_nonblocking")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_set_nonblocking(SDL_hid_device* dev, int nonblock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_write")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_write(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HideCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HideCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HideWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_HideWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_iconv(SDL_iconv_t cd, CString* inbuf, ulong* inbytesleft, CString* outbuf, ulong* outbytesleft);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv_close")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_iconv_close(SDL_iconv_t cd);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv_open")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_iconv_t SDL_iconv_open(CString tocode, CString fromcode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv_string")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_iconv_string(CString tocode, CString fromcode, CString inbuf, ulong inbytesleft);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Init")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_Init(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_InitHapticRumble")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_InitHapticRumble(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_InitSubSystem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_InitSubSystem(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_InsertGPUDebugLabel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_InsertGPUDebugLabel(SDL_GPUCommandBuffer* command_buffer, CString text);

    [LibraryImport(LibraryName, EntryPoint = "SDL_InsertTrayEntryAt")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TrayEntry* SDL_InsertTrayEntryAt(SDL_TrayMenu* menu, int pos, CString label, SDL_TrayEntryFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOFromMem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_IOFromMem(void* mem, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOFromDynamicMem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_IOFromDynamicMem();

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOFromFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_IOFromFile(CString file, CString mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_IOprintf(SDL_IOStream* context, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isalnum")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isalnum(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isalpha")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isalpha(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isblank")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isblank(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iscntrl")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_iscntrl(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isdigit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isdigit(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_IsGamepad(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isgraph")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isgraph(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isinf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isinf(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isinff")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isinff(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsJoystickHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_IsJoystickHaptic(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsJoystickVirtual")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_islower")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_islower(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsMainThread")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_IsMainThread();

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsMouseHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_IsMouseHaptic();

    [LibraryImport(LibraryName, EntryPoint = "SDL_isnan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isnan(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isnanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isnanf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isprint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isprint(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ispunct")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ispunct(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isspace(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isupper")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isupper(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isxdigit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isxdigit(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_itoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_itoa(int value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_JoystickConnected")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_JoystickConnected(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_JoystickEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_JoystickEventsEnabled();

    [LibraryImport(LibraryName, EntryPoint = "SDL_KillProcess")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_KillProcess(SDL_Process* process, CBool force);

    [LibraryImport(LibraryName, EntryPoint = "SDL_lltoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_lltoa(long value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadBMP")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_LoadBMP(CString file);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadBMP_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_LoadBMP_IO(SDL_IOStream* src, CBool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_LoadFile(CString file, ulong* datasize);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadFile_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_LoadFile_IO(SDL_IOStream* src, ulong* datasize, CBool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadFileAsync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_LoadFileAsync(CString file, SDL_AsyncIOQueue* queue, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_FunctionPointer SDL_LoadFunction(SDL_SharedObject* handle, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadObject")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SharedObject* SDL_LoadObject(CString sofile);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LockJoysticks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_LockProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_LockSurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_LockTexture(SDL_Texture* texture, SDL_Rect* rect, void** pixels, int* pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockTextureToSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_LockTextureToSurface(SDL_Texture* texture, SDL_Rect* rect, SDL_Surface** surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_log")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_log(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Log")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Log(CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_log10")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_log10(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_log10f")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_log10f(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogCritical")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogCritical(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogDebug")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogDebug(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogError(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_logf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_logf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogInfo(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogMessage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogMessage(int category, SDL_LogPriority priority, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogTrace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogTrace(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogVerbose")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogVerbose(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogWarn")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogWarn(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_malloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_malloc(ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapGPUTransferBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_MapGPUTransferBuffer(SDL_GPUDevice* device, SDL_GPUTransferBuffer* transfer_buffer, CBool cycle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapRGB")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_MapRGB(SDL_PixelFormatDetails* format, SDL_Palette* palette, byte r, byte g, byte b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapRGBA")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_MapRGBA(SDL_PixelFormatDetails* format, SDL_Palette* palette, byte r, byte g, byte b, byte a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapSurfaceRGB")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_MapSurfaceRGB(SDL_Surface* surface, byte r, byte g, byte b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapSurfaceRGBA")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_MapSurfaceRGBA(SDL_Surface* surface, byte r, byte g, byte b, byte a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MaximizeWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_MaximizeWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memcmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_memcmp(void* s1, void* s2, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memcpy(void* dst, void* src, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memmove")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memmove(void* dst, void* src, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memset")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memset(void* dst, int c, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memset4")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memset4(void* dst, uint val, ulong dwords);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Metal_CreateView")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MetalView SDL_Metal_CreateView(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Metal_DestroyView")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Metal_DestroyView(SDL_MetalView view);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Metal_GetLayer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_Metal_GetLayer(SDL_MetalView view);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MinimizeWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_MinimizeWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_modf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_modf(double x, double* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_modff")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_modff(float x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_murmur3_32")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_murmur3_32(void* data, ulong len, uint seed);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenCamera")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Camera* SDL_OpenCamera(SDL_CameraID instance_id, SDL_CameraSpec* spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenFileStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenFileStorage(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Gamepad* SDL_OpenGamepad(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_OpenHaptic(SDL_HapticID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenHapticFromJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_OpenHapticFromJoystick(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenHapticFromMouse")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_OpenHapticFromMouse();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_OpenIO(SDL_IOStreamInterface* iface, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_OpenJoystick(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenSensor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Sensor* SDL_OpenSensor(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenStorage(SDL_StorageInterface* iface, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenTitleStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenTitleStorage(CString @override, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenURL")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_OpenURL(CString url);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenUserStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenUserStorage(CString org, CString app, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OutOfMemory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_OutOfMemory();

    [LibraryImport(LibraryName, EntryPoint = "SDL_PauseHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_PauseHaptic(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PeepEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_EventAction action, uint minType, uint maxType);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PlayHapticRumble")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_PlayHapticRumble(SDL_Haptic* haptic, float strength, uint length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PollEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_PollEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PopGPUDebugGroup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_PopGPUDebugGroup(SDL_GPUCommandBuffer* command_buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_pow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_pow(double x, double y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_powf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_powf(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PremultiplyAlpha")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, void* src, int src_pitch, SDL_PixelFormat dst_format, void* dst, int dst_pitch, CBool linear);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PremultiplySurfaceAlpha")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_PremultiplySurfaceAlpha(SDL_Surface* surface, CBool linear);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PumpEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_PumpEvents();

    [LibraryImport(LibraryName, EntryPoint = "SDL_PushEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_PushEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PushGPUComputeUniformData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_PushGPUComputeUniformData(SDL_GPUCommandBuffer* command_buffer, uint slot_index, void* data, uint length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PushGPUDebugGroup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_PushGPUDebugGroup(SDL_GPUCommandBuffer* command_buffer, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PushGPUFragmentUniformData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_PushGPUFragmentUniformData(SDL_GPUCommandBuffer* command_buffer, uint slot_index, void* data, uint length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PushGPUVertexUniformData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_PushGPUVertexUniformData(SDL_GPUCommandBuffer* command_buffer, uint slot_index, void* data, uint length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_qsort")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_qsort(void* @base, ulong nmemb, ulong size, SDL_CompareCallback compare);

    [LibraryImport(LibraryName, EntryPoint = "SDL_qsort_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_qsort_r(void* @base, ulong nmemb, ulong size, SDL_CompareCallback_r compare, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_QueryGPUFence")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_QueryGPUFence(SDL_GPUDevice* device, SDL_GPUFence* fence);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Quit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Quit();

    [LibraryImport(LibraryName, EntryPoint = "SDL_QuitSubSystem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_QuitSubSystem(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RaiseWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RaiseWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_rand(int n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand_bits")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_rand_bits();

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand_bits_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_rand_bits_r(ulong* state);

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_rand_r(ulong* state, int n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_randf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_randf();

    [LibraryImport(LibraryName, EntryPoint = "SDL_randf_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_randf_r(ulong* state);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadAsyncIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadAsyncIO(SDL_AsyncIO* asyncio, void* ptr, ulong offset, ulong size, SDL_AsyncIOQueue* queue, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_ReadIO(SDL_IOStream* context, void* ptr, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadProcess")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_ReadProcess(SDL_Process* process, ulong* datasize, int* exitcode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadS16BE(SDL_IOStream* src, short* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadS16LE(SDL_IOStream* src, short* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadS32BE(SDL_IOStream* src, int* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadS32LE(SDL_IOStream* src, int* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadS64BE(SDL_IOStream* src, long* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadS64LE(SDL_IOStream* src, long* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadS8(SDL_IOStream* src, sbyte* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadStorageFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadStorageFile(SDL_Storage* storage, CString path, void* destination, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadSurfacePixel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadSurfacePixel(SDL_Surface* surface, int x, int y, byte* r, byte* g, byte* b, byte* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadSurfacePixelFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadSurfacePixelFloat(SDL_Surface* surface, int x, int y, float* r, float* g, float* b, float* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadU16BE(SDL_IOStream* src, ushort* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadU16LE(SDL_IOStream* src, ushort* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadU32BE(SDL_IOStream* src, uint* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadU32LE(SDL_IOStream* src, uint* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadU64BE(SDL_IOStream* src, ulong* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadU64LE(SDL_IOStream* src, ulong* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReadU8(SDL_IOStream* src, byte* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_realloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_realloc(void* mem, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RegisterEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_RegisterEvents(int numevents);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseCameraFrame")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseCameraFrame(SDL_Camera* camera, SDL_Surface* frame);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUBuffer(SDL_GPUDevice* device, SDL_GPUBuffer* buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUComputePipeline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUComputePipeline(SDL_GPUDevice* device, SDL_GPUComputePipeline* compute_pipeline);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUFence")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUFence(SDL_GPUDevice* device, SDL_GPUFence* fence);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUGraphicsPipeline")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUGraphicsPipeline(SDL_GPUDevice* device, SDL_GPUGraphicsPipeline* graphics_pipeline);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUSampler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUSampler(SDL_GPUDevice* device, SDL_GPUSampler* sampler);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUShader")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUShader(SDL_GPUDevice* device, SDL_GPUShader* shader);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUTexture(SDL_GPUDevice* device, SDL_GPUTexture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseGPUTransferBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseGPUTransferBuffer(SDL_GPUDevice* device, SDL_GPUTransferBuffer* transfer_buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseWindowFromGPUDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ReleaseWindowFromGPUDevice(SDL_GPUDevice* device, SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReloadGamepadMappings")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ReloadGamepadMappings();

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveEventWatch")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_RemoveEventWatch(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveHintCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_RemoveHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemovePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RemovePath(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveStoragePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RemoveStoragePath(SDL_Storage* storage, CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_RemoveSurfaceAlternateImages(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveTimer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RemoveTimer(SDL_TimerID id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveTrayEntry")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_RemoveTrayEntry(SDL_TrayEntry* entry);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenamePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenamePath(CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenameStoragePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenameStoragePath(SDL_Storage* storage, CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderClear")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderClear(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderClipEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderClipEnabled(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderCoordinatesFromWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderCoordinatesFromWindow(SDL_Renderer* renderer, float window_x, float window_y, float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderCoordinatesToWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderCoordinatesToWindow(SDL_Renderer* renderer, float x, float y, float* window_x, float* window_y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderDebugText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderDebugText(SDL_Renderer* renderer, float x, float y, CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderDebugTextFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderDebugTextFormat(SDL_Renderer* renderer, float x, float y, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderFillRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderFillRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderFillRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderFillRects(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderGeometry")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderGeometry(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Vertex* vertices, int num_vertices, int* indices, int num_indices);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderGeometryRaw")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderGeometryRaw(SDL_Renderer* renderer, SDL_Texture* texture, float* xy, int xy_stride, SDL_FColor* color, int color_stride, float* uv, int uv_stride, int num_vertices, void* indices, int num_indices, int size_indices);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderLine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderLine(SDL_Renderer* renderer, float x1, float y1, float x2, float y2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderLines")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderLines(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderPoint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderPoint(SDL_Renderer* renderer, float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderPoints")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderPoints(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderPresent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderPresent(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderReadPixels")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_RenderReadPixels(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderRects(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderTexture(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, SDL_FRect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTexture9Grid")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderTexture9Grid(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, SDL_FRect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTextureAffine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderTextureAffine(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, SDL_FPoint* origin, SDL_FPoint* right, SDL_FPoint* down);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTextureRotated")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderTextureRotated(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, SDL_FRect* dstrect, double angle, SDL_FPoint* center, SDL_FlipMode flip);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTextureTiled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderTextureTiled(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, float scale, SDL_FRect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderViewportSet")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RenderViewportSet(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReportAssertion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertState SDL_ReportAssertion(SDL_AssertData* data, CString func, CString file, int line);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetAssertionReport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetAssertionReport();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetHint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ResetHint(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetHints")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetHints();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetKeyboard")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetKeyboard();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetLogPriorities")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetLogPriorities();

    [LibraryImport(LibraryName, EntryPoint = "SDL_RestoreWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RestoreWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResumeHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ResumeHaptic(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_round")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_round(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_roundf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_roundf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RumbleGamepad(SDL_Gamepad* gamepad, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleGamepadTriggers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RumbleGamepadTriggers(SDL_Gamepad* gamepad, ushort left_rumble, ushort right_rumble, uint duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RumbleJoystick(SDL_Joystick* joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleJoystickTriggers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RumbleJoystickTriggers(SDL_Joystick* joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RunApp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RunApp(int argc, CString* argv, SDL_main_func mainFunction, void* reserved);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RunHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RunHapticEffect(SDL_Haptic* haptic, int effect, uint iterations);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RunOnMainThread")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_RunOnMainThread(SDL_MainThreadCallback callback, void* userdata, CBool wait_complete);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SaveBMP")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SaveBMP(SDL_Surface* surface, CString file);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SaveBMP_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SaveBMP_IO(SDL_Surface* surface, SDL_IOStream* dst, CBool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SaveFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SaveFile(CString file, void* data, ulong datasize);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SaveFile_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SaveFile_IO(SDL_IOStream* src, void* data, ulong datasize, CBool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_scalbn")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_scalbn(double x, int n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_scalbnf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_scalbnf(float x, int n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ScaleSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_ScaleSurface(SDL_Surface* surface, int width, int height, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ScreenKeyboardShown")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ScreenKeyboardShown(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ScreenSaverEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ScreenSaverEnabled();

    [LibraryImport(LibraryName, EntryPoint = "SDL_SeekIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_SeekIO(SDL_IOStream* context, long offset, SDL_IOWhence whence);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SendGamepadEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SendGamepadEffect(SDL_Gamepad* gamepad, void* data, int size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SendJoystickEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SendJoystickEffect(SDL_Joystick* joystick, void* data, int size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SendJoystickVirtualSensorData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SendJoystickVirtualSensorData(SDL_Joystick* joystick, SDL_SensorType type, ulong sensor_timestamp, float* data, int num_values);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAppMetadata")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetAppMetadata(CString appname, CString appversion, CString appidentifier);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAppMetadataProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetAppMetadataProperty(CString name, CString value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAssertionHandler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetBooleanProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetBooleanProperty(SDL_PropertiesID props, CString name, CBool value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void* userdata, CString* mime_types, ulong num_mime_types);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetClipboardText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetClipboardText(CString text);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetCursor(SDL_Cursor* cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_setenv_unsafe")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_setenv_unsafe(CString name, CString value, int overwrite);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetEnvironmentVariable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetEnvironmentVariable(SDL_Environment* env, CString name, CString value, CBool overwrite);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetError(CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetEventEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetEventEnabled(uint type, CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetEventFilter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetFloatProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetFloatProperty(SDL_PropertiesID props, CString name, float value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGamepadEventsEnabled(CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadLED")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetGamepadLED(SDL_Gamepad* gamepad, byte red, byte green, byte blue);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadMapping")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetGamepadMapping(SDL_JoystickID instance_id, CString mapping);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadSensorEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetGamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type, CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUAllowedFramesInFlight")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetGPUAllowedFramesInFlight(SDL_GPUDevice* device, uint allowed_frames_in_flight);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUBlendants")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGPUBlendants(SDL_GPURenderPass* render_pass, SDL_FColor blend_constants);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUBufferName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGPUBufferName(SDL_GPUDevice* device, SDL_GPUBuffer* buffer, CString text);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUScissor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGPUScissor(SDL_GPURenderPass* render_pass, SDL_Rect* scissor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUStencilReference")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGPUStencilReference(SDL_GPURenderPass* render_pass, byte reference);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUSwapchainParameters")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetGPUSwapchainParameters(SDL_GPUDevice* device, SDL_Window* window, SDL_GPUSwapchainComposition swapchain_composition, SDL_GPUPresentMode present_mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUTextureName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGPUTextureName(SDL_GPUDevice* device, SDL_GPUTexture* texture, CString text);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGPUViewport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGPUViewport(SDL_GPURenderPass* render_pass, SDL_GPUViewport* viewport);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHapticAutocenter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetHapticAutocenter(SDL_Haptic* haptic, int autocenter);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHapticGain")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetHapticGain(SDL_Haptic* haptic, int gain);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetHint(CString name, CString value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHintWithPriority")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetHintWithPriority(CString name, CString value, SDL_HintPriority priority);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetJoystickEventsEnabled(CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickLED")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetJoystickLED(SDL_Joystick* joystick, byte red, byte green, byte blue);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetJoystickVirtualAxis(SDL_Joystick* joystick, int axis, short value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualBall")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetJoystickVirtualBall(SDL_Joystick* joystick, int ball, short xrel, short yrel);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetJoystickVirtualButton(SDL_Joystick* joystick, int button, CBool down);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualHat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetJoystickVirtualHat(SDL_Joystick* joystick, int hat, byte value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetJoystickVirtualTouchpad(SDL_Joystick* joystick, int touchpad, int finger, CBool down, float x, float y, float pressure);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogOutputFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetLogOutputFunction(SDL_LogOutputFunction callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogPriorities")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetLogPriorities(SDL_LogPriority priority);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogPriority")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetLogPriority(int category, SDL_LogPriority priority);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogPriorityPrefix")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetLogPriorityPrefix(SDL_LogPriority priority, CString prefix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetMainReady")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetMainReady();

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetMemoryFunctions")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func, SDL_realloc_func realloc_func, SDL_free_func free_func);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetModState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetModState(SDL_Keymod modstate);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetNumberProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetNumberProperty(SDL_PropertiesID props, CString name, long value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPaletteColors")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPointerProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetPointerProperty(SDL_PropertiesID props, CString name, void* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, CString name, void* value, SDL_CleanupPropertyCallback cleanup, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPrimarySelectionText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetPrimarySelectionText(CString text);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderColorScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderColorScale(SDL_Renderer* renderer, float scale);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderDrawBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderDrawColor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderDrawColor(SDL_Renderer* renderer, byte r, byte g, byte b, byte a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderDrawColorFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderDrawColorFloat(SDL_Renderer* renderer, float r, float g, float b, float a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderLogicalPresentation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderLogicalPresentation(SDL_Renderer* renderer, int w, int h, SDL_RendererLogicalPresentation mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderTarget")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderViewport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetRenderVSync(SDL_Renderer* renderer, int vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetScancodeName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetScancodeName(SDL_Scancode scancode, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetStringProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetStringProperty(SDL_PropertiesID props, CString name, CString value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfaceAlphaMod(SDL_Surface* surface, byte alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfaceClipRect(SDL_Surface* surface, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfaceColorKey(SDL_Surface* surface, CBool enabled, uint key);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfaceColorMod(SDL_Surface* surface, byte r, byte g, byte b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfaceColorspace(SDL_Surface* surface, SDL_Colorspace colorspace);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfacePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceRLE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetSurfaceRLE(SDL_Surface* surface, CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextInputArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetTextInputArea(SDL_Window* window, SDL_Rect* rect, int cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetTextureAlphaMod(SDL_Texture* texture, byte alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureAlphaModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetTextureAlphaModFloat(SDL_Texture* texture, float alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetTextureColorMod(SDL_Texture* texture, byte r, byte g, byte b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureColorModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetTextureColorModFloat(SDL_Texture* texture, float r, float g, float b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureScaleMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTrayEntryCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetTrayEntryCallback(SDL_TrayEntry* entry, SDL_TrayCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTrayEntryChecked")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetTrayEntryChecked(SDL_TrayEntry* entry, CBool @checked);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTrayEntryEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetTrayEntryEnabled(SDL_TrayEntry* entry, CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTrayEntryLabel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetTrayEntryLabel(SDL_TrayEntry* entry, CString label);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTrayIcon")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetTrayIcon(SDL_Tray* tray, SDL_Surface* icon);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTrayTooltip")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetTrayTooltip(SDL_Tray* tray, CString tooltip);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowAlwaysOnTop")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowAlwaysOnTop(SDL_Window* window, CBool on_top);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowAspectRatio")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowAspectRatio(SDL_Window* window, float min_aspect, float max_aspect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowBordered")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowBordered(SDL_Window* window, CBool bordered);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowFocusable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowFocusable(SDL_Window* window, CBool focusable);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowFullscreen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowFullscreen(SDL_Window* window, CBool fullscreen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowFullscreenMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowFullscreenMode(SDL_Window* window, SDL_DisplayMode* mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowHitTest")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowIcon")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowKeyboardGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowKeyboardGrab(SDL_Window* window, CBool grabbed);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMaximumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMinimumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowModal")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowModal(SDL_Window* window, CBool modal);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMouseGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowMouseGrab(SDL_Window* window, CBool grabbed);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMouseRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowMouseRect(SDL_Window* window, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowOpacity")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowOpacity(SDL_Window* window, float opacity);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowParent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowParent(SDL_Window* window, SDL_Window* parent);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowPosition(SDL_Window* window, int x, int y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowRelativeMouseMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowRelativeMouseMode(SDL_Window* window, CBool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowResizable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowResizable(SDL_Window* window, CBool resizable);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowShape")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowShape(SDL_Window* window, SDL_Surface* shape);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowSize(SDL_Window* window, int w, int h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowSurfaceVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowSurfaceVSync(SDL_Window* window, int vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowTitle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SetWindowTitle(SDL_Window* window, CString title);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ShowCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowFileDialogWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ShowFileDialogWithProperties(SDL_FileDialogType type, SDL_DialogFileCallback callback, void* userdata, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowMessageBox")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, int* buttonid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowOpenFileDialog")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ShowOpenFileDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, SDL_DialogFileFilter* filters, int nfilters, CString default_location, CBool allow_many);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowOpenFolderDialog")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ShowOpenFolderDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, CString default_location, CBool allow_many);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowSaveFileDialog")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ShowSaveFileDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, SDL_DialogFileFilter* filters, int nfilters, CString default_location);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowSimpleMessageBox")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, CString title, CString message, SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ShowWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowWindowSystemMenu")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_ShowWindowSystemMenu(SDL_Window* window, int x, int y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SignalAsyncIOQueue")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SignalAsyncIOQueue(SDL_AsyncIOQueue* queue);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sin")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_sin(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sinf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_sinf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_snprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_snprintf(CString text, ulong maxlen, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sqrt")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_sqrt(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sqrtf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_sqrtf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_srand")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_srand(ulong seed);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sscanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_sscanf(CString text, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StartTextInput")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_StartTextInput(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StartTextInputWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_StartTextInputWithProperties(SDL_Window* window, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StepBackUTF8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_StepBackUTF8(CString start, CString* pstr);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StepUTF8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial uint SDL_StepUTF8(CString* pstr, ulong* pslen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_StopHapticEffect(SDL_Haptic* haptic, int effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopHapticEffects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_StopHapticEffects(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopHapticRumble")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_StopHapticRumble(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopTextInput")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_StopTextInput(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StorageReady")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_StorageReady(SDL_Storage* storage);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strcasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strcasecmp(CString str1, CString str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strcasestr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strcasestr(CString haystack, CString needle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strchr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strchr(CString str, int c);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strcmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strcmp(CString str1, CString str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strdup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strdup(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StringToGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_StringToGUID(CString pchGUID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlcat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strlcat(CString dst, CString src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strlcpy(CString dst, CString src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strlen(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlwr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strlwr(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strncasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strncasecmp(CString str1, CString str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strncmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strncmp(CString str1, CString str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strndup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strndup(CString str, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strnlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strnlen(CString str, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strnstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strnstr(CString haystack, CString needle, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strpbrk")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strpbrk(CString str, CString breakset);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strrchr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strrchr(CString str, int c);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strrev")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strrev(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strstr(CString haystack, CString needle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_strtod(CString str, CString* endp);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtok_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strtok_r(CString str, CString delim, CString* saveptr);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtoll")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_strtoll(CString str, CString* endp, int @base);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtoull")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strtoull(CString str, CString* endp, int @base);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strupr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strupr(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SubmitGPUCommandBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SubmitGPUCommandBuffer(SDL_GPUCommandBuffer* command_buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SubmitGPUCommandBufferAndAcquireFence")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GPUFence* SDL_SubmitGPUCommandBufferAndAcquireFence(SDL_GPUCommandBuffer* command_buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SurfaceHasAlternateImages")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SurfaceHasAlternateImages(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SurfaceHasColorKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SurfaceHasColorKey(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SurfaceHasRLE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SurfaceHasRLE(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_swprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_swprintf(CStringWide text, ulong maxlen, CStringWide fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SyncWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_SyncWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_tan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_tan(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_tanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_tanf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TellIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_TellIO(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TextInputActive")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_TextInputActive(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TimeFromWindows")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Time SDL_TimeFromWindows(uint dwLowDateTime, uint dwHighDateTime);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TimeToDateTime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_TimeToDateTime(SDL_Time ticks, SDL_DateTime* dt, CBool localTime);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TimeToWindows")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_TimeToWindows(SDL_Time ticks, uint* dwLowDateTime, uint* dwHighDateTime);

    [LibraryImport(LibraryName, EntryPoint = "SDL_tolower")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_tolower(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_toupper")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_toupper(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_trunc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_trunc(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_truncf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_truncf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UCS4ToUTF8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_UCS4ToUTF8(uint codepoint, CString dst);

    [LibraryImport(LibraryName, EntryPoint = "SDL_uitoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_uitoa(uint value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ulltoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_ulltoa(ulong value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnloadObject")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnloadObject(SDL_SharedObject* handle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockJoysticks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockSurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockTexture(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnmapGPUTransferBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnmapGPUTransferBuffer(SDL_GPUDevice* device, SDL_GPUTransferBuffer* transfer_buffer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_unsetenv_unsafe")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_unsetenv_unsafe(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnsetEnvironmentVariable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_UnsetEnvironmentVariable(SDL_Environment* env, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateGamepads")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UpdateGamepads();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_UpdateHapticEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UpdateJoysticks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateNVTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_UpdateNVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* UVplane, int UVpitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateSensors")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UpdateSensors();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_UpdateTexture(SDL_Texture* texture, SDL_Rect* rect, void* pixels, int pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_UpdateWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateWindowSurfaceRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_UpdateWindowSurfaceRects(SDL_Window* window, SDL_Rect* rects, int numrects);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateYUVTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_UpdateYUVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* Uplane, int Upitch, byte* Vplane, int Vpitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UploadToGPUBuffer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UploadToGPUBuffer(SDL_GPUCopyPass* copy_pass, SDL_GPUTransferBufferLocation* source, SDL_GPUBufferRegion* destination, CBool cycle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UploadToGPUTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UploadToGPUTexture(SDL_GPUCopyPass* copy_pass, SDL_GPUTextureTransferInfo* source, SDL_GPUTextureRegion* destination, CBool cycle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_utf8strlcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_utf8strlcpy(CString dst, CString src, ulong dst_bytes);

    [LibraryImport(LibraryName, EntryPoint = "SDL_utf8strlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_utf8strlen(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_utf8strnlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_utf8strnlen(CString str, ulong bytes);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitAndAcquireGPUSwapchainTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitAndAcquireGPUSwapchainTexture(SDL_GPUCommandBuffer* command_buffer, SDL_Window* window, SDL_GPUTexture** swapchain_texture, uint* swapchain_texture_width, uint* swapchain_texture_height);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitAsyncIOResult")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitAsyncIOResult(SDL_AsyncIOQueue* queue, SDL_AsyncIOOutcome* outcome, int timeoutMS);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitEventTimeout")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitEventTimeout(SDL_Event* @event, int timeoutMS);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitForGPUFences")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitForGPUFences(SDL_GPUDevice* device, CBool wait_all, SDL_GPUFence** fences, uint num_fences);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitForGPUIdle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitForGPUIdle(SDL_GPUDevice* device);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitForGPUSwapchain")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitForGPUSwapchain(SDL_GPUDevice* device, SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitProcess")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WaitProcess(SDL_Process* process, CBool block, int* exitcode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WarpMouseGlobal")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WarpMouseGlobal(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WarpMouseInWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_WarpMouseInWindow(SDL_Window* window, float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WasInit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_InitFlags SDL_WasInit(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcscasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcscasecmp(CStringWide str1, CStringWide str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcscmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcscmp(CStringWide str1, CStringWide str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsdup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CStringWide SDL_wcsdup(CStringWide wstr);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcslcat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcslcat(CStringWide dst, CStringWide src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcslcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcslcpy(CStringWide dst, CStringWide src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcslen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcslen(CStringWide wstr);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsncasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcsncasecmp(CStringWide str1, CStringWide str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsncmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcsncmp(CStringWide str1, CStringWide str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsnlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcsnlen(CStringWide wstr, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsnstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CStringWide SDL_wcsnstr(CStringWide haystack, CStringWide needle, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CStringWide SDL_wcsstr(CStringWide haystack, CStringWide needle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WindowHasSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WindowHasSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WindowSupportsGPUPresentMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WindowSupportsGPUPresentMode(SDL_GPUDevice* device, SDL_Window* window, SDL_GPUPresentMode present_mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WindowSupportsGPUSwapchainComposition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WindowSupportsGPUSwapchainComposition(SDL_GPUDevice* device, SDL_Window* window, SDL_GPUSwapchainComposition swapchain_composition);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteAsyncIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteAsyncIO(SDL_AsyncIO* asyncio, void* ptr, ulong offset, ulong size, SDL_AsyncIOQueue* queue, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_WriteIO(SDL_IOStream* context, void* ptr, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteS16BE(SDL_IOStream* dst, short value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteS16LE(SDL_IOStream* dst, short value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteS32BE(SDL_IOStream* dst, int value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteS32LE(SDL_IOStream* dst, int value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteS64BE(SDL_IOStream* dst, long value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteS64LE(SDL_IOStream* dst, long value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteS8(SDL_IOStream* dst, sbyte value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteStorageFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteStorageFile(SDL_Storage* storage, CString path, void* source, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteSurfacePixel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteSurfacePixel(SDL_Surface* surface, int x, int y, byte r, byte g, byte b, byte a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteSurfacePixelFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteSurfacePixelFloat(SDL_Surface* surface, int x, int y, float r, float g, float b, float a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteU16BE(SDL_IOStream* dst, ushort value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteU16LE(SDL_IOStream* dst, ushort value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteU32BE(SDL_IOStream* dst, uint value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteU32LE(SDL_IOStream* dst, uint value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteU64BE(SDL_IOStream* dst, ulong value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteU64LE(SDL_IOStream* dst, ulong value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CBool SDL_WriteU8(SDL_IOStream* dst, byte value);

    public static readonly int SDL_ALPHA_OPAQUE = (int)255;

    public static readonly float SDL_ALPHA_OPAQUE_FLOAT = (float)1;

    public static readonly int SDL_ALPHA_TRANSPARENT = (int)0;

    public static readonly float SDL_ALPHA_TRANSPARENT_FLOAT = (float)0;

    public static readonly uint SDL_BLENDMODE_ADD = (uint)2;

    public static readonly uint SDL_BLENDMODE_ADD_PREMULTIPLIED = (uint)32;

    public static readonly uint SDL_BLENDMODE_BLEND = (uint)1;

    public static readonly uint SDL_BLENDMODE_BLEND_PREMULTIPLIED = (uint)16;

    public static readonly uint SDL_BLENDMODE_INVALID = (uint)2147483647;

    public static readonly uint SDL_BLENDMODE_MOD = (uint)4;

    public static readonly uint SDL_BLENDMODE_MUL = (uint)8;

    public static readonly uint SDL_BLENDMODE_NONE = (uint)0;

    public static readonly int SDL_BUTTON_LEFT = (int)1;

    public static readonly uint SDL_BUTTON_LMASK = (uint)1;

    public static readonly int SDL_BUTTON_MIDDLE = (int)2;

    public static readonly uint SDL_BUTTON_MMASK = (uint)2;

    public static readonly int SDL_BUTTON_RIGHT = (int)3;

    public static readonly uint SDL_BUTTON_RMASK = (uint)4;

    public static readonly int SDL_BUTTON_X1 = (int)4;

    public static readonly uint SDL_BUTTON_X1MASK = (uint)8;

    public static readonly int SDL_BUTTON_X2 = (int)5;

    public static readonly uint SDL_BUTTON_X2MASK = (uint)16;

    public static readonly int SDL_CACHELINE_SIZE = (int)128;

    public static readonly int SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE = (int)8;

    public static readonly float SDL_FLT_EPSILON = (float)1.1920928955078125E-07;

    public static readonly int SDL_GL_CONTEXT_DEBUG_FLAG = (int)1;

    public static readonly int SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = (int)2;

    public static readonly int SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = (int)2;

    public static readonly int SDL_GL_CONTEXT_PROFILE_CORE = (int)1;

    public static readonly int SDL_GL_CONTEXT_PROFILE_ES = (int)4;

    public static readonly int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = (int)1;

    public static readonly int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = (int)0;

    public static readonly int SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = (int)8;

    public static readonly int SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = (int)1;

    public static readonly int SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = (int)0;

    public static readonly int SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = (int)4;

    public static readonly uint SDL_GLOB_CASEINSENSITIVE = (uint)1;

    public static readonly uint SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ = (uint)16;

    public static readonly uint SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE = (uint)32;

    public static readonly uint SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ = (uint)8;

    public static readonly uint SDL_GPU_BUFFERUSAGE_INDEX = (uint)2;

    public static readonly uint SDL_GPU_BUFFERUSAGE_INDIRECT = (uint)4;

    public static readonly uint SDL_GPU_BUFFERUSAGE_VERTEX = (uint)1;

    public static readonly uint SDL_GPU_COLORCOMPONENT_A = (uint)8;

    public static readonly uint SDL_GPU_COLORCOMPONENT_B = (uint)4;

    public static readonly uint SDL_GPU_COLORCOMPONENT_G = (uint)2;

    public static readonly uint SDL_GPU_COLORCOMPONENT_R = (uint)1;

    public static readonly uint SDL_GPU_SHADERFORMAT_DXBC = (uint)4;

    public static readonly uint SDL_GPU_SHADERFORMAT_DXIL = (uint)8;

    public static readonly int SDL_GPU_SHADERFORMAT_INVALID = (int)0;

    public static readonly uint SDL_GPU_SHADERFORMAT_METALLIB = (uint)32;

    public static readonly uint SDL_GPU_SHADERFORMAT_MSL = (uint)16;

    public static readonly uint SDL_GPU_SHADERFORMAT_PRIVATE = (uint)1;

    public static readonly uint SDL_GPU_SHADERFORMAT_SPIRV = (uint)2;

    public static readonly uint SDL_GPU_TEXTUREUSAGE_COLOR_TARGET = (uint)2;

    public static readonly uint SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ = (uint)16;

    public static readonly uint SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE = (uint)64;

    public static readonly uint SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE = (uint)32;

    public static readonly uint SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET = (uint)4;

    public static readonly uint SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ = (uint)8;

    public static readonly uint SDL_GPU_TEXTUREUSAGE_SAMPLER = (uint)1;

    public static readonly uint SDL_HAPTIC_AUTOCENTER = (uint)131072;

    public static readonly int SDL_HAPTIC_CARTESIAN = (int)1;

    public static readonly uint SDL_HAPTIC_ANT = (uint)1;

    public static readonly uint SDL_HAPTIC_CUSTOM = (uint)32768;

    public static readonly uint SDL_HAPTIC_DAMPER = (uint)256;

    public static readonly uint SDL_HAPTIC_FRICTION = (uint)1024;

    public static readonly uint SDL_HAPTIC_GAIN = (uint)65536;

    public static readonly uint SDL_HAPTIC_INERTIA = (uint)512;

    public static readonly uint SDL_HAPTIC_INFINITY = (uint)4294967295;

    public static readonly uint SDL_HAPTIC_LEFTRIGHT = (uint)2048;

    public static readonly uint SDL_HAPTIC_PAUSE = (uint)524288;

    public static readonly int SDL_HAPTIC_POLAR = (int)0;

    public static readonly uint SDL_HAPTIC_RAMP = (uint)64;

    public static readonly uint SDL_HAPTIC_RESERVED1 = (uint)4096;

    public static readonly uint SDL_HAPTIC_RESERVED2 = (uint)8192;

    public static readonly uint SDL_HAPTIC_RESERVED3 = (uint)16384;

    public static readonly uint SDL_HAPTIC_SAWTOOTHDOWN = (uint)32;

    public static readonly uint SDL_HAPTIC_SAWTOOTHUP = (uint)16;

    public static readonly uint SDL_HAPTIC_SINE = (uint)2;

    public static readonly int SDL_HAPTIC_SPHERICAL = (int)2;

    public static readonly uint SDL_HAPTIC_SPRING = (uint)128;

    public static readonly uint SDL_HAPTIC_SQUARE = (uint)4;

    public static readonly uint SDL_HAPTIC_STATUS = (uint)262144;

    public static readonly int SDL_HAPTIC_STEERING_AXIS = (int)3;

    public static readonly uint SDL_HAPTIC_TRIANGLE = (uint)8;

    public static readonly uint SDL_HAT_CENTERED = (uint)0;

    public static readonly uint SDL_HAT_DOWN = (uint)4;

    public static readonly uint SDL_HAT_LEFT = (uint)8;

    public static readonly uint SDL_HAT_LEFTDOWN = (uint)12;

    public static readonly uint SDL_HAT_LEFTUP = (uint)9;

    public static readonly uint SDL_HAT_RIGHT = (uint)2;

    public static readonly uint SDL_HAT_RIGHTDOWN = (uint)6;

    public static readonly uint SDL_HAT_RIGHTUP = (uint)3;

    public static readonly uint SDL_HAT_UP = (uint)1;

    public static readonly CString SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = (CString)"SDL_ALLOW_ALT_TAB_WHILE_GRABBED"u8;

    public static readonly CString SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY = (CString)"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY"u8;

    public static readonly CString SDL_HINT_ANDROID_BLOCK_ON_PAUSE = (CString)"SDL_ANDROID_BLOCK_ON_PAUSE"u8;

    public static readonly CString SDL_HINT_ANDROID_LOW_LATENCY_AUDIO = (CString)"SDL_ANDROID_LOW_LATENCY_AUDIO"u8;

    public static readonly CString SDL_HINT_ANDROID_TRAP_BACK_BUTTON = (CString)"SDL_ANDROID_TRAP_BACK_BUTTON"u8;

    public static readonly CString SDL_HINT_APP_ID = (CString)"SDL_APP_ID"u8;

    public static readonly CString SDL_HINT_APP_NAME = (CString)"SDL_APP_NAME"u8;

    public static readonly CString SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = (CString)"SDL_APPLE_TV_CONTROLLER_UI_EVENTS"u8;

    public static readonly CString SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = (CString)"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"u8;

    public static readonly CString SDL_HINT_ASSERT = (CString)"SDL_ASSERT"u8;

    public static readonly CString SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE = (CString)"SDL_AUDIO_ALSA_DEFAULT_DEVICE"u8;

    public static readonly CString SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE = (CString)"SDL_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE"u8;

    public static readonly CString SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE = (CString)"SDL_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE"u8;

    public static readonly CString SDL_HINT_AUDIO_CATEGORY = (CString)"SDL_AUDIO_CATEGORY"u8;

    public static readonly CString SDL_HINT_AUDIO_CHANNELS = (CString)"SDL_AUDIO_CHANNELS"u8;

    public static readonly CString SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME = (CString)"SDL_AUDIO_DEVICE_APP_ICON_NAME"u8;

    public static readonly CString SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES = (CString)"SDL_AUDIO_DEVICE_SAMPLE_FRAMES"u8;

    public static readonly CString SDL_HINT_AUDIO_DEVICE_STREAM_NAME = (CString)"SDL_AUDIO_DEVICE_STREAM_NAME"u8;

    public static readonly CString SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = (CString)"SDL_AUDIO_DEVICE_STREAM_ROLE"u8;

    public static readonly CString SDL_HINT_AUDIO_DISK_INPUT_FILE = (CString)"SDL_AUDIO_DISK_INPUT_FILE"u8;

    public static readonly CString SDL_HINT_AUDIO_DISK_OUTPUT_FILE = (CString)"SDL_AUDIO_DISK_OUTPUT_FILE"u8;

    public static readonly CString SDL_HINT_AUDIO_DISK_TIMESCALE = (CString)"SDL_AUDIO_DISK_TIMESCALE"u8;

    public static readonly CString SDL_HINT_AUDIO_DRIVER = (CString)"SDL_AUDIO_DRIVER"u8;

    public static readonly CString SDL_HINT_AUDIO_DUMMY_TIMESCALE = (CString)"SDL_AUDIO_DUMMY_TIMESCALE"u8;

    public static readonly CString SDL_HINT_AUDIO_FORMAT = (CString)"SDL_AUDIO_FORMAT"u8;

    public static readonly CString SDL_HINT_AUDIO_FREQUENCY = (CString)"SDL_AUDIO_FREQUENCY"u8;

    public static readonly CString SDL_HINT_AUDIO_INCLUDE_MONITORS = (CString)"SDL_AUDIO_INCLUDE_MONITORS"u8;

    public static readonly CString SDL_HINT_AUTO_UPDATE_JOYSTICKS = (CString)"SDL_AUTO_UPDATE_JOYSTICKS"u8;

    public static readonly CString SDL_HINT_AUTO_UPDATE_SENSORS = (CString)"SDL_AUTO_UPDATE_SENSORS"u8;

    public static readonly CString SDL_HINT_BMP_SAVE_LEGACY_FORMAT = (CString)"SDL_BMP_SAVE_LEGACY_FORMAT"u8;

    public static readonly CString SDL_HINT_CAMERA_DRIVER = (CString)"SDL_CAMERA_DRIVER"u8;

    public static readonly CString SDL_HINT_CPU_FEATURE_MASK = (CString)"SDL_CPU_FEATURE_MASK"u8;

    public static readonly CString SDL_HINT_DISPLAY_USABLE_BOUNDS = (CString)"SDL_DISPLAY_USABLE_BOUNDS"u8;

    public static readonly CString SDL_HINT_EGL_LIBRARY = (CString)"SDL_EGL_LIBRARY"u8;

    public static readonly CString SDL_HINT_EMSCRIPTEN_ASYNCIFY = (CString)"SDL_EMSCRIPTEN_ASYNCIFY"u8;

    public static readonly CString SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR = (CString)"SDL_EMSCRIPTEN_CANVAS_SELECTOR"u8;

    public static readonly CString SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = (CString)"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"u8;

    public static readonly CString SDL_HINT_ENABLE_SCREEN_KEYBOARD = (CString)"SDL_ENABLE_SCREEN_KEYBOARD"u8;

    public static readonly CString SDL_HINT_EVDEV_DEVICES = (CString)"SDL_EVDEV_DEVICES"u8;

    public static readonly CString SDL_HINT_EVENT_LOGGING = (CString)"SDL_EVENT_LOGGING"u8;

    public static readonly CString SDL_HINT_FILE_DIALOG_DRIVER = (CString)"SDL_FILE_DIALOG_DRIVER"u8;

    public static readonly CString SDL_HINT_FORCE_RAISEWINDOW = (CString)"SDL_FORCE_RAISEWINDOW"u8;

    public static readonly CString SDL_HINT_FRAMEBUFFER_ACCELERATION = (CString)"SDL_FRAMEBUFFER_ACCELERATION"u8;

    public static readonly CString SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = (CString)"SDL_GAMECONTROLLER_IGNORE_DEVICES"u8;

    public static readonly CString SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = (CString)"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"u8;

    public static readonly CString SDL_HINT_GAMECONTROLLER_SENSOR_FUSION = (CString)"SDL_GAMECONTROLLER_SENSOR_FUSION"u8;

    public static readonly CString SDL_HINT_GAMECONTROLLERCONFIG = (CString)"SDL_GAMECONTROLLERCONFIG"u8;

    public static readonly CString SDL_HINT_GAMECONTROLLERCONFIG_FILE = (CString)"SDL_GAMECONTROLLERCONFIG_FILE"u8;

    public static readonly CString SDL_HINT_GAMECONTROLLERTYPE = (CString)"SDL_GAMECONTROLLERTYPE"u8;

    public static readonly CString SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT = (CString)"SDL_GDK_TEXTINPUT_DEFAULT_TEXT"u8;

    public static readonly CString SDL_HINT_GDK_TEXTINPUT_DESCRIPTION = (CString)"SDL_GDK_TEXTINPUT_DESCRIPTION"u8;

    public static readonly CString SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH = (CString)"SDL_GDK_TEXTINPUT_MAX_LENGTH"u8;

    public static readonly CString SDL_HINT_GDK_TEXTINPUT_SCOPE = (CString)"SDL_GDK_TEXTINPUT_SCOPE"u8;

    public static readonly CString SDL_HINT_GDK_TEXTINPUT_TITLE = (CString)"SDL_GDK_TEXTINPUT_TITLE"u8;

    public static readonly CString SDL_HINT_GPU_DRIVER = (CString)"SDL_GPU_DRIVER"u8;

    public static readonly CString SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS = (CString)"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS"u8;

    public static readonly CString SDL_HINT_HIDAPI_IGNORE_DEVICES = (CString)"SDL_HIDAPI_IGNORE_DEVICES"u8;

    public static readonly CString SDL_HINT_HIDAPI_LIBUSB = (CString)"SDL_HIDAPI_LIBUSB"u8;

    public static readonly CString SDL_HINT_HIDAPI_LIBUSB_WHITELIST = (CString)"SDL_HIDAPI_LIBUSB_WHITELIST"u8;

    public static readonly CString SDL_HINT_HIDAPI_UDEV = (CString)"SDL_HIDAPI_UDEV"u8;

    public static readonly CString SDL_HINT_IME_IMPLEMENTED_UI = (CString)"SDL_IME_IMPLEMENTED_UI"u8;

    public static readonly CString SDL_HINT_IOS_HIDE_HOME_INDICATOR = (CString)"SDL_IOS_HIDE_HOME_INDICATOR"u8;

    public static readonly CString SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = (CString)"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"u8;

    public static readonly CString SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES = (CString)"SDL_JOYSTICK_ARCADESTICK_DEVICES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED = (CString)"SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_BLACKLIST_DEVICES = (CString)"SDL_JOYSTICK_BLACKLIST_DEVICES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED = (CString)"SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_DEVICE = (CString)"SDL_JOYSTICK_DEVICE"u8;

    public static readonly CString SDL_HINT_JOYSTICK_DIRECTINPUT = (CString)"SDL_JOYSTICK_DIRECTINPUT"u8;

    public static readonly CString SDL_HINT_JOYSTICK_ENHANCED_REPORTS = (CString)"SDL_JOYSTICK_ENHANCED_REPORTS"u8;

    public static readonly CString SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES = (CString)"SDL_JOYSTICK_FLIGHTSTICK_DEVICES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED = (CString)"SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_GAMECUBE_DEVICES = (CString)"SDL_JOYSTICK_GAMECUBE_DEVICES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED = (CString)"SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_GAMEINPUT = (CString)"SDL_JOYSTICK_GAMEINPUT"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI = (CString)"SDL_JOYSTICK_HIDAPI"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS = (CString)"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = (CString)"SDL_JOYSTICK_HIDAPI_GAMECUBE"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE = (CString)"SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = (CString)"SDL_JOYSTICK_HIDAPI_JOY_CONS"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED = (CString)"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_LUNA = (CString)"SDL_JOYSTICK_HIDAPI_LUNA"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC = (CString)"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_PS3 = (CString)"SDL_JOYSTICK_HIDAPI_PS3"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER = (CString)"SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_PS4 = (CString)"SDL_JOYSTICK_HIDAPI_PS4"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL = (CString)"SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_PS5 = (CString)"SDL_JOYSTICK_HIDAPI_PS5"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = (CString)"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_SHIELD = (CString)"SDL_JOYSTICK_HIDAPI_SHIELD"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_STADIA = (CString)"SDL_JOYSTICK_HIDAPI_STADIA"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_STEAM = (CString)"SDL_JOYSTICK_HIDAPI_STEAM"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED = (CString)"SDL_JOYSTICK_HIDAPI_STEAM_HOME_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI = (CString)"SDL_JOYSTICK_HIDAPI_STEAM_HORI"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK = (CString)"SDL_JOYSTICK_HIDAPI_STEAMDECK"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_SWITCH = (CString)"SDL_JOYSTICK_HIDAPI_SWITCH"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = (CString)"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED = (CString)"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS = (CString)"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_WII = (CString)"SDL_JOYSTICK_HIDAPI_WII"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED = (CString)"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_XBOX = (CString)"SDL_JOYSTICK_HIDAPI_XBOX"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = (CString)"SDL_JOYSTICK_HIDAPI_XBOX_360"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED = (CString)"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS = (CString)"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = (CString)"SDL_JOYSTICK_HIDAPI_XBOX_ONE"u8;

    public static readonly CString SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED = (CString)"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_IOKIT = (CString)"SDL_JOYSTICK_IOKIT"u8;

    public static readonly CString SDL_HINT_JOYSTICK_LINUX_CLASSIC = (CString)"SDL_JOYSTICK_LINUX_CLASSIC"u8;

    public static readonly CString SDL_HINT_JOYSTICK_LINUX_DEADZONES = (CString)"SDL_JOYSTICK_LINUX_DEADZONES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS = (CString)"SDL_JOYSTICK_LINUX_DIGITAL_HATS"u8;

    public static readonly CString SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES = (CString)"SDL_JOYSTICK_LINUX_HAT_DEADZONES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_MFI = (CString)"SDL_JOYSTICK_MFI"u8;

    public static readonly CString SDL_HINT_JOYSTICK_RAWINPUT = (CString)"SDL_JOYSTICK_RAWINPUT"u8;

    public static readonly CString SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = (CString)"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"u8;

    public static readonly CString SDL_HINT_JOYSTICK_ROG_CHAKRAM = (CString)"SDL_JOYSTICK_ROG_CHAKRAM"u8;

    public static readonly CString SDL_HINT_JOYSTICK_THREAD = (CString)"SDL_JOYSTICK_THREAD"u8;

    public static readonly CString SDL_HINT_JOYSTICK_THROTTLE_DEVICES = (CString)"SDL_JOYSTICK_THROTTLE_DEVICES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED = (CString)"SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_WGI = (CString)"SDL_JOYSTICK_WGI"u8;

    public static readonly CString SDL_HINT_JOYSTICK_WHEEL_DEVICES = (CString)"SDL_JOYSTICK_WHEEL_DEVICES"u8;

    public static readonly CString SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED = (CString)"SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED"u8;

    public static readonly CString SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES = (CString)"SDL_JOYSTICK_ZERO_CENTERED_DEVICES"u8;

    public static readonly CString SDL_HINT_KEYCODE_OPTIONS = (CString)"SDL_KEYCODE_OPTIONS"u8;

    public static readonly CString SDL_HINT_KMSDRM_DEVICE_INDEX = (CString)"SDL_KMSDRM_DEVICE_INDEX"u8;

    public static readonly CString SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = (CString)"SDL_KMSDRM_REQUIRE_DRM_MASTER"u8;

    public static readonly CString SDL_HINT_LOGGING = (CString)"SDL_LOGGING"u8;

    public static readonly CString SDL_HINT_MAC_BACKGROUND_APP = (CString)"SDL_MAC_BACKGROUND_APP"u8;

    public static readonly CString SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = (CString)"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"u8;

    public static readonly CString SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = (CString)"SDL_MAC_OPENGL_ASYNC_DISPATCH"u8;

    public static readonly CString SDL_HINT_MAC_SCROLL_MOMENTUM = (CString)"SDL_MAC_SCROLL_MOMENTUM"u8;

    public static readonly CString SDL_HINT_MAIN_CALLBACK_RATE = (CString)"SDL_MAIN_CALLBACK_RATE"u8;

    public static readonly CString SDL_HINT_MOUSE_AUTO_CAPTURE = (CString)"SDL_MOUSE_AUTO_CAPTURE"u8;

    public static readonly CString SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR = (CString)"SDL_MOUSE_DEFAULT_SYSTEM_CURSOR"u8;

    public static readonly CString SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = (CString)"SDL_MOUSE_DOUBLE_CLICK_RADIUS"u8;

    public static readonly CString SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = (CString)"SDL_MOUSE_DOUBLE_CLICK_TIME"u8;

    public static readonly CString SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE = (CString)"SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE"u8;

    public static readonly CString SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = (CString)"SDL_MOUSE_FOCUS_CLICKTHROUGH"u8;

    public static readonly CString SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = (CString)"SDL_MOUSE_NORMAL_SPEED_SCALE"u8;

    public static readonly CString SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE = (CString)"SDL_MOUSE_RELATIVE_CURSOR_VISIBLE"u8;

    public static readonly CString SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = (CString)"SDL_MOUSE_RELATIVE_MODE_CENTER"u8;

    public static readonly CString SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = (CString)"SDL_MOUSE_RELATIVE_SPEED_SCALE"u8;

    public static readonly CString SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = (CString)"SDL_MOUSE_RELATIVE_SYSTEM_SCALE"u8;

    public static readonly CString SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = (CString)"SDL_MOUSE_RELATIVE_WARP_MOTION"u8;

    public static readonly CString SDL_HINT_MOUSE_TOUCH_EVENTS = (CString)"SDL_MOUSE_TOUCH_EVENTS"u8;

    public static readonly CString SDL_HINT_MUTE_CONSOLE_KEYBOARD = (CString)"SDL_MUTE_CONSOLE_KEYBOARD"u8;

    public static readonly CString SDL_HINT_NO_SIGNAL_HANDLERS = (CString)"SDL_NO_SIGNAL_HANDLERS"u8;

    public static readonly CString SDL_HINT_OPENGL_ES_DRIVER = (CString)"SDL_OPENGL_ES_DRIVER"u8;

    public static readonly CString SDL_HINT_OPENGL_LIBRARY = (CString)"SDL_OPENGL_LIBRARY"u8;

    public static readonly CString SDL_HINT_OPENVR_LIBRARY = (CString)"SDL_OPENVR_LIBRARY"u8;

    public static readonly CString SDL_HINT_ORIENTATIONS = (CString)"SDL_ORIENTATIONS"u8;

    public static readonly CString SDL_HINT_PEN_MOUSE_EVENTS = (CString)"SDL_PEN_MOUSE_EVENTS"u8;

    public static readonly CString SDL_HINT_PEN_TOUCH_EVENTS = (CString)"SDL_PEN_TOUCH_EVENTS"u8;

    public static readonly CString SDL_HINT_POLL_SENTINEL = (CString)"SDL_POLL_SENTINEL"u8;

    public static readonly CString SDL_HINT_PREFERRED_LOCALES = (CString)"SDL_PREFERRED_LOCALES"u8;

    public static readonly CString SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = (CString)"SDL_QUIT_ON_LAST_WINDOW_CLOSE"u8;

    public static readonly CString SDL_HINT_RENDER_DIRECT3D_THREADSAFE = (CString)"SDL_RENDER_DIRECT3D_THREADSAFE"u8;

    public static readonly CString SDL_HINT_RENDER_DIRECT3D11_DEBUG = (CString)"SDL_RENDER_DIRECT3D11_DEBUG"u8;

    public static readonly CString SDL_HINT_RENDER_DRIVER = (CString)"SDL_RENDER_DRIVER"u8;

    public static readonly CString SDL_HINT_RENDER_GPU_DEBUG = (CString)"SDL_RENDER_GPU_DEBUG"u8;

    public static readonly CString SDL_HINT_RENDER_GPU_LOW_POWER = (CString)"SDL_RENDER_GPU_LOW_POWER"u8;

    public static readonly CString SDL_HINT_RENDER_LINE_METHOD = (CString)"SDL_RENDER_LINE_METHOD"u8;

    public static readonly CString SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE = (CString)"SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE"u8;

    public static readonly CString SDL_HINT_RENDER_VSYNC = (CString)"SDL_RENDER_VSYNC"u8;

    public static readonly CString SDL_HINT_RENDER_VULKAN_DEBUG = (CString)"SDL_RENDER_VULKAN_DEBUG"u8;

    public static readonly CString SDL_HINT_RETURN_KEY_HIDES_IME = (CString)"SDL_RETURN_KEY_HIDES_IME"u8;

    public static readonly CString SDL_HINT_ROG_GAMEPAD_MICE = (CString)"SDL_ROG_GAMEPAD_MICE"u8;

    public static readonly CString SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED = (CString)"SDL_ROG_GAMEPAD_MICE_EXCLUDED"u8;

    public static readonly CString SDL_HINT_RPI_VIDEO_LAYER = (CString)"SDL_RPI_VIDEO_LAYER"u8;

    public static readonly CString SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = (CString)"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"u8;

    public static readonly CString SDL_HINT_SHUTDOWN_DBUS_ON_QUIT = (CString)"SDL_SHUTDOWN_DBUS_ON_QUIT"u8;

    public static readonly CString SDL_HINT_STORAGE_TITLE_DRIVER = (CString)"SDL_STORAGE_TITLE_DRIVER"u8;

    public static readonly CString SDL_HINT_STORAGE_USER_DRIVER = (CString)"SDL_STORAGE_USER_DRIVER"u8;

    public static readonly CString SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = (CString)"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"u8;

    public static readonly CString SDL_HINT_THREAD_PRIORITY_POLICY = (CString)"SDL_THREAD_PRIORITY_POLICY"u8;

    public static readonly CString SDL_HINT_TIMER_RESOLUTION = (CString)"SDL_TIMER_RESOLUTION"u8;

    public static readonly CString SDL_HINT_TOUCH_MOUSE_EVENTS = (CString)"SDL_TOUCH_MOUSE_EVENTS"u8;

    public static readonly CString SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = (CString)"SDL_TRACKPAD_IS_TOUCH_ONLY"u8;

    public static readonly CString SDL_HINT_TV_REMOTE_AS_JOYSTICK = (CString)"SDL_TV_REMOTE_AS_JOYSTICK"u8;

    public static readonly CString SDL_HINT_VIDEO_ALLOW_SCREENSAVER = (CString)"SDL_VIDEO_ALLOW_SCREENSAVER"u8;

    public static readonly CString SDL_HINT_VIDEO_DISPLAY_PRIORITY = (CString)"SDL_VIDEO_DISPLAY_PRIORITY"u8;

    public static readonly CString SDL_HINT_VIDEO_DOUBLE_BUFFER = (CString)"SDL_VIDEO_DOUBLE_BUFFER"u8;

    public static readonly CString SDL_HINT_VIDEO_DRIVER = (CString)"SDL_VIDEO_DRIVER"u8;

    public static readonly CString SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES = (CString)"SDL_VIDEO_DUMMY_SAVE_FRAMES"u8;

    public static readonly CString SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK = (CString)"SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK"u8;

    public static readonly CString SDL_HINT_VIDEO_FORCE_EGL = (CString)"SDL_VIDEO_FORCE_EGL"u8;

    public static readonly CString SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY = (CString)"SDL_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY"u8;

    public static readonly CString SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = (CString)"SDL_VIDEO_MAC_FULLSCREEN_SPACES"u8;

    public static readonly CString SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = (CString)"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"u8;

    public static readonly CString SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES = (CString)"SDL_VIDEO_OFFSCREEN_SAVE_FRAMES"u8;

    public static readonly CString SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS = (CString)"SDL_VIDEO_SYNC_WINDOW_OPERATIONS"u8;

    public static readonly CString SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = (CString)"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"u8;

    public static readonly CString SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = (CString)"SDL_VIDEO_WAYLAND_MODE_EMULATION"u8;

    public static readonly CString SDL_HINT_VIDEO_WAYLAND_MODE_SCALING = (CString)"SDL_VIDEO_WAYLAND_MODE_SCALING"u8;

    public static readonly CString SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = (CString)"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"u8;

    public static readonly CString SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY = (CString)"SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY"u8;

    public static readonly CString SDL_HINT_VIDEO_WIN_D3DCOMPILER = (CString)"SDL_VIDEO_WIN_D3DCOMPILER"u8;

    public static readonly CString SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = (CString)"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"u8;

    public static readonly CString SDL_HINT_VIDEO_X11_NET_WM_PING = (CString)"SDL_VIDEO_X11_NET_WM_PING"u8;

    public static readonly CString SDL_HINT_VIDEO_X11_NODIRECTCOLOR = (CString)"SDL_VIDEO_X11_NODIRECTCOLOR"u8;

    public static readonly CString SDL_HINT_VIDEO_X11_SCALING_FACTOR = (CString)"SDL_VIDEO_X11_SCALING_FACTOR"u8;

    public static readonly CString SDL_HINT_VIDEO_X11_VISUALID = (CString)"SDL_VIDEO_X11_VISUALID"u8;

    public static readonly CString SDL_HINT_VIDEO_X11_WINDOW_VISUALID = (CString)"SDL_VIDEO_X11_WINDOW_VISUALID"u8;

    public static readonly CString SDL_HINT_VIDEO_X11_XRANDR = (CString)"SDL_VIDEO_X11_XRANDR"u8;

    public static readonly CString SDL_HINT_VITA_ENABLE_BACK_TOUCH = (CString)"SDL_VITA_ENABLE_BACK_TOUCH"u8;

    public static readonly CString SDL_HINT_VITA_ENABLE_FRONT_TOUCH = (CString)"SDL_VITA_ENABLE_FRONT_TOUCH"u8;

    public static readonly CString SDL_HINT_VITA_MODULE_PATH = (CString)"SDL_VITA_MODULE_PATH"u8;

    public static readonly CString SDL_HINT_VITA_PVR_INIT = (CString)"SDL_VITA_PVR_INIT"u8;

    public static readonly CString SDL_HINT_VITA_PVR_OPENGL = (CString)"SDL_VITA_PVR_OPENGL"u8;

    public static readonly CString SDL_HINT_VITA_RESOLUTION = (CString)"SDL_VITA_RESOLUTION"u8;

    public static readonly CString SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = (CString)"SDL_VITA_TOUCH_MOUSE_DEVICE"u8;

    public static readonly CString SDL_HINT_VULKAN_DISPLAY = (CString)"SDL_VULKAN_DISPLAY"u8;

    public static readonly CString SDL_HINT_VULKAN_LIBRARY = (CString)"SDL_VULKAN_LIBRARY"u8;

    public static readonly CString SDL_HINT_WAVE_CHUNK_LIMIT = (CString)"SDL_WAVE_CHUNK_LIMIT"u8;

    public static readonly CString SDL_HINT_WAVE_FACT_CHUNK = (CString)"SDL_WAVE_FACT_CHUNK"u8;

    public static readonly CString SDL_HINT_WAVE_RIFF_CHUNK_SIZE = (CString)"SDL_WAVE_RIFF_CHUNK_SIZE"u8;

    public static readonly CString SDL_HINT_WAVE_TRUNCATION = (CString)"SDL_WAVE_TRUNCATION"u8;

    public static readonly CString SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED = (CString)"SDL_WINDOW_ACTIVATE_WHEN_RAISED"u8;

    public static readonly CString SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN = (CString)"SDL_WINDOW_ACTIVATE_WHEN_SHOWN"u8;

    public static readonly CString SDL_HINT_WINDOW_ALLOW_TOPMOST = (CString)"SDL_WINDOW_ALLOW_TOPMOST"u8;

    public static readonly CString SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = (CString)"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"u8;

    public static readonly CString SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 = (CString)"SDL_WINDOWS_CLOSE_ON_ALT_F4"u8;

    public static readonly CString SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS = (CString)"SDL_WINDOWS_ENABLE_MENU_MNEMONICS"u8;

    public static readonly CString SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = (CString)"SDL_WINDOWS_ENABLE_MESSAGELOOP"u8;

    public static readonly CString SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE = (CString)"SDL_WINDOWS_ERASE_BACKGROUND_MODE"u8;

    public static readonly CString SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = (CString)"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"u8;

    public static readonly CString SDL_HINT_WINDOWS_GAMEINPUT = (CString)"SDL_WINDOWS_GAMEINPUT"u8;

    public static readonly CString SDL_HINT_WINDOWS_INTRESOURCE_ICON = (CString)"SDL_WINDOWS_INTRESOURCE_ICON"u8;

    public static readonly CString SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = (CString)"SDL_WINDOWS_INTRESOURCE_ICON_SMALL"u8;

    public static readonly CString SDL_HINT_WINDOWS_RAW_KEYBOARD = (CString)"SDL_WINDOWS_RAW_KEYBOARD"u8;

    public static readonly CString SDL_HINT_WINDOWS_USE_D3D9EX = (CString)"SDL_WINDOWS_USE_D3D9EX"u8;

    public static readonly CString SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = (CString)"SDL_X11_FORCE_OVERRIDE_REDIRECT"u8;

    public static readonly CString SDL_HINT_X11_WINDOW_TYPE = (CString)"SDL_X11_WINDOW_TYPE"u8;

    public static readonly CString SDL_HINT_X11_XCB_LIBRARY = (CString)"SDL_X11_XCB_LIBRARY"u8;

    public static readonly CString SDL_HINT_XINPUT_ENABLED = (CString)"SDL_XINPUT_ENABLED"u8;

    public static readonly ulong SDL_ICONV_E2BIG = (ulong)18446744073709551614;

    public static readonly ulong SDL_ICONV_EILSEQ = (ulong)18446744073709551613;

    public static readonly ulong SDL_ICONV_EINVAL = (ulong)18446744073709551612;

    public static readonly ulong SDL_ICONV_ERROR = (ulong)18446744073709551615;

    public static readonly uint SDL_INIT_AUDIO = (uint)16;

    public static readonly uint SDL_INIT_CAMERA = (uint)65536;

    public static readonly uint SDL_INIT_EVENTS = (uint)16384;

    public static readonly uint SDL_INIT_GAMEPAD = (uint)8192;

    public static readonly uint SDL_INIT_HAPTIC = (uint)4096;

    public static readonly uint SDL_INIT_JOYSTICK = (uint)512;

    public static readonly uint SDL_INIT_SENSOR = (uint)32768;

    public static readonly uint SDL_INIT_VIDEO = (uint)32;

    public static readonly int SDL_INVALID_UNICODE_CODEPOINT = (int)65533;

    public static readonly int SDL_JOYSTICK_AXIS_MAX = (int)32767;

    public static readonly int SDL_JOYSTICK_AXIS_MIN = (int)-32768;

    public static readonly uint SDL_KMOD_ALT = (uint)768;

    public static readonly uint SDL_KMOD_CAPS = (uint)8192;

    public static readonly uint SDL_KMOD_CTRL = (uint)192;

    public static readonly uint SDL_KMOD_GUI = (uint)3072;

    public static readonly uint SDL_KMOD_LALT = (uint)256;

    public static readonly uint SDL_KMOD_LCTRL = (uint)64;

    public static readonly uint SDL_KMOD_LEVEL5 = (uint)4;

    public static readonly uint SDL_KMOD_LGUI = (uint)1024;

    public static readonly uint SDL_KMOD_LSHIFT = (uint)1;

    public static readonly uint SDL_KMOD_MODE = (uint)16384;

    public static readonly uint SDL_KMOD_NONE = (uint)0;

    public static readonly uint SDL_KMOD_NUM = (uint)4096;

    public static readonly uint SDL_KMOD_RALT = (uint)512;

    public static readonly uint SDL_KMOD_RCTRL = (uint)128;

    public static readonly uint SDL_KMOD_RGUI = (uint)2048;

    public static readonly uint SDL_KMOD_RSHIFT = (uint)2;

    public static readonly uint SDL_KMOD_SCROLL = (uint)32768;

    public static readonly uint SDL_KMOD_SHIFT = (uint)3;

    public static readonly int SDL_MAJOR_VERSION = (int)3;

    public static readonly short SDL_MAX_SINT16 = (short)32767;

    public static readonly int SDL_MAX_SINT32 = (int)2147483647;

    public static readonly sbyte SDL_MAX_SINT8 = (sbyte)127;

    public static readonly ushort SDL_MAX_UINT16 = (ushort)65535;

    public static readonly uint SDL_MAX_UINT32 = (uint)4294967295;

    public static readonly ulong SDL_MAX_UINT64 = (ulong)18446744073709551615;

    public static readonly byte SDL_MAX_UINT8 = (byte)255;

    public static readonly uint SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = (uint)2;

    public static readonly uint SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = (uint)1;

    public static readonly uint SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = (uint)128;

    public static readonly uint SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = (uint)256;

    public static readonly uint SDL_MESSAGEBOX_ERROR = (uint)16;

    public static readonly uint SDL_MESSAGEBOX_INFORMATION = (uint)64;

    public static readonly uint SDL_MESSAGEBOX_WARNING = (uint)32;

    public static readonly int SDL_MICRO_VERSION = (int)11;

    public static readonly short SDL_MIN_SINT16 = (short)-32768;

    public static readonly int SDL_MIN_SINT32 = (int)-2147483648;

    public static readonly sbyte SDL_MIN_SINT8 = (sbyte)-128;

    public static readonly ushort SDL_MIN_UINT16 = (ushort)0;

    public static readonly uint SDL_MIN_UINT32 = (uint)0;

    public static readonly ulong SDL_MIN_UINT64 = (ulong)0;

    public static readonly byte SDL_MIN_UINT8 = (byte)0;

    public static readonly int SDL_MINOR_VERSION = (int)1;

    public static readonly SDL_TouchID SDL_MOUSE_TOUCHID = (SDL_TouchID)18446744073709551615;

    public static readonly int SDL_MS_PER_SECOND = (int)1000;

    public static readonly int SDL_NS_PER_MS = (int)1000000;

    public static readonly long SDL_NS_PER_SECOND = (long)1000000000;

    public static readonly int SDL_NS_PER_US = (int)1000;

    public static readonly int SDL_NULL_WHILE_LOOP_CONDITION = (int)0;

    public static readonly uint SDL_PEN_INPUT_BUTTON_1 = (uint)2;

    public static readonly uint SDL_PEN_INPUT_BUTTON_2 = (uint)4;

    public static readonly uint SDL_PEN_INPUT_BUTTON_3 = (uint)8;

    public static readonly uint SDL_PEN_INPUT_BUTTON_4 = (uint)16;

    public static readonly uint SDL_PEN_INPUT_BUTTON_5 = (uint)32;

    public static readonly uint SDL_PEN_INPUT_DOWN = (uint)1;

    public static readonly uint SDL_PEN_INPUT_ERASER_TIP = (uint)1073741824;

    public static readonly SDL_MouseID SDL_PEN_MOUSEID = (SDL_MouseID)4294967294;

    public static readonly SDL_TouchID SDL_PEN_TOUCHID = (SDL_TouchID)18446744073709551614;

    public static readonly double SDL_PI_D = (double)3.141592653589793;

    public static readonly float SDL_PI_F = (float)3.1415927410125732;

    public static readonly CString SDL_PROP_APP_METADATA_COPYRIGHT_STRING = (CString)"SDL.app.metadata.copyright"u8;

    public static readonly CString SDL_PROP_APP_METADATA_CREATOR_STRING = (CString)"SDL.app.metadata.creator"u8;

    public static readonly CString SDL_PROP_APP_METADATA_IDENTIFIER_STRING = (CString)"SDL.app.metadata.identifier"u8;

    public static readonly CString SDL_PROP_APP_METADATA_NAME_STRING = (CString)"SDL.app.metadata.name"u8;

    public static readonly CString SDL_PROP_APP_METADATA_TYPE_STRING = (CString)"SDL.app.metadata.type"u8;

    public static readonly CString SDL_PROP_APP_METADATA_URL_STRING = (CString)"SDL.app.metadata.url"u8;

    public static readonly CString SDL_PROP_APP_METADATA_VERSION_STRING = (CString)"SDL.app.metadata.version"u8;

    public static readonly CString SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN = (CString)"SDL.display.HDR_enabled"u8;

    public static readonly CString SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER = (CString)"SDL.display.KMSDRM.panel_orientation"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_ACCEPT_STRING = (CString)"SDL.filedialog.accept"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_CANCEL_STRING = (CString)"SDL.filedialog.cancel"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_FILTERS_POINTER = (CString)"SDL.filedialog.filters"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_LOCATION_STRING = (CString)"SDL.filedialog.location"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_MANY_BOOLEAN = (CString)"SDL.filedialog.many"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER = (CString)"SDL.filedialog.nfilters"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_TITLE_STRING = (CString)"SDL.filedialog.title"u8;

    public static readonly CString SDL_PROP_FILE_DIALOG_WINDOW_POINTER = (CString)"SDL.filedialog.window"u8;

    public static readonly CString SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN = (CString)"SDL.joystick.cap.mono_led"u8;

    public static readonly CString SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN = (CString)"SDL.joystick.cap.player_led"u8;

    public static readonly CString SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN = (CString)"SDL.joystick.cap.rgb_led"u8;

    public static readonly CString SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN = (CString)"SDL.joystick.cap.rumble"u8;

    public static readonly CString SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN = (CString)"SDL.joystick.cap.trigger_rumble"u8;

    public static readonly CString SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER = (CString)"SDL.video.wayland.wl_display"u8;

    public static readonly CString SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING = (CString)"SDL.gpu.buffer.create.name"u8;

    public static readonly CString SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING = (CString)"SDL.gpu.computepipeline.create.name"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING = (CString)"SDL.gpu.device.create.d3d12.semantic"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN = (CString)"SDL.gpu.device.create.debugmode"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING = (CString)"SDL.gpu.device.create.name"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN = (CString)"SDL.gpu.device.create.preferlowpower"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN = (CString)"SDL.gpu.device.create.shaders.dxbc"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN = (CString)"SDL.gpu.device.create.shaders.dxil"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN = (CString)"SDL.gpu.device.create.shaders.metallib"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN = (CString)"SDL.gpu.device.create.shaders.msl"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN = (CString)"SDL.gpu.device.create.shaders.private"u8;

    public static readonly CString SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN = (CString)"SDL.gpu.device.create.shaders.spirv"u8;

    public static readonly CString SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING = (CString)"SDL.gpu.graphicspipeline.create.name"u8;

    public static readonly CString SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING = (CString)"SDL.gpu.sampler.create.name"u8;

    public static readonly CString SDL_PROP_GPU_SHADER_CREATE_NAME_STRING = (CString)"SDL.gpu.shader.create.name"u8;

    public static readonly CString SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT = (CString)"SDL.gpu.texture.create.d3d12.clear.a"u8;

    public static readonly CString SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT = (CString)"SDL.gpu.texture.create.d3d12.clear.b"u8;

    public static readonly CString SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT = (CString)"SDL.gpu.texture.create.d3d12.clear.depth"u8;

    public static readonly CString SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT = (CString)"SDL.gpu.texture.create.d3d12.clear.g"u8;

    public static readonly CString SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT = (CString)"SDL.gpu.texture.create.d3d12.clear.r"u8;

    public static readonly CString SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_UINT8 = (CString)"SDL.gpu.texture.create.d3d12.clear.stencil"u8;

    public static readonly CString SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING = (CString)"SDL.gpu.texture.create.name"u8;

    public static readonly CString SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING = (CString)"SDL.gpu.transferbuffer.create.name"u8;

    public static readonly CString SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER = (CString)"SDL.iostream.android.aasset"u8;

    public static readonly CString SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER = (CString)"SDL.iostream.dynamic.chunksize"u8;

    public static readonly CString SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER = (CString)"SDL.iostream.dynamic.memory"u8;

    public static readonly CString SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER = (CString)"SDL.iostream.file_descriptor"u8;

    public static readonly CString SDL_PROP_IOSTREAM_MEMORY_POINTER = (CString)"SDL.iostream.memory.base"u8;

    public static readonly CString SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER = (CString)"SDL.iostream.memory.size"u8;

    public static readonly CString SDL_PROP_IOSTREAM_STDIO_FILE_POINTER = (CString)"SDL.iostream.stdio.file"u8;

    public static readonly CString SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER = (CString)"SDL.iostream.windows.handle"u8;

    public static readonly CString SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN = (CString)"SDL.joystick.cap.mono_led"u8;

    public static readonly CString SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN = (CString)"SDL.joystick.cap.player_led"u8;

    public static readonly CString SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN = (CString)"SDL.joystick.cap.rgb_led"u8;

    public static readonly CString SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN = (CString)"SDL.joystick.cap.rumble"u8;

    public static readonly CString SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN = (CString)"SDL.joystick.cap.trigger_rumble"u8;

    public static readonly CString SDL_PROP_PROCESS_BACKGROUND_BOOLEAN = (CString)"SDL.process.background"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_ARGS_POINTER = (CString)"SDL.process.create.args"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN = (CString)"SDL.process.create.background"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER = (CString)"SDL.process.create.environment"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_STDERR_NUMBER = (CString)"SDL.process.create.stderr_option"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_STDERR_POINTER = (CString)"SDL.process.create.stderr_source"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN = (CString)"SDL.process.create.stderr_to_stdout"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_STDIN_NUMBER = (CString)"SDL.process.create.stdin_option"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_STDIN_POINTER = (CString)"SDL.process.create.stdin_source"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER = (CString)"SDL.process.create.stdout_option"u8;

    public static readonly CString SDL_PROP_PROCESS_CREATE_STDOUT_POINTER = (CString)"SDL.process.create.stdout_source"u8;

    public static readonly CString SDL_PROP_PROCESS_PID_NUMBER = (CString)"SDL.process.pid"u8;

    public static readonly CString SDL_PROP_PROCESS_STDERR_POINTER = (CString)"SDL.process.stderr"u8;

    public static readonly CString SDL_PROP_PROCESS_STDIN_POINTER = (CString)"SDL.process.stdin"u8;

    public static readonly CString SDL_PROP_PROCESS_STDOUT_POINTER = (CString)"SDL.process.stdout"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_NAME_STRING = (CString)"SDL.renderer.create.name"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER = (CString)"SDL.renderer.create.output_colorspace"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER = (CString)"SDL.renderer.create.present_vsync"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_SURFACE_POINTER = (CString)"SDL.renderer.create.surface"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER = (CString)"SDL.renderer.create.vulkan.device"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = (CString)"SDL.renderer.create.vulkan.graphics_queue_family_index"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER = (CString)"SDL.renderer.create.vulkan.instance"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER = (CString)"SDL.renderer.create.vulkan.physical_device"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = (CString)"SDL.renderer.create.vulkan.present_queue_family_index"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER = (CString)"SDL.renderer.create.vulkan.surface"u8;

    public static readonly CString SDL_PROP_RENDERER_CREATE_WINDOW_POINTER = (CString)"SDL.renderer.create.window"u8;

    public static readonly CString SDL_PROP_RENDERER_D3D11_DEVICE_POINTER = (CString)"SDL.renderer.d3d11.device"u8;

    public static readonly CString SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER = (CString)"SDL.renderer.d3d11.swap_chain"u8;

    public static readonly CString SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER = (CString)"SDL.renderer.d3d12.command_queue"u8;

    public static readonly CString SDL_PROP_RENDERER_D3D12_DEVICE_POINTER = (CString)"SDL.renderer.d3d12.device"u8;

    public static readonly CString SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER = (CString)"SDL.renderer.d3d12.swap_chain"u8;

    public static readonly CString SDL_PROP_RENDERER_D3D9_DEVICE_POINTER = (CString)"SDL.renderer.d3d9.device"u8;

    public static readonly CString SDL_PROP_RENDERER_GPU_DEVICE_POINTER = (CString)"SDL.renderer.gpu.device"u8;

    public static readonly CString SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN = (CString)"SDL.renderer.HDR_enabled"u8;

    public static readonly CString SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT = (CString)"SDL.renderer.HDR_headroom"u8;

    public static readonly CString SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER = (CString)"SDL.renderer.max_texture_size"u8;

    public static readonly CString SDL_PROP_RENDERER_NAME_STRING = (CString)"SDL.renderer.name"u8;

    public static readonly CString SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER = (CString)"SDL.renderer.output_colorspace"u8;

    public static readonly CString SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT = (CString)"SDL.renderer.SDR_white_point"u8;

    public static readonly CString SDL_PROP_RENDERER_SURFACE_POINTER = (CString)"SDL.renderer.surface"u8;

    public static readonly CString SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER = (CString)"SDL.renderer.texture_formats"u8;

    public static readonly CString SDL_PROP_RENDERER_VSYNC_NUMBER = (CString)"SDL.renderer.vsync"u8;

    public static readonly CString SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER = (CString)"SDL.renderer.vulkan.device"u8;

    public static readonly CString SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = (CString)"SDL.renderer.vulkan.graphics_queue_family_index"u8;

    public static readonly CString SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER = (CString)"SDL.renderer.vulkan.instance"u8;

    public static readonly CString SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER = (CString)"SDL.renderer.vulkan.physical_device"u8;

    public static readonly CString SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = (CString)"SDL.renderer.vulkan.present_queue_family_index"u8;

    public static readonly CString SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER = (CString)"SDL.renderer.vulkan.surface"u8;

    public static readonly CString SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER = (CString)"SDL.renderer.vulkan.swapchain_image_count"u8;

    public static readonly CString SDL_PROP_RENDERER_WINDOW_POINTER = (CString)"SDL.renderer.window"u8;

    public static readonly CString SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT = (CString)"SDL.surface.HDR_headroom"u8;

    public static readonly CString SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT = (CString)"SDL.surface.SDR_white_point"u8;

    public static readonly CString SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING = (CString)"SDL.surface.tonemap"u8;

    public static readonly CString SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER = (CString)"SDL.textinput.android.inputtype"u8;

    public static readonly CString SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN = (CString)"SDL.textinput.autocorrect"u8;

    public static readonly CString SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER = (CString)"SDL.textinput.capitalization"u8;

    public static readonly CString SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN = (CString)"SDL.textinput.multiline"u8;

    public static readonly CString SDL_PROP_TEXTINPUT_TYPE_NUMBER = (CString)"SDL.textinput.type"u8;

    public static readonly CString SDL_PROP_TEXTURE_ACCESS_NUMBER = (CString)"SDL.texture.access"u8;

    public static readonly CString SDL_PROP_TEXTURE_COLORSPACE_NUMBER = (CString)"SDL.texture.colorspace"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER = (CString)"SDL.texture.create.access"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER = (CString)"SDL.texture.create.colorspace"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER = (CString)"SDL.texture.create.d3d11.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER = (CString)"SDL.texture.create.d3d11.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER = (CString)"SDL.texture.create.d3d11.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER = (CString)"SDL.texture.create.d3d12.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER = (CString)"SDL.texture.create.d3d12.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER = (CString)"SDL.texture.create.d3d12.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER = (CString)"SDL.texture.create.format"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT = (CString)"SDL.texture.create.HDR_headroom"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER = (CString)"SDL.texture.create.height"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER = (CString)"SDL.texture.create.metal.pixelbuffer"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER = (CString)"SDL.texture.create.opengl.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER = (CString)"SDL.texture.create.opengl.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER = (CString)"SDL.texture.create.opengl.texture_uv"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER = (CString)"SDL.texture.create.opengl.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER = (CString)"SDL.texture.create.opengles2.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER = (CString)"SDL.texture.create.opengles2.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER = (CString)"SDL.texture.create.opengles2.texture_uv"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER = (CString)"SDL.texture.create.opengles2.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT = (CString)"SDL.texture.create.SDR_white_point"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER = (CString)"SDL.texture.create.vulkan.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER = (CString)"SDL.texture.create.width"u8;

    public static readonly CString SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER = (CString)"SDL.texture.d3d11.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER = (CString)"SDL.texture.d3d11.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER = (CString)"SDL.texture.d3d11.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER = (CString)"SDL.texture.d3d12.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER = (CString)"SDL.texture.d3d12.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER = (CString)"SDL.texture.d3d12.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_FORMAT_NUMBER = (CString)"SDL.texture.format"u8;

    public static readonly CString SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT = (CString)"SDL.texture.HDR_headroom"u8;

    public static readonly CString SDL_PROP_TEXTURE_HEIGHT_NUMBER = (CString)"SDL.texture.height"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT = (CString)"SDL.texture.opengl.tex_h"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT = (CString)"SDL.texture.opengl.tex_w"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER = (CString)"SDL.texture.opengl.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER = (CString)"SDL.texture.opengl.target"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER = (CString)"SDL.texture.opengl.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER = (CString)"SDL.texture.opengl.texture_uv"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER = (CString)"SDL.texture.opengl.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER = (CString)"SDL.texture.opengles2.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER = (CString)"SDL.texture.opengles2.target"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER = (CString)"SDL.texture.opengles2.texture_u"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER = (CString)"SDL.texture.opengles2.texture_uv"u8;

    public static readonly CString SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER = (CString)"SDL.texture.opengles2.texture_v"u8;

    public static readonly CString SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT = (CString)"SDL.texture.SDR_white_point"u8;

    public static readonly CString SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER = (CString)"SDL.texture.vulkan.texture"u8;

    public static readonly CString SDL_PROP_TEXTURE_WIDTH_NUMBER = (CString)"SDL.texture.width"u8;

    public static readonly CString SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER = (CString)"SDL.window.android.surface"u8;

    public static readonly CString SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER = (CString)"SDL.window.android.window"u8;

    public static readonly CString SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER = (CString)"SDL.window.cocoa.metal_view_tag"u8;

    public static readonly CString SDL_PROP_WINDOW_COCOA_WINDOW_POINTER = (CString)"SDL.window.cocoa.window"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN = (CString)"SDL.window.create.always_on_top"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN = (CString)"SDL.window.create.borderless"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER = (CString)"SDL.window.create.cocoa.view"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER = (CString)"SDL.window.create.cocoa.window"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN = (CString)"SDL.window.create.external_graphics_context"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER = (CString)"SDL.window.create.flags"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN = (CString)"SDL.window.create.focusable"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN = (CString)"SDL.window.create.fullscreen"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER = (CString)"SDL.window.create.height"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN = (CString)"SDL.window.create.hidden"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN = (CString)"SDL.window.create.high_pixel_density"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN = (CString)"SDL.window.create.maximized"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN = (CString)"SDL.window.create.menu"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN = (CString)"SDL.window.create.metal"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN = (CString)"SDL.window.create.minimized"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN = (CString)"SDL.window.create.modal"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN = (CString)"SDL.window.create.mouse_grabbed"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN = (CString)"SDL.window.create.opengl"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_PARENT_POINTER = (CString)"SDL.window.create.parent"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN = (CString)"SDL.window.create.resizable"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_TITLE_STRING = (CString)"SDL.window.create.title"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN = (CString)"SDL.window.create.tooltip"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN = (CString)"SDL.window.create.transparent"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN = (CString)"SDL.window.create.utility"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN = (CString)"SDL.window.create.vulkan"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN = (CString)"SDL.window.create.wayland.create_egl_window"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN = (CString)"SDL.window.create.wayland.surface_role_custom"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER = (CString)"SDL.window.create.wayland.wl_surface"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER = (CString)"SDL.window.create.width"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER = (CString)"SDL.window.create.win32.hwnd"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER = (CString)"SDL.window.create.win32.pixel_format_hwnd"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_X_NUMBER = (CString)"SDL.window.create.x"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER = (CString)"SDL.window.create.x11.window"u8;

    public static readonly CString SDL_PROP_WINDOW_CREATE_Y_NUMBER = (CString)"SDL.window.create.y"u8;

    public static readonly CString SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN = (CString)"SDL.window.HDR_enabled"u8;

    public static readonly CString SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT = (CString)"SDL.window.HDR_headroom"u8;

    public static readonly CString SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER = (CString)"SDL.window.kmsdrm.dev_index"u8;

    public static readonly CString SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER = (CString)"SDL.window.kmsdrm.drm_fd"u8;

    public static readonly CString SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER = (CString)"SDL.window.kmsdrm.gbm_dev"u8;

    public static readonly CString SDL_PROP_WINDOW_OPENVR_OVERLAY_ID = (CString)"SDL.window.openvr.overlay_id"u8;

    public static readonly CString SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT = (CString)"SDL.window.SDR_white_level"u8;

    public static readonly CString SDL_PROP_WINDOW_SHAPE_POINTER = (CString)"SDL.window.shape"u8;

    public static readonly CString SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER = (CString)"SDL.window.uikit.metal_view_tag"u8;

    public static readonly CString SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER = (CString)"SDL.window.uikit.opengl.framebuffer"u8;

    public static readonly CString SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER = (CString)"SDL.window.uikit.opengl.renderbuffer"u8;

    public static readonly CString SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER = (CString)"SDL.window.uikit.opengl.resolve_framebuffer"u8;

    public static readonly CString SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER = (CString)"SDL.window.uikit.window"u8;

    public static readonly CString SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER = (CString)"SDL.window.vivante.display"u8;

    public static readonly CString SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER = (CString)"SDL.window.vivante.surface"u8;

    public static readonly CString SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER = (CString)"SDL.window.vivante.window"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER = (CString)"SDL.window.wayland.display"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER = (CString)"SDL.window.wayland.egl_window"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER = (CString)"SDL.window.wayland.surface"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER = (CString)"SDL.window.wayland.viewport"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER = (CString)"SDL.window.wayland.xdg_popup"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER = (CString)"SDL.window.wayland.xdg_positioner"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER = (CString)"SDL.window.wayland.xdg_surface"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING = (CString)"SDL.window.wayland.xdg_toplevel_export_handle"u8;

    public static readonly CString SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER = (CString)"SDL.window.wayland.xdg_toplevel"u8;

    public static readonly CString SDL_PROP_WINDOW_WIN32_HDC_POINTER = (CString)"SDL.window.win32.hdc"u8;

    public static readonly CString SDL_PROP_WINDOW_WIN32_HWND_POINTER = (CString)"SDL.window.win32.hwnd"u8;

    public static readonly CString SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER = (CString)"SDL.window.win32.instance"u8;

    public static readonly CString SDL_PROP_WINDOW_X11_DISPLAY_POINTER = (CString)"SDL.window.x11.display"u8;

    public static readonly CString SDL_PROP_WINDOW_X11_SCREEN_NUMBER = (CString)"SDL.window.x11.screen"u8;

    public static readonly CString SDL_PROP_WINDOW_X11_WINDOW_NUMBER = (CString)"SDL.window.x11.window"u8;

    public static readonly int SDL_RENDERER_VSYNC_ADAPTIVE = (int)-1;

    public static readonly int SDL_RENDERER_VSYNC_DISABLED = (int)0;

    public static readonly ulong SDL_SIZE_MAX = (ulong)18446744073709551615;

    public static readonly CString SDL_SOFTWARE_RENDERER = (CString)"software"u8;

    public static readonly float SDL_STANDARD_GRAVITY = (float)9.806650161743164;

    public static readonly uint SDL_SURFACE_LOCK_NEEDED = (uint)2;

    public static readonly uint SDL_SURFACE_LOCKED = (uint)4;

    public static readonly uint SDL_SURFACE_PREALLOCATED = (uint)1;

    public static readonly uint SDL_SURFACE_SIMD_ALIGNED = (uint)8;

    public static readonly SDL_MouseID SDL_TOUCH_MOUSEID = (SDL_MouseID)4294967295;

    public static readonly uint SDL_TRAYENTRY_BUTTON = (uint)1;

    public static readonly uint SDL_TRAYENTRY_CHECKBOX = (uint)2;

    public static readonly uint SDL_TRAYENTRY_CHECKED = (uint)1073741824;

    public static readonly uint SDL_TRAYENTRY_DISABLED = (uint)2147483648;

    public static readonly uint SDL_TRAYENTRY_SUBMENU = (uint)4;

    public static readonly int SDL_US_PER_SECOND = (int)1000000;

    public static readonly int SDL_VERSION = (int)3001011;

    public static readonly ulong SDL_WINDOW_ALWAYS_ON_TOP = (ulong)65536;

    public static readonly ulong SDL_WINDOW_BORDERLESS = (ulong)16;

    public static readonly ulong SDL_WINDOW_EXTERNAL = (ulong)2048;

    public static readonly ulong SDL_WINDOW_FULLSCREEN = (ulong)1;

    public static readonly ulong SDL_WINDOW_HIDDEN = (ulong)8;

    public static readonly ulong SDL_WINDOW_HIGH_PIXEL_DENSITY = (ulong)8192;

    public static readonly ulong SDL_WINDOW_INPUT_FOCUS = (ulong)512;

    public static readonly ulong SDL_WINDOW_KEYBOARD_GRABBED = (ulong)1048576;

    public static readonly ulong SDL_WINDOW_MAXIMIZED = (ulong)128;

    public static readonly ulong SDL_WINDOW_METAL = (ulong)536870912;

    public static readonly ulong SDL_WINDOW_MINIMIZED = (ulong)64;

    public static readonly ulong SDL_WINDOW_MODAL = (ulong)4096;

    public static readonly ulong SDL_WINDOW_MOUSE_CAPTURE = (ulong)16384;

    public static readonly ulong SDL_WINDOW_MOUSE_FOCUS = (ulong)1024;

    public static readonly ulong SDL_WINDOW_MOUSE_GRABBED = (ulong)256;

    public static readonly ulong SDL_WINDOW_MOUSE_RELATIVE_MODE = (ulong)32768;

    public static readonly ulong SDL_WINDOW_NOT_FOCUSABLE = (ulong)2147483648;

    public static readonly ulong SDL_WINDOW_OCCLUDED = (ulong)4;

    public static readonly ulong SDL_WINDOW_OPENGL = (ulong)2;

    public static readonly ulong SDL_WINDOW_POPUP_MENU = (ulong)524288;

    public static readonly ulong SDL_WINDOW_RESIZABLE = (ulong)32;

    public static readonly int SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE = (int)-1;

    public static readonly int SDL_WINDOW_SURFACE_VSYNC_DISABLED = (int)0;

    public static readonly ulong SDL_WINDOW_TOOLTIP = (ulong)262144;

    public static readonly ulong SDL_WINDOW_TRANSPARENT = (ulong)1073741824;

    public static readonly ulong SDL_WINDOW_UTILITY = (ulong)131072;

    public static readonly ulong SDL_WINDOW_VULKAN = (ulong)268435456;

    public static readonly uint SDL_WINDOWPOS_CENTERED = (uint)805240832;

    public static readonly uint SDL_WINDOWPOS_CENTERED_MASK = (uint)805240832;

    public static readonly uint SDL_WINDOWPOS_UNDEFINED = (uint)536805376;

    public static readonly uint SDL_WINDOWPOS_UNDEFINED_MASK = (uint)536805376;

    public static readonly uint SDLK_0 = (uint)48;

    public static readonly uint SDLK_1 = (uint)49;

    public static readonly uint SDLK_2 = (uint)50;

    public static readonly uint SDLK_3 = (uint)51;

    public static readonly uint SDLK_4 = (uint)52;

    public static readonly uint SDLK_5 = (uint)53;

    public static readonly uint SDLK_6 = (uint)54;

    public static readonly uint SDLK_7 = (uint)55;

    public static readonly uint SDLK_8 = (uint)56;

    public static readonly uint SDLK_9 = (uint)57;

    public static readonly uint SDLK_A = (uint)97;

    public static readonly uint SDLK_AC_BACK = (uint)1073742106;

    public static readonly uint SDLK_AC_BOOKMARKS = (uint)1073742110;

    public static readonly uint SDLK_AC_CLOSE = (uint)1073742099;

    public static readonly uint SDLK_AC_EXIT = (uint)1073742100;

    public static readonly uint SDLK_AC_FORWARD = (uint)1073742107;

    public static readonly uint SDLK_AC_HOME = (uint)1073742105;

    public static readonly uint SDLK_AC_NEW = (uint)1073742097;

    public static readonly uint SDLK_AC_OPEN = (uint)1073742098;

    public static readonly uint SDLK_AC_PRINT = (uint)1073742102;

    public static readonly uint SDLK_AC_PROPERTIES = (uint)1073742103;

    public static readonly uint SDLK_AC_REFRESH = (uint)1073742109;

    public static readonly uint SDLK_AC_SAVE = (uint)1073742101;

    public static readonly uint SDLK_AC_SEARCH = (uint)1073742104;

    public static readonly uint SDLK_AC_STOP = (uint)1073742108;

    public static readonly uint SDLK_AGAIN = (uint)1073741945;

    public static readonly uint SDLK_ALTERASE = (uint)1073741977;

    public static readonly uint SDLK_AMPERSAND = (uint)38;

    public static readonly uint SDLK_APOSTROPHE = (uint)39;

    public static readonly uint SDLK_APPLICATION = (uint)1073741925;

    public static readonly uint SDLK_ASTERISK = (uint)42;

    public static readonly uint SDLK_AT = (uint)64;

    public static readonly uint SDLK_B = (uint)98;

    public static readonly uint SDLK_BACKSLASH = (uint)92;

    public static readonly uint SDLK_BACKSPACE = (uint)8;

    public static readonly uint SDLK_C = (uint)99;

    public static readonly uint SDLK_CALL = (uint)1073742113;

    public static readonly uint SDLK_CANCEL = (uint)1073741979;

    public static readonly uint SDLK_CAPSLOCK = (uint)1073741881;

    public static readonly uint SDLK_CARET = (uint)94;

    public static readonly uint SDLK_CHANNEL_DECREMENT = (uint)1073742085;

    public static readonly uint SDLK_CHANNEL_INCREMENT = (uint)1073742084;

    public static readonly uint SDLK_CLEAR = (uint)1073741980;

    public static readonly uint SDLK_CLEARAGAIN = (uint)1073741986;

    public static readonly uint SDLK_COLON = (uint)58;

    public static readonly uint SDLK_COMMA = (uint)44;

    public static readonly uint SDLK_COPY = (uint)1073741948;

    public static readonly uint SDLK_CRSEL = (uint)1073741987;

    public static readonly uint SDLK_CURRENCYSUBUNIT = (uint)1073742005;

    public static readonly uint SDLK_CURRENCYUNIT = (uint)1073742004;

    public static readonly uint SDLK_CUT = (uint)1073741947;

    public static readonly uint SDLK_D = (uint)100;

    public static readonly uint SDLK_DBLAPOSTROPHE = (uint)34;

    public static readonly uint SDLK_DECIMALSEPARATOR = (uint)1073742003;

    public static readonly uint SDLK_DELETE = (uint)127;

    public static readonly uint SDLK_DOLLAR = (uint)36;

    public static readonly uint SDLK_DOWN = (uint)1073741905;

    public static readonly uint SDLK_E = (uint)101;

    public static readonly uint SDLK_END = (uint)1073741901;

    public static readonly uint SDLK_ENDCALL = (uint)1073742114;

    public static readonly uint SDLK_EQUALS = (uint)61;

    public static readonly uint SDLK_ESCAPE = (uint)27;

    public static readonly uint SDLK_EXCLAIM = (uint)33;

    public static readonly uint SDLK_EXECUTE = (uint)1073741940;

    public static readonly uint SDLK_EXSEL = (uint)1073741988;

    public static readonly uint SDLK_EXTENDED_MASK = (uint)536870912;

    public static readonly uint SDLK_F = (uint)102;

    public static readonly uint SDLK_F1 = (uint)1073741882;

    public static readonly uint SDLK_F10 = (uint)1073741891;

    public static readonly uint SDLK_F11 = (uint)1073741892;

    public static readonly uint SDLK_F12 = (uint)1073741893;

    public static readonly uint SDLK_F13 = (uint)1073741928;

    public static readonly uint SDLK_F14 = (uint)1073741929;

    public static readonly uint SDLK_F15 = (uint)1073741930;

    public static readonly uint SDLK_F16 = (uint)1073741931;

    public static readonly uint SDLK_F17 = (uint)1073741932;

    public static readonly uint SDLK_F18 = (uint)1073741933;

    public static readonly uint SDLK_F19 = (uint)1073741934;

    public static readonly uint SDLK_F2 = (uint)1073741883;

    public static readonly uint SDLK_F20 = (uint)1073741935;

    public static readonly uint SDLK_F21 = (uint)1073741936;

    public static readonly uint SDLK_F22 = (uint)1073741937;

    public static readonly uint SDLK_F23 = (uint)1073741938;

    public static readonly uint SDLK_F24 = (uint)1073741939;

    public static readonly uint SDLK_F3 = (uint)1073741884;

    public static readonly uint SDLK_F4 = (uint)1073741885;

    public static readonly uint SDLK_F5 = (uint)1073741886;

    public static readonly uint SDLK_F6 = (uint)1073741887;

    public static readonly uint SDLK_F7 = (uint)1073741888;

    public static readonly uint SDLK_F8 = (uint)1073741889;

    public static readonly uint SDLK_F9 = (uint)1073741890;

    public static readonly uint SDLK_FIND = (uint)1073741950;

    public static readonly uint SDLK_G = (uint)103;

    public static readonly uint SDLK_GRAVE = (uint)96;

    public static readonly uint SDLK_GREATER = (uint)62;

    public static readonly uint SDLK_H = (uint)104;

    public static readonly uint SDLK_HASH = (uint)35;

    public static readonly uint SDLK_HELP = (uint)1073741941;

    public static readonly uint SDLK_HOME = (uint)1073741898;

    public static readonly uint SDLK_I = (uint)105;

    public static readonly uint SDLK_INSERT = (uint)1073741897;

    public static readonly uint SDLK_J = (uint)106;

    public static readonly uint SDLK_K = (uint)107;

    public static readonly uint SDLK_KP_0 = (uint)1073741922;

    public static readonly uint SDLK_KP_00 = (uint)1073742000;

    public static readonly uint SDLK_KP_000 = (uint)1073742001;

    public static readonly uint SDLK_KP_1 = (uint)1073741913;

    public static readonly uint SDLK_KP_2 = (uint)1073741914;

    public static readonly uint SDLK_KP_3 = (uint)1073741915;

    public static readonly uint SDLK_KP_4 = (uint)1073741916;

    public static readonly uint SDLK_KP_5 = (uint)1073741917;

    public static readonly uint SDLK_KP_6 = (uint)1073741918;

    public static readonly uint SDLK_KP_7 = (uint)1073741919;

    public static readonly uint SDLK_KP_8 = (uint)1073741920;

    public static readonly uint SDLK_KP_9 = (uint)1073741921;

    public static readonly uint SDLK_KP_A = (uint)1073742012;

    public static readonly uint SDLK_KP_AMPERSAND = (uint)1073742023;

    public static readonly uint SDLK_KP_AT = (uint)1073742030;

    public static readonly uint SDLK_KP_B = (uint)1073742013;

    public static readonly uint SDLK_KP_BACKSPACE = (uint)1073742011;

    public static readonly uint SDLK_KP_BINARY = (uint)1073742042;

    public static readonly uint SDLK_KP_C = (uint)1073742014;

    public static readonly uint SDLK_KP_CLEAR = (uint)1073742040;

    public static readonly uint SDLK_KP_CLEARENTRY = (uint)1073742041;

    public static readonly uint SDLK_KP_COLON = (uint)1073742027;

    public static readonly uint SDLK_KP_COMMA = (uint)1073741957;

    public static readonly uint SDLK_KP_D = (uint)1073742015;

    public static readonly uint SDLK_KP_DBLAMPERSAND = (uint)1073742024;

    public static readonly uint SDLK_KP_DBLVERTICALBAR = (uint)1073742026;

    public static readonly uint SDLK_KP_DECIMAL = (uint)1073742044;

    public static readonly uint SDLK_KP_DIVIDE = (uint)1073741908;

    public static readonly uint SDLK_KP_E = (uint)1073742016;

    public static readonly uint SDLK_KP_ENTER = (uint)1073741912;

    public static readonly uint SDLK_KP_EQUALS = (uint)1073741927;

    public static readonly uint SDLK_KP_EQUALSAS400 = (uint)1073741958;

    public static readonly uint SDLK_KP_EXCLAM = (uint)1073742031;

    public static readonly uint SDLK_KP_F = (uint)1073742017;

    public static readonly uint SDLK_KP_GREATER = (uint)1073742022;

    public static readonly uint SDLK_KP_HASH = (uint)1073742028;

    public static readonly uint SDLK_KP_HEXADECIMAL = (uint)1073742045;

    public static readonly uint SDLK_KP_LEFTBRACE = (uint)1073742008;

    public static readonly uint SDLK_KP_LEFTPAREN = (uint)1073742006;

    public static readonly uint SDLK_KP_LESS = (uint)1073742021;

    public static readonly uint SDLK_KP_MEMADD = (uint)1073742035;

    public static readonly uint SDLK_KP_MEMCLEAR = (uint)1073742034;

    public static readonly uint SDLK_KP_MEMDIVIDE = (uint)1073742038;

    public static readonly uint SDLK_KP_MEMMULTIPLY = (uint)1073742037;

    public static readonly uint SDLK_KP_MEMRECALL = (uint)1073742033;

    public static readonly uint SDLK_KP_MEMSTORE = (uint)1073742032;

    public static readonly uint SDLK_KP_MEMSUBTRACT = (uint)1073742036;

    public static readonly uint SDLK_KP_MINUS = (uint)1073741910;

    public static readonly uint SDLK_KP_MULTIPLY = (uint)1073741909;

    public static readonly uint SDLK_KP_OCTAL = (uint)1073742043;

    public static readonly uint SDLK_KP_PERCENT = (uint)1073742020;

    public static readonly uint SDLK_KP_PERIOD = (uint)1073741923;

    public static readonly uint SDLK_KP_PLUS = (uint)1073741911;

    public static readonly uint SDLK_KP_PLUSMINUS = (uint)1073742039;

    public static readonly uint SDLK_KP_POWER = (uint)1073742019;

    public static readonly uint SDLK_KP_RIGHTBRACE = (uint)1073742009;

    public static readonly uint SDLK_KP_RIGHTPAREN = (uint)1073742007;

    public static readonly uint SDLK_KP_SPACE = (uint)1073742029;

    public static readonly uint SDLK_KP_TAB = (uint)1073742010;

    public static readonly uint SDLK_KP_VERTICALBAR = (uint)1073742025;

    public static readonly uint SDLK_KP_XOR = (uint)1073742018;

    public static readonly uint SDLK_L = (uint)108;

    public static readonly uint SDLK_LALT = (uint)1073742050;

    public static readonly uint SDLK_LCTRL = (uint)1073742048;

    public static readonly uint SDLK_LEFT = (uint)1073741904;

    public static readonly uint SDLK_LEFT_TAB = (uint)536870913;

    public static readonly uint SDLK_LEFTBRACE = (uint)123;

    public static readonly uint SDLK_LEFTBRACKET = (uint)91;

    public static readonly uint SDLK_LEFTPAREN = (uint)40;

    public static readonly uint SDLK_LESS = (uint)60;

    public static readonly uint SDLK_LEVEL5_SHIFT = (uint)536870914;

    public static readonly uint SDLK_LGUI = (uint)1073742051;

    public static readonly uint SDLK_LHYPER = (uint)536870918;

    public static readonly uint SDLK_LMETA = (uint)536870916;

    public static readonly uint SDLK_LSHIFT = (uint)1073742049;

    public static readonly uint SDLK_M = (uint)109;

    public static readonly uint SDLK_MEDIA_EJECT = (uint)1073742094;

    public static readonly uint SDLK_MEDIA_FAST_FORWARD = (uint)1073742089;

    public static readonly uint SDLK_MEDIA_NEXT_TRACK = (uint)1073742091;

    public static readonly uint SDLK_MEDIA_PAUSE = (uint)1073742087;

    public static readonly uint SDLK_MEDIA_PLAY = (uint)1073742086;

    public static readonly uint SDLK_MEDIA_PLAY_PAUSE = (uint)1073742095;

    public static readonly uint SDLK_MEDIA_PREVIOUS_TRACK = (uint)1073742092;

    public static readonly uint SDLK_MEDIA_RECORD = (uint)1073742088;

    public static readonly uint SDLK_MEDIA_REWIND = (uint)1073742090;

    public static readonly uint SDLK_MEDIA_SELECT = (uint)1073742096;

    public static readonly uint SDLK_MEDIA_STOP = (uint)1073742093;

    public static readonly uint SDLK_MENU = (uint)1073741942;

    public static readonly uint SDLK_MINUS = (uint)45;

    public static readonly uint SDLK_MODE = (uint)1073742081;

    public static readonly uint SDLK_MULTI_KEY_COMPOSE = (uint)536870915;

    public static readonly uint SDLK_MUTE = (uint)1073741951;

    public static readonly uint SDLK_N = (uint)110;

    public static readonly uint SDLK_NUMLOCKCLEAR = (uint)1073741907;

    public static readonly uint SDLK_O = (uint)111;

    public static readonly uint SDLK_OPER = (uint)1073741985;

    public static readonly uint SDLK_OUT = (uint)1073741984;

    public static readonly uint SDLK_P = (uint)112;

    public static readonly uint SDLK_PAGEDOWN = (uint)1073741902;

    public static readonly uint SDLK_PAGEUP = (uint)1073741899;

    public static readonly uint SDLK_PASTE = (uint)1073741949;

    public static readonly uint SDLK_PAUSE = (uint)1073741896;

    public static readonly uint SDLK_PERCENT = (uint)37;

    public static readonly uint SDLK_PERIOD = (uint)46;

    public static readonly uint SDLK_PIPE = (uint)124;

    public static readonly uint SDLK_PLUS = (uint)43;

    public static readonly uint SDLK_PLUSMINUS = (uint)177;

    public static readonly uint SDLK_POWER = (uint)1073741926;

    public static readonly uint SDLK_PRINTSCREEN = (uint)1073741894;

    public static readonly uint SDLK_PRIOR = (uint)1073741981;

    public static readonly uint SDLK_Q = (uint)113;

    public static readonly uint SDLK_QUESTION = (uint)63;

    public static readonly uint SDLK_R = (uint)114;

    public static readonly uint SDLK_RALT = (uint)1073742054;

    public static readonly uint SDLK_RCTRL = (uint)1073742052;

    public static readonly uint SDLK_RETURN = (uint)13;

    public static readonly uint SDLK_RETURN2 = (uint)1073741982;

    public static readonly uint SDLK_RGUI = (uint)1073742055;

    public static readonly uint SDLK_RHYPER = (uint)536870919;

    public static readonly uint SDLK_RIGHT = (uint)1073741903;

    public static readonly uint SDLK_RIGHTBRACE = (uint)125;

    public static readonly uint SDLK_RIGHTBRACKET = (uint)93;

    public static readonly uint SDLK_RIGHTPAREN = (uint)41;

    public static readonly uint SDLK_RMETA = (uint)536870917;

    public static readonly uint SDLK_RSHIFT = (uint)1073742053;

    public static readonly uint SDLK_S = (uint)115;

    public static readonly uint SDLK_SCANCODE_MASK = (uint)1073741824;

    public static readonly uint SDLK_SCROLLLOCK = (uint)1073741895;

    public static readonly uint SDLK_SELECT = (uint)1073741943;

    public static readonly uint SDLK_SEMICOLON = (uint)59;

    public static readonly uint SDLK_SEPARATOR = (uint)1073741983;

    public static readonly uint SDLK_SLASH = (uint)47;

    public static readonly uint SDLK_SLEEP = (uint)1073742082;

    public static readonly uint SDLK_SOFTLEFT = (uint)1073742111;

    public static readonly uint SDLK_SOFTRIGHT = (uint)1073742112;

    public static readonly uint SDLK_SPACE = (uint)32;

    public static readonly uint SDLK_STOP = (uint)1073741944;

    public static readonly uint SDLK_SYSREQ = (uint)1073741978;

    public static readonly uint SDLK_T = (uint)116;

    public static readonly uint SDLK_TAB = (uint)9;

    public static readonly uint SDLK_THOUSANDSSEPARATOR = (uint)1073742002;

    public static readonly uint SDLK_TILDE = (uint)126;

    public static readonly uint SDLK_U = (uint)117;

    public static readonly uint SDLK_UNDERSCORE = (uint)95;

    public static readonly uint SDLK_UNDO = (uint)1073741946;

    public static readonly uint SDLK_UNKNOWN = (uint)0;

    public static readonly uint SDLK_UP = (uint)1073741906;

    public static readonly uint SDLK_V = (uint)118;

    public static readonly uint SDLK_VOLUMEDOWN = (uint)1073741953;

    public static readonly uint SDLK_VOLUMEUP = (uint)1073741952;

    public static readonly uint SDLK_W = (uint)119;

    public static readonly uint SDLK_WAKE = (uint)1073742083;

    public static readonly uint SDLK_X = (uint)120;

    public static readonly uint SDLK_Y = (uint)121;

    public static readonly uint SDLK_Z = (uint)122;

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_AssertData
    {
        [FieldOffset(0)]
        public CBool always_ignore; // size = 1

        [FieldOffset(4)]
        public uint trigger_count; // size = 4

        [FieldOffset(8)] // size = 8
        public CString _condition;

        public string condition
        {
            get
            {
                return CString.ToString(_condition);
            }
            set
            {
                _condition = CString.FromString(value);
            }
        }

        [FieldOffset(16)] // size = 8
        public CString _filename;

        public string filename
        {
            get
            {
                return CString.ToString(_filename);
            }
            set
            {
                _filename = CString.FromString(value);
            }
        }

        [FieldOffset(24)]
        public int linenum; // size = 4

        [FieldOffset(32)] // size = 8
        public CString _function;

        public string function
        {
            get
            {
                return CString.ToString(_function);
            }
            set
            {
                _function = CString.FromString(value);
            }
        }

        [FieldOffset(40)]
        public SDL_AssertData* next; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct SDL_AsyncIOOutcome
    {
        [FieldOffset(0)]
        public SDL_AsyncIO* asyncio; // size = 8

        [FieldOffset(8)]
        public SDL_AsyncIOTaskType type; // size = 4

        [FieldOffset(12)]
        public SDL_AsyncIOResult result; // size = 4

        [FieldOffset(16)]
        public void* buffer; // size = 8

        [FieldOffset(24)]
        public ulong offset; // size = 8

        [FieldOffset(32)]
        public ulong bytes_requested; // size = 8

        [FieldOffset(40)]
        public ulong bytes_transferred; // size = 8

        [FieldOffset(48)]
        public void* userdata; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_AudioDeviceEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_AudioDeviceID which; // size = 4

        [FieldOffset(20)]
        public CBool recording; // size = 1

        [FieldOffset(21)]
        public byte padding1; // size = 1

        [FieldOffset(22)]
        public byte padding2; // size = 1

        [FieldOffset(23)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_CameraDeviceEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_CameraID which; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public partial struct SDL_CameraSpec
    {
        [FieldOffset(0)]
        public SDL_PixelFormat format; // size = 4

        [FieldOffset(4)]
        public SDL_Colorspace colorspace; // size = 4

        [FieldOffset(8)]
        public int width; // size = 4

        [FieldOffset(12)]
        public int height; // size = 4

        [FieldOffset(16)]
        public int framerate_numerator; // size = 4

        [FieldOffset(20)]
        public int framerate_denominator; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_ClipboardEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public CBool owner; // size = 1

        [FieldOffset(20)]
        public int num_mime_types; // size = 4

        [FieldOffset(24)]
        public CString* mime_types; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public partial struct SDL_Color
    {
        [FieldOffset(0)]
        public byte r; // size = 1

        [FieldOffset(1)]
        public byte g; // size = 1

        [FieldOffset(2)]
        public byte b; // size = 1

        [FieldOffset(3)]
        public byte a; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_CommonEvent
    {
        [FieldOffset(0)]
        public uint type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public partial struct SDL_DateTime
    {
        [FieldOffset(0)]
        public int year; // size = 4

        [FieldOffset(4)]
        public int month; // size = 4

        [FieldOffset(8)]
        public int day; // size = 4

        [FieldOffset(12)]
        public int hour; // size = 4

        [FieldOffset(16)]
        public int minute; // size = 4

        [FieldOffset(20)]
        public int second; // size = 4

        [FieldOffset(24)]
        public int nanosecond; // size = 4

        [FieldOffset(28)]
        public int day_of_week; // size = 4

        [FieldOffset(32)]
        public int utc_offset; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_DialogFileFilter
    {
        [FieldOffset(0)] // size = 8
        public CString _name;

        public string name
        {
            get
            {
                return CString.ToString(_name);
            }
            set
            {
                _name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _pattern;

        public string pattern
        {
            get
            {
                return CString.ToString(_pattern);
            }
            set
            {
                _pattern = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_DisplayEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_DisplayID displayID; // size = 4

        [FieldOffset(20)]
        public int data1; // size = 4

        [FieldOffset(24)]
        public int data2; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_DisplayMode
    {
        [FieldOffset(0)]
        public SDL_DisplayID displayID; // size = 4

        [FieldOffset(4)]
        public SDL_PixelFormat format; // size = 4

        [FieldOffset(8)]
        public int w; // size = 4

        [FieldOffset(12)]
        public int h; // size = 4

        [FieldOffset(16)]
        public float pixel_density; // size = 4

        [FieldOffset(20)]
        public float refresh_rate; // size = 4

        [FieldOffset(24)]
        public int refresh_rate_numerator; // size = 4

        [FieldOffset(28)]
        public int refresh_rate_denominator; // size = 4

        [FieldOffset(32)]
        public SDL_DisplayModeData* @internal; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_DropEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public float x; // size = 4

        [FieldOffset(24)]
        public float y; // size = 4

        [FieldOffset(32)] // size = 8
        public CString _source;

        public string source
        {
            get
            {
                return CString.ToString(_source);
            }
            set
            {
                _source = CString.FromString(value);
            }
        }

        [FieldOffset(40)] // size = 8
        public CString _data;

        public string data
        {
            get
            {
                return CString.ToString(_data);
            }
            set
            {
                _data = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_FColor
    {
        [FieldOffset(0)]
        public float r; // size = 4

        [FieldOffset(4)]
        public float g; // size = 4

        [FieldOffset(8)]
        public float b; // size = 4

        [FieldOffset(12)]
        public float a; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_Finger
    {
        [FieldOffset(0)]
        public SDL_FingerID id; // size = 8

        [FieldOffset(8)]
        public float x; // size = 4

        [FieldOffset(12)]
        public float y; // size = 4

        [FieldOffset(16)]
        public float pressure; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public partial struct SDL_FPoint
    {
        [FieldOffset(0)]
        public float x; // size = 4

        [FieldOffset(4)]
        public float y; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_FRect
    {
        [FieldOffset(0)]
        public float x; // size = 4

        [FieldOffset(4)]
        public float y; // size = 4

        [FieldOffset(8)]
        public float w; // size = 4

        [FieldOffset(12)]
        public float h; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_GamepadAxisEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public byte axis; // size = 1

        [FieldOffset(21)]
        public byte padding1; // size = 1

        [FieldOffset(22)]
        public byte padding2; // size = 1

        [FieldOffset(23)]
        public byte padding3; // size = 1

        [FieldOffset(24)]
        public short value; // size = 2

        [FieldOffset(26)]
        public ushort padding4; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public partial struct SDL_GamepadBinding
    {
        [FieldOffset(0)]
        public SDL_GamepadBindingType input_type; // size = 4

        [FieldOffset(4)]
        public SDL_GamepadBinding_Input input; // size = 12

        [FieldOffset(16)]
        public SDL_GamepadBindingType output_type; // size = 4

        [FieldOffset(20)]
        public SDL_GamepadBinding_Output output; // size = 12

        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public partial struct SDL_GamepadBinding_Input
        {
            [FieldOffset(0)]
            public int button; // size = 4

            [FieldOffset(0)]
            public SDL_GamepadBinding_Input_Axis axis; // size = 12

            [FieldOffset(0)]
            public SDL_GamepadBinding_Input_Hat hat; // size = 8

            [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
            public partial struct SDL_GamepadBinding_Input_Axis
            {
                [FieldOffset(0)]
                public int axis; // size = 4

                [FieldOffset(4)]
                public int axis_min; // size = 4

                [FieldOffset(8)]
                public int axis_max; // size = 4
            }

            [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
            public partial struct SDL_GamepadBinding_Input_Hat
            {
                [FieldOffset(0)]
                public int hat; // size = 4

                [FieldOffset(4)]
                public int hat_mask; // size = 4
            }
        }

        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public partial struct SDL_GamepadBinding_Output
        {
            [FieldOffset(0)]
            public SDL_GamepadButton button; // size = 4

            [FieldOffset(0)]
            public SDL_GamepadBinding_Output_Axis axis; // size = 12

            [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
            public partial struct SDL_GamepadBinding_Output_Axis
            {
                [FieldOffset(0)]
                public SDL_GamepadAxis axis; // size = 4

                [FieldOffset(4)]
                public int axis_min; // size = 4

                [FieldOffset(8)]
                public int axis_max; // size = 4
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_GamepadButtonEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public byte button; // size = 1

        [FieldOffset(21)]
        public CBool down; // size = 1

        [FieldOffset(22)]
        public byte padding1; // size = 1

        [FieldOffset(23)]
        public byte padding2; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_GamepadDeviceEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_GamepadSensorEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public int sensor; // size = 4

        [FieldOffset(24)] // size = 12
        public fixed float data[3];

        [FieldOffset(40)]
        public ulong sensor_timestamp; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_GamepadTouchpadEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public int touchpad; // size = 4

        [FieldOffset(24)]
        public int finger; // size = 4

        [FieldOffset(28)]
        public float x; // size = 4

        [FieldOffset(32)]
        public float y; // size = 4

        [FieldOffset(36)]
        public float pressure; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public partial struct SDL_GPUBlitInfo
    {
        [FieldOffset(0)]
        public SDL_GPUBlitRegion source; // size = 32

        [FieldOffset(32)]
        public SDL_GPUBlitRegion destination; // size = 32

        [FieldOffset(64)]
        public SDL_GPULoadOp load_op; // size = 4

        [FieldOffset(68)]
        public SDL_FColor clear_color; // size = 16

        [FieldOffset(84)]
        public SDL_FlipMode flip_mode; // size = 4

        [FieldOffset(88)]
        public SDL_GPUFilter filter; // size = 4

        [FieldOffset(92)]
        public CBool cycle; // size = 1

        [FieldOffset(93)]
        public byte padding1; // size = 1

        [FieldOffset(94)]
        public byte padding2; // size = 1

        [FieldOffset(95)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_GPUBlitRegion
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* texture; // size = 8

        [FieldOffset(8)]
        public uint mip_level; // size = 4

        [FieldOffset(12)]
        public uint layer_or_depth_plane; // size = 4

        [FieldOffset(16)]
        public uint x; // size = 4

        [FieldOffset(20)]
        public uint y; // size = 4

        [FieldOffset(24)]
        public uint w; // size = 4

        [FieldOffset(28)]
        public uint h; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_GPUBufferBinding
    {
        [FieldOffset(0)]
        public SDL_GPUBuffer* buffer; // size = 8

        [FieldOffset(8)]
        public uint offset; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public partial struct SDL_GPUBufferCreateInfo
    {
        [FieldOffset(0)]
        public SDL_GPUBufferUsageFlags usage; // size = 4

        [FieldOffset(4)]
        public uint size; // size = 4

        [FieldOffset(8)]
        public SDL_PropertiesID props; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_GPUBufferLocation
    {
        [FieldOffset(0)]
        public SDL_GPUBuffer* buffer; // size = 8

        [FieldOffset(8)]
        public uint offset; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_GPUBufferRegion
    {
        [FieldOffset(0)]
        public SDL_GPUBuffer* buffer; // size = 8

        [FieldOffset(8)]
        public uint offset; // size = 4

        [FieldOffset(12)]
        public uint size; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public partial struct SDL_GPUColorTargetBlendState
    {
        [FieldOffset(0)]
        public SDL_GPUBlendFactor src_color_blendfactor; // size = 4

        [FieldOffset(4)]
        public SDL_GPUBlendFactor dst_color_blendfactor; // size = 4

        [FieldOffset(8)]
        public SDL_GPUBlendOp color_blend_op; // size = 4

        [FieldOffset(12)]
        public SDL_GPUBlendFactor src_alpha_blendfactor; // size = 4

        [FieldOffset(16)]
        public SDL_GPUBlendFactor dst_alpha_blendfactor; // size = 4

        [FieldOffset(20)]
        public SDL_GPUBlendOp alpha_blend_op; // size = 4

        [FieldOffset(24)]
        public SDL_GPUColorComponentFlags color_write_mask; // size = 1

        [FieldOffset(25)]
        public CBool enable_blend; // size = 1

        [FieldOffset(26)]
        public CBool enable_color_write_mask; // size = 1

        [FieldOffset(27)]
        public byte padding1; // size = 1

        [FieldOffset(28)]
        public byte padding2; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public partial struct SDL_GPUColorTargetDescription
    {
        [FieldOffset(0)]
        public SDL_GPUTextureFormat format; // size = 4

        [FieldOffset(4)]
        public SDL_GPUColorTargetBlendState blend_state; // size = 32
    }

    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public partial struct SDL_GPUColorTargetInfo
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* texture; // size = 8

        [FieldOffset(8)]
        public uint mip_level; // size = 4

        [FieldOffset(12)]
        public uint layer_or_depth_plane; // size = 4

        [FieldOffset(16)]
        public SDL_FColor clear_color; // size = 16

        [FieldOffset(32)]
        public SDL_GPULoadOp load_op; // size = 4

        [FieldOffset(36)]
        public SDL_GPUStoreOp store_op; // size = 4

        [FieldOffset(40)]
        public SDL_GPUTexture* resolve_texture; // size = 8

        [FieldOffset(48)]
        public uint resolve_mip_level; // size = 4

        [FieldOffset(52)]
        public uint resolve_layer; // size = 4

        [FieldOffset(56)]
        public CBool cycle; // size = 1

        [FieldOffset(57)]
        public CBool cycle_resolve_texture; // size = 1

        [FieldOffset(58)]
        public byte padding1; // size = 1

        [FieldOffset(59)]
        public byte padding2; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public partial struct SDL_GPUComputePipelineCreateInfo
    {
        [FieldOffset(0)]
        public ulong code_size; // size = 8

        [FieldOffset(8)]
        public byte* code; // size = 8

        [FieldOffset(16)] // size = 8
        public CString _entrypoint;

        public string entrypoint
        {
            get
            {
                return CString.ToString(_entrypoint);
            }
            set
            {
                _entrypoint = CString.FromString(value);
            }
        }

        [FieldOffset(24)]
        public SDL_GPUShaderFormat format; // size = 4

        [FieldOffset(28)]
        public uint num_samplers; // size = 4

        [FieldOffset(32)]
        public uint num_readonly_storage_textures; // size = 4

        [FieldOffset(36)]
        public uint num_readonly_storage_buffers; // size = 4

        [FieldOffset(40)]
        public uint num_readwrite_storage_textures; // size = 4

        [FieldOffset(44)]
        public uint num_readwrite_storage_buffers; // size = 4

        [FieldOffset(48)]
        public uint num_uniform_buffers; // size = 4

        [FieldOffset(52)]
        public uint threadcount_x; // size = 4

        [FieldOffset(56)]
        public uint threadcount_y; // size = 4

        [FieldOffset(60)]
        public uint threadcount_z; // size = 4

        [FieldOffset(64)]
        public SDL_PropertiesID props; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public partial struct SDL_GPUDepthStencilState
    {
        [FieldOffset(0)]
        public SDL_GPUCompareOp compare_op; // size = 4

        [FieldOffset(4)]
        public SDL_GPUStencilOpState back_stencil_state; // size = 16

        [FieldOffset(20)]
        public SDL_GPUStencilOpState front_stencil_state; // size = 16

        [FieldOffset(36)]
        public byte compare_mask; // size = 1

        [FieldOffset(37)]
        public byte write_mask; // size = 1

        [FieldOffset(38)]
        public CBool enable_depth_test; // size = 1

        [FieldOffset(39)]
        public CBool enable_depth_write; // size = 1

        [FieldOffset(40)]
        public CBool enable_stencil_test; // size = 1

        [FieldOffset(41)]
        public byte padding1; // size = 1

        [FieldOffset(42)]
        public byte padding2; // size = 1

        [FieldOffset(43)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_GPUDepthStencilTargetInfo
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* texture; // size = 8

        [FieldOffset(8)]
        public float clear_depth; // size = 4

        [FieldOffset(12)]
        public SDL_GPULoadOp load_op; // size = 4

        [FieldOffset(16)]
        public SDL_GPUStoreOp store_op; // size = 4

        [FieldOffset(20)]
        public SDL_GPULoadOp stencil_load_op; // size = 4

        [FieldOffset(24)]
        public SDL_GPUStoreOp stencil_store_op; // size = 4

        [FieldOffset(28)]
        public CBool cycle; // size = 1

        [FieldOffset(29)]
        public byte clear_stencil; // size = 1

        [FieldOffset(30)]
        public byte padding1; // size = 1

        [FieldOffset(31)]
        public byte padding2; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 168, Pack = 8)]
    public partial struct SDL_GPUGraphicsPipelineCreateInfo
    {
        [FieldOffset(0)]
        public SDL_GPUShader* vertex_shader; // size = 8

        [FieldOffset(8)]
        public SDL_GPUShader* fragment_shader; // size = 8

        [FieldOffset(16)]
        public SDL_GPUVertexInputState vertex_input_state; // size = 32

        [FieldOffset(48)]
        public SDL_GPUPrimitiveType primitive_type; // size = 4

        [FieldOffset(52)]
        public SDL_GPURasterizerState rasterizer_state; // size = 28

        [FieldOffset(80)]
        public SDL_GPUMultisampleState multisample_state; // size = 12

        [FieldOffset(92)]
        public SDL_GPUDepthStencilState depth_stencil_state; // size = 44

        [FieldOffset(136)]
        public SDL_GPUGraphicsPipelineTargetInfo target_info; // size = 24

        [FieldOffset(160)]
        public SDL_PropertiesID props; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_GPUGraphicsPipelineTargetInfo
    {
        [FieldOffset(0)]
        public SDL_GPUColorTargetDescription* color_target_descriptions; // size = 8

        [FieldOffset(8)]
        public uint num_color_targets; // size = 4

        [FieldOffset(12)]
        public SDL_GPUTextureFormat depth_stencil_format; // size = 4

        [FieldOffset(16)]
        public CBool has_depth_stencil_target; // size = 1

        [FieldOffset(17)]
        public byte padding1; // size = 1

        [FieldOffset(18)]
        public byte padding2; // size = 1

        [FieldOffset(19)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public partial struct SDL_GPUMultisampleState
    {
        [FieldOffset(0)]
        public SDL_GPUSampleCount sample_count; // size = 4

        [FieldOffset(4)]
        public uint sample_mask; // size = 4

        [FieldOffset(8)]
        public CBool enable_mask; // size = 1

        [FieldOffset(9)]
        public byte padding1; // size = 1

        [FieldOffset(10)]
        public byte padding2; // size = 1

        [FieldOffset(11)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public partial struct SDL_GPURasterizerState
    {
        [FieldOffset(0)]
        public SDL_GPUFillMode fill_mode; // size = 4

        [FieldOffset(4)]
        public SDL_GPUCullMode cull_mode; // size = 4

        [FieldOffset(8)]
        public SDL_GPUFrontFace front_face; // size = 4

        [FieldOffset(12)]
        public float depth_bias_constant_factor; // size = 4

        [FieldOffset(16)]
        public float depth_bias_clamp; // size = 4

        [FieldOffset(20)]
        public float depth_bias_slope_factor; // size = 4

        [FieldOffset(24)]
        public CBool enable_depth_bias; // size = 1

        [FieldOffset(25)]
        public CBool enable_depth_clip; // size = 1

        [FieldOffset(26)]
        public byte padding1; // size = 1

        [FieldOffset(27)]
        public byte padding2; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 52, Pack = 4)]
    public partial struct SDL_GPUSamplerCreateInfo
    {
        [FieldOffset(0)]
        public SDL_GPUFilter min_filter; // size = 4

        [FieldOffset(4)]
        public SDL_GPUFilter mag_filter; // size = 4

        [FieldOffset(8)]
        public SDL_GPUSamplerMipmapMode mipmap_mode; // size = 4

        [FieldOffset(12)]
        public SDL_GPUSamplerAddressMode address_mode_u; // size = 4

        [FieldOffset(16)]
        public SDL_GPUSamplerAddressMode address_mode_v; // size = 4

        [FieldOffset(20)]
        public SDL_GPUSamplerAddressMode address_mode_w; // size = 4

        [FieldOffset(24)]
        public float mip_lod_bias; // size = 4

        [FieldOffset(28)]
        public float max_anisotropy; // size = 4

        [FieldOffset(32)]
        public SDL_GPUCompareOp compare_op; // size = 4

        [FieldOffset(36)]
        public float min_lod; // size = 4

        [FieldOffset(40)]
        public float max_lod; // size = 4

        [FieldOffset(44)]
        public CBool enable_anisotropy; // size = 1

        [FieldOffset(45)]
        public CBool enable_compare; // size = 1

        [FieldOffset(46)]
        public byte padding1; // size = 1

        [FieldOffset(47)]
        public byte padding2; // size = 1

        [FieldOffset(48)]
        public SDL_PropertiesID props; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct SDL_GPUShaderCreateInfo
    {
        [FieldOffset(0)]
        public ulong code_size; // size = 8

        [FieldOffset(8)]
        public byte* code; // size = 8

        [FieldOffset(16)] // size = 8
        public CString _entrypoint;

        public string entrypoint
        {
            get
            {
                return CString.ToString(_entrypoint);
            }
            set
            {
                _entrypoint = CString.FromString(value);
            }
        }

        [FieldOffset(24)]
        public SDL_GPUShaderFormat format; // size = 4

        [FieldOffset(28)]
        public SDL_GPUShaderStage stage; // size = 4

        [FieldOffset(32)]
        public uint num_samplers; // size = 4

        [FieldOffset(36)]
        public uint num_storage_textures; // size = 4

        [FieldOffset(40)]
        public uint num_storage_buffers; // size = 4

        [FieldOffset(44)]
        public uint num_uniform_buffers; // size = 4

        [FieldOffset(48)]
        public SDL_PropertiesID props; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_GPUStencilOpState
    {
        [FieldOffset(0)]
        public SDL_GPUStencilOp fail_op; // size = 4

        [FieldOffset(4)]
        public SDL_GPUStencilOp pass_op; // size = 4

        [FieldOffset(8)]
        public SDL_GPUStencilOp depth_fail_op; // size = 4

        [FieldOffset(12)]
        public SDL_GPUCompareOp compare_op; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_GPUStorageBufferReadWriteBinding
    {
        [FieldOffset(0)]
        public SDL_GPUBuffer* buffer; // size = 8

        [FieldOffset(8)]
        public CBool cycle; // size = 1

        [FieldOffset(9)]
        public byte padding1; // size = 1

        [FieldOffset(10)]
        public byte padding2; // size = 1

        [FieldOffset(11)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_GPUStorageTextureReadWriteBinding
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* texture; // size = 8

        [FieldOffset(8)]
        public uint mip_level; // size = 4

        [FieldOffset(12)]
        public uint layer; // size = 4

        [FieldOffset(16)]
        public CBool cycle; // size = 1

        [FieldOffset(17)]
        public byte padding1; // size = 1

        [FieldOffset(18)]
        public byte padding2; // size = 1

        [FieldOffset(19)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public partial struct SDL_GPUTextureCreateInfo
    {
        [FieldOffset(0)]
        public SDL_GPUTextureType type; // size = 4

        [FieldOffset(4)]
        public SDL_GPUTextureFormat format; // size = 4

        [FieldOffset(8)]
        public SDL_GPUTextureUsageFlags usage; // size = 4

        [FieldOffset(12)]
        public uint width; // size = 4

        [FieldOffset(16)]
        public uint height; // size = 4

        [FieldOffset(20)]
        public uint layer_count_or_depth; // size = 4

        [FieldOffset(24)]
        public uint num_levels; // size = 4

        [FieldOffset(28)]
        public SDL_GPUSampleCount sample_count; // size = 4

        [FieldOffset(32)]
        public SDL_PropertiesID props; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_GPUTextureLocation
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* texture; // size = 8

        [FieldOffset(8)]
        public uint mip_level; // size = 4

        [FieldOffset(12)]
        public uint layer; // size = 4

        [FieldOffset(16)]
        public uint x; // size = 4

        [FieldOffset(20)]
        public uint y; // size = 4

        [FieldOffset(24)]
        public uint z; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_GPUTextureRegion
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* texture; // size = 8

        [FieldOffset(8)]
        public uint mip_level; // size = 4

        [FieldOffset(12)]
        public uint layer; // size = 4

        [FieldOffset(16)]
        public uint x; // size = 4

        [FieldOffset(20)]
        public uint y; // size = 4

        [FieldOffset(24)]
        public uint z; // size = 4

        [FieldOffset(28)]
        public uint w; // size = 4

        [FieldOffset(32)]
        public uint h; // size = 4

        [FieldOffset(36)]
        public uint d; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_GPUTextureSamplerBinding
    {
        [FieldOffset(0)]
        public SDL_GPUTexture* texture; // size = 8

        [FieldOffset(8)]
        public SDL_GPUSampler* sampler; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_GPUTextureTransferInfo
    {
        [FieldOffset(0)]
        public SDL_GPUTransferBuffer* transfer_buffer; // size = 8

        [FieldOffset(8)]
        public uint offset; // size = 4

        [FieldOffset(12)]
        public uint pixels_per_row; // size = 4

        [FieldOffset(16)]
        public uint rows_per_layer; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public partial struct SDL_GPUTransferBufferCreateInfo
    {
        [FieldOffset(0)]
        public SDL_GPUTransferBufferUsage usage; // size = 4

        [FieldOffset(4)]
        public uint size; // size = 4

        [FieldOffset(8)]
        public SDL_PropertiesID props; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_GPUTransferBufferLocation
    {
        [FieldOffset(0)]
        public SDL_GPUTransferBuffer* transfer_buffer; // size = 8

        [FieldOffset(8)]
        public uint offset; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_GPUVertexAttribute
    {
        [FieldOffset(0)]
        public uint location; // size = 4

        [FieldOffset(4)]
        public uint buffer_slot; // size = 4

        [FieldOffset(8)]
        public SDL_GPUVertexElementFormat format; // size = 4

        [FieldOffset(12)]
        public uint offset; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_GPUVertexBufferDescription
    {
        [FieldOffset(0)]
        public uint slot; // size = 4

        [FieldOffset(4)]
        public uint pitch; // size = 4

        [FieldOffset(8)]
        public SDL_GPUVertexInputRate input_rate; // size = 4

        [FieldOffset(12)]
        public uint instance_step_rate; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_GPUVertexInputState
    {
        [FieldOffset(0)]
        public SDL_GPUVertexBufferDescription* vertex_buffer_descriptions; // size = 8

        [FieldOffset(8)]
        public uint num_vertex_buffers; // size = 4

        [FieldOffset(16)]
        public SDL_GPUVertexAttribute* vertex_attributes; // size = 8

        [FieldOffset(24)]
        public uint num_vertex_attributes; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public partial struct SDL_GPUViewport
    {
        [FieldOffset(0)]
        public float x; // size = 4

        [FieldOffset(4)]
        public float y; // size = 4

        [FieldOffset(8)]
        public float w; // size = 4

        [FieldOffset(12)]
        public float h; // size = 4

        [FieldOffset(16)]
        public float min_depth; // size = 4

        [FieldOffset(20)]
        public float max_depth; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    public partial struct SDL_GUID
    {
        [FieldOffset(0)] // size = 16
        public fixed byte data[16];
    }

    [StructLayout(LayoutKind.Explicit, Size = 68, Pack = 4)]
    public partial struct SDL_HapticCondition
    {
        [FieldOffset(0)]
        public ushort type; // size = 2

        [FieldOffset(4)]
        public SDL_HapticDirection direction; // size = 16

        [FieldOffset(20)]
        public uint length; // size = 4

        [FieldOffset(24)]
        public ushort delay; // size = 2

        [FieldOffset(26)]
        public ushort button; // size = 2

        [FieldOffset(28)]
        public ushort interval; // size = 2

        [FieldOffset(30)] // size = 6
        public fixed ushort right_sat[3];

        [FieldOffset(36)] // size = 6
        public fixed ushort left_sat[3];

        [FieldOffset(42)] // size = 6
        public fixed short right_coeff[3];

        [FieldOffset(48)] // size = 6
        public fixed short left_coeff[3];

        [FieldOffset(54)] // size = 6
        public fixed ushort deadband[3];

        [FieldOffset(60)] // size = 6
        public fixed short center[3];
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
    public partial struct SDL_Hapticant
    {
        [FieldOffset(0)]
        public ushort type; // size = 2

        [FieldOffset(4)]
        public SDL_HapticDirection direction; // size = 16

        [FieldOffset(20)]
        public uint length; // size = 4

        [FieldOffset(24)]
        public ushort delay; // size = 2

        [FieldOffset(26)]
        public ushort button; // size = 2

        [FieldOffset(28)]
        public ushort interval; // size = 2

        [FieldOffset(30)]
        public short level; // size = 2

        [FieldOffset(32)]
        public ushort attack_length; // size = 2

        [FieldOffset(34)]
        public ushort attack_level; // size = 2

        [FieldOffset(36)]
        public ushort fade_length; // size = 2

        [FieldOffset(38)]
        public ushort fade_level; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct SDL_HapticCustom
    {
        [FieldOffset(0)]
        public ushort type; // size = 2

        [FieldOffset(4)]
        public SDL_HapticDirection direction; // size = 16

        [FieldOffset(20)]
        public uint length; // size = 4

        [FieldOffset(24)]
        public ushort delay; // size = 2

        [FieldOffset(26)]
        public ushort button; // size = 2

        [FieldOffset(28)]
        public ushort interval; // size = 2

        [FieldOffset(30)]
        public byte channels; // size = 1

        [FieldOffset(32)]
        public ushort period; // size = 2

        [FieldOffset(34)]
        public ushort samples; // size = 2

        [FieldOffset(40)]
        public ushort* data; // size = 8

        [FieldOffset(48)]
        public ushort attack_length; // size = 2

        [FieldOffset(50)]
        public ushort attack_level; // size = 2

        [FieldOffset(52)]
        public ushort fade_length; // size = 2

        [FieldOffset(54)]
        public ushort fade_level; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_HapticDirection
    {
        [FieldOffset(0)]
        public byte type; // size = 1

        [FieldOffset(4)] // size = 12
        public fixed int dir[3];
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public partial struct SDL_HapticLeftRight
    {
        [FieldOffset(0)]
        public ushort type; // size = 2

        [FieldOffset(4)]
        public uint length; // size = 4

        [FieldOffset(8)]
        public ushort large_magnitude; // size = 2

        [FieldOffset(10)]
        public ushort small_magnitude; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
    public partial struct SDL_HapticPeriodic
    {
        [FieldOffset(0)]
        public ushort type; // size = 2

        [FieldOffset(4)]
        public SDL_HapticDirection direction; // size = 16

        [FieldOffset(20)]
        public uint length; // size = 4

        [FieldOffset(24)]
        public ushort delay; // size = 2

        [FieldOffset(26)]
        public ushort button; // size = 2

        [FieldOffset(28)]
        public ushort interval; // size = 2

        [FieldOffset(30)]
        public ushort period; // size = 2

        [FieldOffset(32)]
        public short magnitude; // size = 2

        [FieldOffset(34)]
        public short offset; // size = 2

        [FieldOffset(36)]
        public ushort phase; // size = 2

        [FieldOffset(38)]
        public ushort attack_length; // size = 2

        [FieldOffset(40)]
        public ushort attack_level; // size = 2

        [FieldOffset(42)]
        public ushort fade_length; // size = 2

        [FieldOffset(44)]
        public ushort fade_level; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public partial struct SDL_HapticRamp
    {
        [FieldOffset(0)]
        public ushort type; // size = 2

        [FieldOffset(4)]
        public SDL_HapticDirection direction; // size = 16

        [FieldOffset(20)]
        public uint length; // size = 4

        [FieldOffset(24)]
        public ushort delay; // size = 2

        [FieldOffset(26)]
        public ushort button; // size = 2

        [FieldOffset(28)]
        public ushort interval; // size = 2

        [FieldOffset(30)]
        public short start; // size = 2

        [FieldOffset(32)]
        public short end; // size = 2

        [FieldOffset(34)]
        public ushort attack_length; // size = 2

        [FieldOffset(36)]
        public ushort attack_level; // size = 2

        [FieldOffset(38)]
        public ushort fade_length; // size = 2

        [FieldOffset(40)]
        public ushort fade_level; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public partial struct SDL_hid_device_info
    {
        [FieldOffset(0)] // size = 8
        public CString _path;

        public string path
        {
            get
            {
                return CString.ToString(_path);
            }
            set
            {
                _path = CString.FromString(value);
            }
        }

        [FieldOffset(8)]
        public ushort vendor_id; // size = 2

        [FieldOffset(10)]
        public ushort product_id; // size = 2

        [FieldOffset(16)]
        public CStringWide serial_number; // size = 8

        [FieldOffset(24)]
        public ushort release_number; // size = 2

        [FieldOffset(32)]
        public CStringWide manufacturer_string; // size = 8

        [FieldOffset(40)]
        public CStringWide product_string; // size = 8

        [FieldOffset(48)]
        public ushort usage_page; // size = 2

        [FieldOffset(50)]
        public ushort usage; // size = 2

        [FieldOffset(52)]
        public int interface_number; // size = 4

        [FieldOffset(56)]
        public int interface_class; // size = 4

        [FieldOffset(60)]
        public int interface_subclass; // size = 4

        [FieldOffset(64)]
        public int interface_protocol; // size = 4

        [FieldOffset(68)]
        public SDL_hid_bus_type bus_type; // size = 4

        [FieldOffset(72)]
        public SDL_hid_device_info* next; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct SDL_IOStreamInterface
    {
        [FieldOffset(0)]
        public uint version; // size = 4

        [FieldOffset(8)]
        public FnPtr_VoidPtr_Long size; // size = 8

        [FieldOffset(16)]
        public FnPtr_VoidPtr_Long_SDLIOWhence_Long seek; // size = 8

        [FieldOffset(24)]
        public FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong read; // size = 8

        [FieldOffset(32)]
        public FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong write; // size = 8

        [FieldOffset(40)]
        public FnPtr_VoidPtr_SDLIOStatusPtr_CBool flush; // size = 8

        [FieldOffset(48)]
        public FnPtr_VoidPtr_CBool close; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_JoyAxisEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public byte axis; // size = 1

        [FieldOffset(21)]
        public byte padding1; // size = 1

        [FieldOffset(22)]
        public byte padding2; // size = 1

        [FieldOffset(23)]
        public byte padding3; // size = 1

        [FieldOffset(24)]
        public short value; // size = 2

        [FieldOffset(26)]
        public ushort padding4; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_JoyBallEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public byte ball; // size = 1

        [FieldOffset(21)]
        public byte padding1; // size = 1

        [FieldOffset(22)]
        public byte padding2; // size = 1

        [FieldOffset(23)]
        public byte padding3; // size = 1

        [FieldOffset(24)]
        public short xrel; // size = 2

        [FieldOffset(26)]
        public short yrel; // size = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_JoyBatteryEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public SDL_PowerState state; // size = 4

        [FieldOffset(24)]
        public int percent; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_JoyButtonEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public byte button; // size = 1

        [FieldOffset(21)]
        public CBool down; // size = 1

        [FieldOffset(22)]
        public byte padding1; // size = 1

        [FieldOffset(23)]
        public byte padding2; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_JoyDeviceEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_JoyHatEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_JoystickID which; // size = 4

        [FieldOffset(20)]
        public byte hat; // size = 1

        [FieldOffset(21)]
        public byte value; // size = 1

        [FieldOffset(22)]
        public byte padding1; // size = 1

        [FieldOffset(23)]
        public byte padding2; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_KeyboardDeviceEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_KeyboardID which; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_KeyboardEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_KeyboardID which; // size = 4

        [FieldOffset(24)]
        public SDL_Scancode scancode; // size = 4

        [FieldOffset(28)]
        public SDL_Keycode key; // size = 4

        [FieldOffset(32)]
        public SDL_Keymod mod; // size = 2

        [FieldOffset(34)]
        public ushort raw; // size = 2

        [FieldOffset(36)]
        public CBool down; // size = 1

        [FieldOffset(37)]
        public CBool repeat; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_Locale
    {
        [FieldOffset(0)] // size = 8
        public CString _language;

        public string language
        {
            get
            {
                return CString.ToString(_language);
            }
            set
            {
                _language = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _country;

        public string country
        {
            get
            {
                return CString.ToString(_country);
            }
            set
            {
                _country = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_MessageBoxButtonData
    {
        [FieldOffset(0)]
        public SDL_MessageBoxButtonFlags flags; // size = 4

        [FieldOffset(4)]
        public int buttonID; // size = 4

        [FieldOffset(8)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public partial struct SDL_MessageBoxColor
    {
        [FieldOffset(0)]
        public byte r; // size = 1

        [FieldOffset(1)]
        public byte g; // size = 1

        [FieldOffset(2)]
        public byte b; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 15, Pack = 1)]
    public partial struct SDL_MessageBoxColorScheme
    {
        [FieldOffset(0)] // size = 15
        public fixed byte _colors[15]; // SDL_MessageBoxColor[5]
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct SDL_MessageBoxData
    {
        [FieldOffset(0)]
        public SDL_MessageBoxFlags flags; // size = 4

        [FieldOffset(8)]
        public SDL_Window* window; // size = 8

        [FieldOffset(16)] // size = 8
        public CString _title;

        public string title
        {
            get
            {
                return CString.ToString(_title);
            }
            set
            {
                _title = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 8
        public CString _message;

        public string message
        {
            get
            {
                return CString.ToString(_message);
            }
            set
            {
                _message = CString.FromString(value);
            }
        }

        [FieldOffset(32)]
        public int numbuttons; // size = 4

        [FieldOffset(40)]
        public SDL_MessageBoxButtonData* buttons; // size = 8

        [FieldOffset(48)]
        public SDL_MessageBoxColorScheme* colorScheme; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_MouseButtonEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_MouseID which; // size = 4

        [FieldOffset(24)]
        public byte button; // size = 1

        [FieldOffset(25)]
        public CBool down; // size = 1

        [FieldOffset(26)]
        public byte clicks; // size = 1

        [FieldOffset(27)]
        public byte padding; // size = 1

        [FieldOffset(28)]
        public float x; // size = 4

        [FieldOffset(32)]
        public float y; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_MouseDeviceEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_MouseID which; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_MouseMotionEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_MouseID which; // size = 4

        [FieldOffset(24)]
        public SDL_MouseButtonFlags state; // size = 4

        [FieldOffset(28)]
        public float x; // size = 4

        [FieldOffset(32)]
        public float y; // size = 4

        [FieldOffset(36)]
        public float xrel; // size = 4

        [FieldOffset(40)]
        public float yrel; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_MouseWheelEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_MouseID which; // size = 4

        [FieldOffset(24)]
        public float x; // size = 4

        [FieldOffset(28)]
        public float y; // size = 4

        [FieldOffset(32)]
        public SDL_MouseWheelDirection direction; // size = 4

        [FieldOffset(36)]
        public float mouse_x; // size = 4

        [FieldOffset(40)]
        public float mouse_y; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_Palette
    {
        [FieldOffset(0)]
        public int ncolors; // size = 4

        [FieldOffset(8)]
        public SDL_Color* colors; // size = 8

        [FieldOffset(16)]
        public uint version; // size = 4

        [FieldOffset(20)]
        public int refcount; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_PathInfo
    {
        [FieldOffset(0)]
        public SDL_PathType type; // size = 4

        [FieldOffset(8)]
        public ulong size; // size = 8

        [FieldOffset(16)]
        public SDL_Time create_time; // size = 8

        [FieldOffset(24)]
        public SDL_Time modify_time; // size = 8

        [FieldOffset(32)]
        public SDL_Time access_time; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_PenAxisEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_PenID which; // size = 4

        [FieldOffset(24)]
        public SDL_PenInputFlags pen_state; // size = 4

        [FieldOffset(28)]
        public float x; // size = 4

        [FieldOffset(32)]
        public float y; // size = 4

        [FieldOffset(36)]
        public SDL_PenAxis axis; // size = 4

        [FieldOffset(40)]
        public float value; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_PenButtonEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_PenID which; // size = 4

        [FieldOffset(24)]
        public SDL_PenInputFlags pen_state; // size = 4

        [FieldOffset(28)]
        public float x; // size = 4

        [FieldOffset(32)]
        public float y; // size = 4

        [FieldOffset(36)]
        public byte button; // size = 1

        [FieldOffset(37)]
        public CBool down; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_PenMotionEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_PenID which; // size = 4

        [FieldOffset(24)]
        public SDL_PenInputFlags pen_state; // size = 4

        [FieldOffset(28)]
        public float x; // size = 4

        [FieldOffset(32)]
        public float y; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_PenProximityEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_PenID which; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_PenTouchEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public SDL_PenID which; // size = 4

        [FieldOffset(24)]
        public SDL_PenInputFlags pen_state; // size = 4

        [FieldOffset(28)]
        public float x; // size = 4

        [FieldOffset(32)]
        public float y; // size = 4

        [FieldOffset(36)]
        public CBool eraser; // size = 1

        [FieldOffset(37)]
        public CBool down; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public partial struct SDL_PixelFormatDetails
    {
        [FieldOffset(0)]
        public SDL_PixelFormat format; // size = 4

        [FieldOffset(4)]
        public byte bits_per_pixel; // size = 1

        [FieldOffset(5)]
        public byte bytes_per_pixel; // size = 1

        [FieldOffset(6)] // size = 2
        public fixed byte padding[2];

        [FieldOffset(8)]
        public uint Rmask; // size = 4

        [FieldOffset(12)]
        public uint Gmask; // size = 4

        [FieldOffset(16)]
        public uint Bmask; // size = 4

        [FieldOffset(20)]
        public uint Amask; // size = 4

        [FieldOffset(24)]
        public byte Rbits; // size = 1

        [FieldOffset(25)]
        public byte Gbits; // size = 1

        [FieldOffset(26)]
        public byte Bbits; // size = 1

        [FieldOffset(27)]
        public byte Abits; // size = 1

        [FieldOffset(28)]
        public byte Rshift; // size = 1

        [FieldOffset(29)]
        public byte Gshift; // size = 1

        [FieldOffset(30)]
        public byte Bshift; // size = 1

        [FieldOffset(31)]
        public byte Ashift; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public partial struct SDL_Point
    {
        [FieldOffset(0)]
        public int x; // size = 4

        [FieldOffset(4)]
        public int y; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public partial struct SDL_QuitEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_Rect
    {
        [FieldOffset(0)]
        public int x; // size = 4

        [FieldOffset(4)]
        public int y; // size = 4

        [FieldOffset(8)]
        public int w; // size = 4

        [FieldOffset(12)]
        public int h; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public partial struct SDL_RenderEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct SDL_SensorEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_SensorID which; // size = 4

        [FieldOffset(20)] // size = 24
        public fixed float data[6];

        [FieldOffset(48)]
        public ulong sensor_timestamp; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public partial struct SDL_StorageInterface
    {
        [FieldOffset(0)]
        public uint version; // size = 4

        [FieldOffset(8)]
        public FnPtr_VoidPtr_CBool close; // size = 8

        [FieldOffset(16)]
        public FnPtr_VoidPtr_CBool ready; // size = 8

        [FieldOffset(24)]
        public FnPtr_VoidPtr_CString_SDLEnumerateDirectoryCallback_VoidPtr_CBool enumerate; // size = 8

        [FieldOffset(32)]
        public FnPtr_VoidPtr_CString_SDLPathInfoPtr_CBool info; // size = 8

        [FieldOffset(40)]
        public FnPtr_VoidPtr_CString_VoidPtr_Ulong_CBool read_file; // size = 8

        [FieldOffset(48)]
        public FnPtr_VoidPtr_CString_VoidPtr_Ulong_CBool write_file; // size = 8

        [FieldOffset(56)]
        public FnPtr_VoidPtr_CString_CBool mkdir; // size = 8

        [FieldOffset(64)]
        public FnPtr_VoidPtr_CString_CBool remove; // size = 8

        [FieldOffset(72)]
        public FnPtr_VoidPtr_CString_CString_CBool rename; // size = 8

        [FieldOffset(80)]
        public FnPtr_VoidPtr_CString_CString_CBool copy; // size = 8

        [FieldOffset(88)]
        public FnPtr_VoidPtr_Ulong space_remaining; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_Surface
    {
        [FieldOffset(0)]
        public SDL_SurfaceFlags flags; // size = 4

        [FieldOffset(4)]
        public SDL_PixelFormat format; // size = 4

        [FieldOffset(8)]
        public int w; // size = 4

        [FieldOffset(12)]
        public int h; // size = 4

        [FieldOffset(16)]
        public int pitch; // size = 4

        [FieldOffset(24)]
        public void* pixels; // size = 8

        [FieldOffset(32)]
        public int refcount; // size = 4

        [FieldOffset(40)]
        public void* reserved; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public partial struct SDL_TextEditingCandidatesEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(24)]
        public CString* candidates; // size = 8

        [FieldOffset(32)]
        public int num_candidates; // size = 4

        [FieldOffset(36)]
        public int selected_candidate; // size = 4

        [FieldOffset(40)]
        public CBool horizontal; // size = 1

        [FieldOffset(41)]
        public byte padding1; // size = 1

        [FieldOffset(42)]
        public byte padding2; // size = 1

        [FieldOffset(43)]
        public byte padding3; // size = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_TextEditingEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(24)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }

        [FieldOffset(32)]
        public int start; // size = 4

        [FieldOffset(36)]
        public int length; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_TextInputEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(24)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public partial struct SDL_Texture
    {
        [FieldOffset(0)]
        public SDL_PixelFormat format; // size = 4

        [FieldOffset(4)]
        public int w; // size = 4

        [FieldOffset(8)]
        public int h; // size = 4

        [FieldOffset(12)]
        public int refcount; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public partial struct SDL_TouchFingerEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_TouchID touchID; // size = 8

        [FieldOffset(24)]
        public SDL_FingerID fingerID; // size = 8

        [FieldOffset(32)]
        public float x; // size = 4

        [FieldOffset(36)]
        public float y; // size = 4

        [FieldOffset(40)]
        public float dx; // size = 4

        [FieldOffset(44)]
        public float dy; // size = 4

        [FieldOffset(48)]
        public float pressure; // size = 4

        [FieldOffset(52)]
        public SDL_WindowID windowID; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public partial struct SDL_UserEvent
    {
        [FieldOffset(0)]
        public uint type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public int code; // size = 4

        [FieldOffset(24)]
        public void* data1; // size = 8

        [FieldOffset(32)]
        public void* data2; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public partial struct SDL_Vertex
    {
        [FieldOffset(0)]
        public SDL_FPoint position; // size = 8

        [FieldOffset(8)]
        public SDL_FColor color; // size = 16

        [FieldOffset(24)]
        public SDL_FPoint tex_coord; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 136, Pack = 8)]
    public partial struct SDL_VirtualJoystickDesc
    {
        [FieldOffset(0)]
        public uint version; // size = 4

        [FieldOffset(4)]
        public ushort type; // size = 2

        [FieldOffset(6)]
        public ushort padding; // size = 2

        [FieldOffset(8)]
        public ushort vendor_id; // size = 2

        [FieldOffset(10)]
        public ushort product_id; // size = 2

        [FieldOffset(12)]
        public ushort naxes; // size = 2

        [FieldOffset(14)]
        public ushort nbuttons; // size = 2

        [FieldOffset(16)]
        public ushort nballs; // size = 2

        [FieldOffset(18)]
        public ushort nhats; // size = 2

        [FieldOffset(20)]
        public ushort ntouchpads; // size = 2

        [FieldOffset(22)]
        public ushort nsensors; // size = 2

        [FieldOffset(24)] // size = 4
        public fixed ushort padding2[2];

        [FieldOffset(28)]
        public uint button_mask; // size = 4

        [FieldOffset(32)]
        public uint axis_mask; // size = 4

        [FieldOffset(40)] // size = 8
        public CString _name;

        public string name
        {
            get
            {
                return CString.ToString(_name);
            }
            set
            {
                _name = CString.FromString(value);
            }
        }

        [FieldOffset(48)]
        public SDL_VirtualJoystickTouchpadDesc* touchpads; // size = 8

        [FieldOffset(56)]
        public SDL_VirtualJoystickSensorDesc* sensors; // size = 8

        [FieldOffset(64)]
        public void* userdata; // size = 8

        [FieldOffset(72)]
        public FnPtr_VoidPtr_Void Update; // size = 8

        [FieldOffset(80)]
        public FnPtr_VoidPtr_Int_Void SetPlayerIndex; // size = 8

        [FieldOffset(88)]
        public FnPtr_VoidPtr_Ushort_Ushort_CBool Rumble; // size = 8

        [FieldOffset(96)]
        public FnPtr_VoidPtr_Ushort_Ushort_CBool RumbleTriggers; // size = 8

        [FieldOffset(104)]
        public FnPtr_VoidPtr_Byte_Byte_Byte_CBool SetLED; // size = 8

        [FieldOffset(112)]
        public FnPtr_VoidPtr_VoidPtr_Int_CBool SendEffect; // size = 8

        [FieldOffset(120)]
        public FnPtr_VoidPtr_CBool_CBool SetSensorsEnabled; // size = 8

        [FieldOffset(128)]
        public FnPtr_VoidPtr_Void Cleanup; // size = 8
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public partial struct SDL_VirtualJoystickSensorDesc
    {
        [FieldOffset(0)]
        public SDL_SensorType type; // size = 4

        [FieldOffset(4)]
        public float rate; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 2)]
    public partial struct SDL_VirtualJoystickTouchpadDesc
    {
        [FieldOffset(0)]
        public ushort nfingers; // size = 2

        [FieldOffset(2)] // size = 6
        public fixed ushort padding[3];
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public partial struct SDL_WindowEvent
    {
        [FieldOffset(0)]
        public SDL_EventType type; // size = 4

        [FieldOffset(4)]
        public uint reserved; // size = 4

        [FieldOffset(8)]
        public ulong timestamp; // size = 8

        [FieldOffset(16)]
        public SDL_WindowID windowID; // size = 4

        [FieldOffset(20)]
        public int data1; // size = 4

        [FieldOffset(24)]
        public int data2; // size = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 8)]
    public partial struct SDL_Event
    {
        [FieldOffset(0)]
        public uint type; // size = 4

        [FieldOffset(0)]
        public SDL_CommonEvent common; // size = 16

        [FieldOffset(0)]
        public SDL_DisplayEvent display; // size = 32

        [FieldOffset(0)]
        public SDL_WindowEvent window; // size = 32

        [FieldOffset(0)]
        public SDL_KeyboardDeviceEvent kdevice; // size = 24

        [FieldOffset(0)]
        public SDL_KeyboardEvent key; // size = 40

        [FieldOffset(0)]
        public SDL_TextEditingEvent edit; // size = 40

        [FieldOffset(0)]
        public SDL_TextEditingCandidatesEvent edit_candidates; // size = 48

        [FieldOffset(0)]
        public SDL_TextInputEvent text; // size = 32

        [FieldOffset(0)]
        public SDL_MouseDeviceEvent mdevice; // size = 24

        [FieldOffset(0)]
        public SDL_MouseMotionEvent motion; // size = 48

        [FieldOffset(0)]
        public SDL_MouseButtonEvent button; // size = 40

        [FieldOffset(0)]
        public SDL_MouseWheelEvent wheel; // size = 48

        [FieldOffset(0)]
        public SDL_JoyDeviceEvent jdevice; // size = 24

        [FieldOffset(0)]
        public SDL_JoyAxisEvent jaxis; // size = 32

        [FieldOffset(0)]
        public SDL_JoyBallEvent jball; // size = 32

        [FieldOffset(0)]
        public SDL_JoyHatEvent jhat; // size = 24

        [FieldOffset(0)]
        public SDL_JoyButtonEvent jbutton; // size = 24

        [FieldOffset(0)]
        public SDL_JoyBatteryEvent jbattery; // size = 32

        [FieldOffset(0)]
        public SDL_GamepadDeviceEvent gdevice; // size = 24

        [FieldOffset(0)]
        public SDL_GamepadAxisEvent gaxis; // size = 32

        [FieldOffset(0)]
        public SDL_GamepadButtonEvent gbutton; // size = 24

        [FieldOffset(0)]
        public SDL_GamepadTouchpadEvent gtouchpad; // size = 40

        [FieldOffset(0)]
        public SDL_GamepadSensorEvent gsensor; // size = 48

        [FieldOffset(0)]
        public SDL_AudioDeviceEvent adevice; // size = 24

        [FieldOffset(0)]
        public SDL_CameraDeviceEvent cdevice; // size = 24

        [FieldOffset(0)]
        public SDL_SensorEvent sensor; // size = 56

        [FieldOffset(0)]
        public SDL_QuitEvent quit; // size = 16

        [FieldOffset(0)]
        public SDL_UserEvent user; // size = 40

        [FieldOffset(0)]
        public SDL_TouchFingerEvent tfinger; // size = 56

        [FieldOffset(0)]
        public SDL_PenProximityEvent pproximity; // size = 24

        [FieldOffset(0)]
        public SDL_PenTouchEvent ptouch; // size = 40

        [FieldOffset(0)]
        public SDL_PenMotionEvent pmotion; // size = 40

        [FieldOffset(0)]
        public SDL_PenButtonEvent pbutton; // size = 40

        [FieldOffset(0)]
        public SDL_PenAxisEvent paxis; // size = 48

        [FieldOffset(0)]
        public SDL_RenderEvent render; // size = 24

        [FieldOffset(0)]
        public SDL_DropEvent drop; // size = 48

        [FieldOffset(0)]
        public SDL_ClipboardEvent clipboard; // size = 32

        [FieldOffset(0)] // size = 128
        public fixed byte padding[128];
    }

    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public partial struct SDL_HapticEffect
    {
        [FieldOffset(0)]
        public ushort type; // size = 2

        [FieldOffset(0)]
        public SDL_Hapticant constant; // size = 40

        [FieldOffset(0)]
        public SDL_HapticPeriodic periodic; // size = 48

        [FieldOffset(0)]
        public SDL_HapticCondition condition; // size = 68

        [FieldOffset(0)]
        public SDL_HapticRamp ramp; // size = 44

        [FieldOffset(0)]
        public SDL_HapticLeftRight leftright; // size = 12

        [FieldOffset(0)]
        public SDL_HapticCustom custom; // size = 56
    }

    public enum SDL_AppResult : int
    {
        SDL_APP_CONTINUE = 0,
        SDL_APP_SUCCESS = 1,
        SDL_APP_FAILURE = 2
    }

    public enum SDL_AssertState : int
    {
        SDL_ASSERTION_RETRY = 0,
        SDL_ASSERTION_BREAK = 1,
        SDL_ASSERTION_ABORT = 2,
        SDL_ASSERTION_IGNORE = 3,
        SDL_ASSERTION_ALWAYS_IGNORE = 4
    }

    public enum SDL_AsyncIOResult : int
    {
        SDL_ASYNCIO_COMPLETE = 0,
        SDL_ASYNCIO_FAILURE = 1,
        SDL_ASYNCIO_CANCELED = 2
    }

    public enum SDL_AsyncIOTaskType : int
    {
        SDL_ASYNCIO_TASK_READ = 0,
        SDL_ASYNCIO_TASK_WRITE = 1,
        SDL_ASYNCIO_TASK_CLOSE = 2
    }

    public enum SDL_BlendFactor : int
    {
        SDL_BLENDFACTOR_ZERO = 1,
        SDL_BLENDFACTOR_ONE = 2,
        SDL_BLENDFACTOR_SRC_COLOR = 3,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
        SDL_BLENDFACTOR_SRC_ALPHA = 5,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
        SDL_BLENDFACTOR_DST_COLOR = 7,
        SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
        SDL_BLENDFACTOR_DST_ALPHA = 9,
        SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
    }

    public enum SDL_BlendOperation : int
    {
        SDL_BLENDOPERATION_ADD = 1,
        SDL_BLENDOPERATION_SUBTRACT = 2,
        SDL_BLENDOPERATION_REV_SUBTRACT = 3,
        SDL_BLENDOPERATION_MINIMUM = 4,
        SDL_BLENDOPERATION_MAXIMUM = 5
    }

    public enum SDL_CameraPosition : int
    {
        SDL_CAMERA_POSITION_UNKNOWN = 0,
        SDL_CAMERA_POSITION_FRONT_FACING = 1,
        SDL_CAMERA_POSITION_BACK_FACING = 2
    }

    public enum SDL_Colorspace : int
    {
        SDL_COLORSPACE_UNKNOWN = 0,
        SDL_COLORSPACE_SRGB = 301991328,
        SDL_COLORSPACE_SRGB_LINEAR = 301991168,
        SDL_COLORSPACE_HDR10 = 301999616,
        SDL_COLORSPACE_JPEG = 570426566,
        SDL_COLORSPACE_BT601_LIMITED = 554703046,
        SDL_COLORSPACE_BT601_FULL = 571480262,
        SDL_COLORSPACE_BT709_LIMITED = 554697761,
        SDL_COLORSPACE_BT709_FULL = 571474977,
        SDL_COLORSPACE_BT2020_LIMITED = 554706441,
        SDL_COLORSPACE_BT2020_FULL = 571483657,
        SDL_COLORSPACE_RGB_DEFAULT = 301991328,
        SDL_COLORSPACE_YUV_DEFAULT = 570426566
    }

    public enum SDL_DateFormat : int
    {
        SDL_DATE_FORMAT_YYYYMMDD = 0,
        SDL_DATE_FORMAT_DDMMYYYY = 1,
        SDL_DATE_FORMAT_MMDDYYYY = 2
    }

    public enum SDL_DisplayOrientation : int
    {
        SDL_ORIENTATION_UNKNOWN = 0,
        SDL_ORIENTATION_LANDSCAPE = 1,
        SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
        SDL_ORIENTATION_PORTRAIT = 3,
        SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
    }

    public enum SDL_EnumerationResult : int
    {
        SDL_ENUM_CONTINUE = 0,
        SDL_ENUM_SUCCESS = 1,
        SDL_ENUM_FAILURE = 2
    }

    public enum SDL_EventAction : int
    {
        SDL_ADDEVENT = 0,
        SDL_PEEKEVENT = 1,
        SDL_GETEVENT = 2
    }

    public enum SDL_EventType : int
    {
        SDL_EVENT_FIRST = 0,
        SDL_EVENT_QUIT = 256,
        SDL_EVENT_TERMINATING = 257,
        SDL_EVENT_LOW_MEMORY = 258,
        SDL_EVENT_WILL_ENTER_BACKGROUND = 259,
        SDL_EVENT_DID_ENTER_BACKGROUND = 260,
        SDL_EVENT_WILL_ENTER_FOREGROUND = 261,
        SDL_EVENT_DID_ENTER_FOREGROUND = 262,
        SDL_EVENT_LOCALE_CHANGED = 263,
        SDL_EVENT_SYSTEM_THEME_CHANGED = 264,
        SDL_EVENT_DISPLAY_ORIENTATION = 337,
        SDL_EVENT_DISPLAY_ADDED = 338,
        SDL_EVENT_DISPLAY_REMOVED = 339,
        SDL_EVENT_DISPLAY_MOVED = 340,
        SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 341,
        SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 342,
        SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 343,
        SDL_EVENT_DISPLAY_FIRST = 337,
        SDL_EVENT_DISPLAY_LAST = 343,
        SDL_EVENT_WINDOW_SHOWN = 514,
        SDL_EVENT_WINDOW_HIDDEN = 515,
        SDL_EVENT_WINDOW_EXPOSED = 516,
        SDL_EVENT_WINDOW_MOVED = 517,
        SDL_EVENT_WINDOW_RESIZED = 518,
        SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519,
        SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 520,
        SDL_EVENT_WINDOW_MINIMIZED = 521,
        SDL_EVENT_WINDOW_MAXIMIZED = 522,
        SDL_EVENT_WINDOW_RESTORED = 523,
        SDL_EVENT_WINDOW_MOUSE_ENTER = 524,
        SDL_EVENT_WINDOW_MOUSE_LEAVE = 525,
        SDL_EVENT_WINDOW_FOCUS_GAINED = 526,
        SDL_EVENT_WINDOW_FOCUS_LOST = 527,
        SDL_EVENT_WINDOW_CLOSE_REQUESTED = 528,
        SDL_EVENT_WINDOW_HIT_TEST = 529,
        SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530,
        SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531,
        SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532,
        SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 533,
        SDL_EVENT_WINDOW_OCCLUDED = 534,
        SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 535,
        SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 536,
        SDL_EVENT_WINDOW_DESTROYED = 537,
        SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 538,
        SDL_EVENT_WINDOW_FIRST = 514,
        SDL_EVENT_WINDOW_LAST = 538,
        SDL_EVENT_KEY_DOWN = 768,
        SDL_EVENT_KEY_UP = 769,
        SDL_EVENT_TEXT_EDITING = 770,
        SDL_EVENT_TEXT_INPUT = 771,
        SDL_EVENT_KEYMAP_CHANGED = 772,
        SDL_EVENT_KEYBOARD_ADDED = 773,
        SDL_EVENT_KEYBOARD_REMOVED = 774,
        SDL_EVENT_TEXT_EDITING_CANDIDATES = 775,
        SDL_EVENT_MOUSE_MOTION = 1024,
        SDL_EVENT_MOUSE_BUTTON_DOWN = 1025,
        SDL_EVENT_MOUSE_BUTTON_UP = 1026,
        SDL_EVENT_MOUSE_WHEEL = 1027,
        SDL_EVENT_MOUSE_ADDED = 1028,
        SDL_EVENT_MOUSE_REMOVED = 1029,
        SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536,
        SDL_EVENT_JOYSTICK_BALL_MOTION = 1537,
        SDL_EVENT_JOYSTICK_HAT_MOTION = 1538,
        SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539,
        SDL_EVENT_JOYSTICK_BUTTON_UP = 1540,
        SDL_EVENT_JOYSTICK_ADDED = 1541,
        SDL_EVENT_JOYSTICK_REMOVED = 1542,
        SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543,
        SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544,
        SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616,
        SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617,
        SDL_EVENT_GAMEPAD_BUTTON_UP = 1618,
        SDL_EVENT_GAMEPAD_ADDED = 1619,
        SDL_EVENT_GAMEPAD_REMOVED = 1620,
        SDL_EVENT_GAMEPAD_REMAPPED = 1621,
        SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622,
        SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623,
        SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624,
        SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625,
        SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626,
        SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 1627,
        SDL_EVENT_FINGER_DOWN = 1792,
        SDL_EVENT_FINGER_UP = 1793,
        SDL_EVENT_FINGER_MOTION = 1794,
        SDL_EVENT_FINGER_CANCELED = 1795,
        SDL_EVENT_CLIPBOARD_UPDATE = 2304,
        SDL_EVENT_DROP_FILE = 4096,
        SDL_EVENT_DROP_TEXT = 4097,
        SDL_EVENT_DROP_BEGIN = 4098,
        SDL_EVENT_DROP_COMPLETE = 4099,
        SDL_EVENT_DROP_POSITION = 4100,
        SDL_EVENT_AUDIO_DEVICE_ADDED = 4352,
        SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353,
        SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 4354,
        SDL_EVENT_SENSOR_UPDATE = 4608,
        SDL_EVENT_PEN_PROXIMITY_IN = 4864,
        SDL_EVENT_PEN_PROXIMITY_OUT = 4865,
        SDL_EVENT_PEN_DOWN = 4866,
        SDL_EVENT_PEN_UP = 4867,
        SDL_EVENT_PEN_BUTTON_DOWN = 4868,
        SDL_EVENT_PEN_BUTTON_UP = 4869,
        SDL_EVENT_PEN_MOTION = 4870,
        SDL_EVENT_PEN_AXIS = 4871,
        SDL_EVENT_CAMERA_DEVICE_ADDED = 5120,
        SDL_EVENT_CAMERA_DEVICE_REMOVED = 5121,
        SDL_EVENT_CAMERA_DEVICE_APPROVED = 5122,
        SDL_EVENT_CAMERA_DEVICE_DENIED = 5123,
        SDL_EVENT_RENDER_TARGETS_RESET = 8192,
        SDL_EVENT_RENDER_DEVICE_RESET = 8193,
        SDL_EVENT_RENDER_DEVICE_LOST = 8194,
        SDL_EVENT_PRIVATE0 = 16384,
        SDL_EVENT_PRIVATE1 = 16385,
        SDL_EVENT_PRIVATE2 = 16386,
        SDL_EVENT_PRIVATE3 = 16387,
        SDL_EVENT_POLL_SENTINEL = 32512,
        SDL_EVENT_USER = 32768,
        SDL_EVENT_LAST = 65535,
        SDL_EVENT_ENUM_PADDING = 2147483647
    }

    public enum SDL_FileDialogType : int
    {
        SDL_FILEDIALOG_OPENFILE = 0,
        SDL_FILEDIALOG_SAVEFILE = 1,
        SDL_FILEDIALOG_OPENFOLDER = 2
    }

    public enum SDL_FlashOperation : int
    {
        SDL_FLASH_CANCEL = 0,
        SDL_FLASH_BRIEFLY = 1,
        SDL_FLASH_UNTIL_FOCUSED = 2
    }

    public enum SDL_FlipMode : int
    {
        SDL_FLIP_NONE = 0,
        SDL_FLIP_HORIZONTAL = 1,
        SDL_FLIP_VERTICAL = 2
    }

    public enum SDL_Folder : int
    {
        SDL_FOLDER_HOME = 0,
        SDL_FOLDER_DESKTOP = 1,
        SDL_FOLDER_DOCUMENTS = 2,
        SDL_FOLDER_DOWNLOADS = 3,
        SDL_FOLDER_MUSIC = 4,
        SDL_FOLDER_PICTURES = 5,
        SDL_FOLDER_PUBLICSHARE = 6,
        SDL_FOLDER_SAVEDGAMES = 7,
        SDL_FOLDER_SCREENSHOTS = 8,
        SDL_FOLDER_TEMPLATES = 9,
        SDL_FOLDER_VIDEOS = 10,
        SDL_FOLDER_COUNT = 11
    }

    public enum SDL_GamepadAxis : int
    {
        SDL_GAMEPAD_AXIS_INVALID = -1,
        SDL_GAMEPAD_AXIS_LEFTX = 0,
        SDL_GAMEPAD_AXIS_LEFTY = 1,
        SDL_GAMEPAD_AXIS_RIGHTX = 2,
        SDL_GAMEPAD_AXIS_RIGHTY = 3,
        SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4,
        SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
        SDL_GAMEPAD_AXIS_COUNT = 6
    }

    public enum SDL_GamepadBindingType : int
    {
        SDL_GAMEPAD_BINDTYPE_NONE = 0,
        SDL_GAMEPAD_BINDTYPE_BUTTON = 1,
        SDL_GAMEPAD_BINDTYPE_AXIS = 2,
        SDL_GAMEPAD_BINDTYPE_HAT = 3
    }

    public enum SDL_GamepadButton : int
    {
        SDL_GAMEPAD_BUTTON_INVALID = -1,
        SDL_GAMEPAD_BUTTON_SOUTH = 0,
        SDL_GAMEPAD_BUTTON_EAST = 1,
        SDL_GAMEPAD_BUTTON_WEST = 2,
        SDL_GAMEPAD_BUTTON_NORTH = 3,
        SDL_GAMEPAD_BUTTON_BACK = 4,
        SDL_GAMEPAD_BUTTON_GUIDE = 5,
        SDL_GAMEPAD_BUTTON_START = 6,
        SDL_GAMEPAD_BUTTON_LEFT_STICK = 7,
        SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8,
        SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
        SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10,
        SDL_GAMEPAD_BUTTON_DPAD_UP = 11,
        SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12,
        SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13,
        SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14,
        SDL_GAMEPAD_BUTTON_MISC1 = 15,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19,
        SDL_GAMEPAD_BUTTON_TOUCHPAD = 20,
        SDL_GAMEPAD_BUTTON_MISC2 = 21,
        SDL_GAMEPAD_BUTTON_MISC3 = 22,
        SDL_GAMEPAD_BUTTON_MISC4 = 23,
        SDL_GAMEPAD_BUTTON_MISC5 = 24,
        SDL_GAMEPAD_BUTTON_MISC6 = 25,
        SDL_GAMEPAD_BUTTON_COUNT = 26
    }

    public enum SDL_GamepadButtonLabel : int
    {
        SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0,
        SDL_GAMEPAD_BUTTON_LABEL_A = 1,
        SDL_GAMEPAD_BUTTON_LABEL_B = 2,
        SDL_GAMEPAD_BUTTON_LABEL_X = 3,
        SDL_GAMEPAD_BUTTON_LABEL_Y = 4,
        SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5,
        SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6,
        SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7,
        SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8
    }

    public enum SDL_GamepadType : int
    {
        SDL_GAMEPAD_TYPE_UNKNOWN = 0,
        SDL_GAMEPAD_TYPE_STANDARD = 1,
        SDL_GAMEPAD_TYPE_XBOX360 = 2,
        SDL_GAMEPAD_TYPE_XBOXONE = 3,
        SDL_GAMEPAD_TYPE_PS3 = 4,
        SDL_GAMEPAD_TYPE_PS4 = 5,
        SDL_GAMEPAD_TYPE_PS5 = 6,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10,
        SDL_GAMEPAD_TYPE_COUNT = 11
    }

    public enum SDL_GLAttr : int
    {
        SDL_GL_RED_SIZE = 0,
        SDL_GL_GREEN_SIZE = 1,
        SDL_GL_BLUE_SIZE = 2,
        SDL_GL_ALPHA_SIZE = 3,
        SDL_GL_BUFFER_SIZE = 4,
        SDL_GL_DOUBLEBUFFER = 5,
        SDL_GL_DEPTH_SIZE = 6,
        SDL_GL_STENCIL_SIZE = 7,
        SDL_GL_ACCUM_RED_SIZE = 8,
        SDL_GL_ACCUM_GREEN_SIZE = 9,
        SDL_GL_ACCUM_BLUE_SIZE = 10,
        SDL_GL_ACCUM_ALPHA_SIZE = 11,
        SDL_GL_STEREO = 12,
        SDL_GL_MULTISAMPLEBUFFERS = 13,
        SDL_GL_MULTISAMPLESAMPLES = 14,
        SDL_GL_ACCELERATED_VISUAL = 15,
        SDL_GL_RETAINED_BACKING = 16,
        SDL_GL_CONTEXT_MAJOR_VERSION = 17,
        SDL_GL_CONTEXT_MINOR_VERSION = 18,
        SDL_GL_CONTEXT_FLAGS = 19,
        SDL_GL_CONTEXT_PROFILE_MASK = 20,
        SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21,
        SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23,
        SDL_GL_CONTEXT_RESET_NOTIFICATION = 24,
        SDL_GL_CONTEXT_NO_ERROR = 25,
        SDL_GL_FLOATBUFFERS = 26,
        SDL_GL_EGL_PLATFORM = 27
    }

    public enum SDL_GPUBlendFactor : int
    {
        SDL_GPU_BLENDFACTOR_INVALID = 0,
        SDL_GPU_BLENDFACTOR_ZERO = 1,
        SDL_GPU_BLENDFACTOR_ONE = 2,
        SDL_GPU_BLENDFACTOR_SRC_COLOR = 3,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
        SDL_GPU_BLENDFACTOR_DST_COLOR = 5,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 6,
        SDL_GPU_BLENDFACTOR_SRC_ALPHA = 7,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 8,
        SDL_GPU_BLENDFACTOR_DST_ALPHA = 9,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
        SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = 11,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 12,
        SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 13
    }

    public enum SDL_GPUBlendOp : int
    {
        SDL_GPU_BLENDOP_INVALID = 0,
        SDL_GPU_BLENDOP_ADD = 1,
        SDL_GPU_BLENDOP_SUBTRACT = 2,
        SDL_GPU_BLENDOP_REVERSE_SUBTRACT = 3,
        SDL_GPU_BLENDOP_MIN = 4,
        SDL_GPU_BLENDOP_MAX = 5
    }

    public enum SDL_GPUCompareOp : int
    {
        SDL_GPU_COMPAREOP_INVALID = 0,
        SDL_GPU_COMPAREOP_NEVER = 1,
        SDL_GPU_COMPAREOP_LESS = 2,
        SDL_GPU_COMPAREOP_EQUAL = 3,
        SDL_GPU_COMPAREOP_LESS_OR_EQUAL = 4,
        SDL_GPU_COMPAREOP_GREATER = 5,
        SDL_GPU_COMPAREOP_NOT_EQUAL = 6,
        SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = 7,
        SDL_GPU_COMPAREOP_ALWAYS = 8
    }

    public enum SDL_GPUCullMode : int
    {
        SDL_GPU_CULLMODE_NONE = 0,
        SDL_GPU_CULLMODE_FRONT = 1,
        SDL_GPU_CULLMODE_BACK = 2
    }

    public enum SDL_GPUFillMode : int
    {
        SDL_GPU_FILLMODE_FILL = 0,
        SDL_GPU_FILLMODE_LINE = 1
    }

    public enum SDL_GPUFilter : int
    {
        SDL_GPU_FILTER_NEAREST = 0,
        SDL_GPU_FILTER_LINEAR = 1
    }

    public enum SDL_GPUFrontFace : int
    {
        SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = 0,
        SDL_GPU_FRONTFACE_CLOCKWISE = 1
    }

    public enum SDL_GPUIndexElementSize : int
    {
        SDL_GPU_INDEXELEMENTSIZE_16BIT = 0,
        SDL_GPU_INDEXELEMENTSIZE_32BIT = 1
    }

    public enum SDL_GPULoadOp : int
    {
        SDL_GPU_LOADOP_LOAD = 0,
        SDL_GPU_LOADOP_CLEAR = 1,
        SDL_GPU_LOADOP_DONT_CARE = 2
    }

    public enum SDL_GPUPresentMode : int
    {
        SDL_GPU_PRESENTMODE_VSYNC = 0,
        SDL_GPU_PRESENTMODE_IMMEDIATE = 1,
        SDL_GPU_PRESENTMODE_MAILBOX = 2
    }

    public enum SDL_GPUPrimitiveType : int
    {
        SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = 0,
        SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = 1,
        SDL_GPU_PRIMITIVETYPE_LINELIST = 2,
        SDL_GPU_PRIMITIVETYPE_LINESTRIP = 3,
        SDL_GPU_PRIMITIVETYPE_POINTLIST = 4
    }

    public enum SDL_GPUSampleCount : int
    {
        SDL_GPU_SAMPLECOUNT_1 = 0,
        SDL_GPU_SAMPLECOUNT_2 = 1,
        SDL_GPU_SAMPLECOUNT_4 = 2,
        SDL_GPU_SAMPLECOUNT_8 = 3
    }

    public enum SDL_GPUSamplerAddressMode : int
    {
        SDL_GPU_SAMPLERADDRESSMODE_REPEAT = 0,
        SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1,
        SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2
    }

    public enum SDL_GPUSamplerMipmapMode : int
    {
        SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = 0,
        SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = 1
    }

    public enum SDL_GPUShaderStage : int
    {
        SDL_GPU_SHADERSTAGE_VERTEX = 0,
        SDL_GPU_SHADERSTAGE_FRAGMENT = 1
    }

    public enum SDL_GPUStencilOp : int
    {
        SDL_GPU_STENCILOP_INVALID = 0,
        SDL_GPU_STENCILOP_KEEP = 1,
        SDL_GPU_STENCILOP_ZERO = 2,
        SDL_GPU_STENCILOP_REPLACE = 3,
        SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = 4,
        SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = 5,
        SDL_GPU_STENCILOP_INVERT = 6,
        SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = 7,
        SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = 8
    }

    public enum SDL_GPUStoreOp : int
    {
        SDL_GPU_STOREOP_STORE = 0,
        SDL_GPU_STOREOP_DONT_CARE = 1,
        SDL_GPU_STOREOP_RESOLVE = 2,
        SDL_GPU_STOREOP_RESOLVE_AND_STORE = 3
    }

    public enum SDL_GPUSwapchainComposition : int
    {
        SDL_GPU_SWAPCHAINCOMPOSITION_SDR = 0,
        SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1,
        SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2,
        SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084 = 3
    }

    public enum SDL_GPUTextureFormat : int
    {
        SDL_GPU_TEXTUREFORMAT_INVALID = 0,
        SDL_GPU_TEXTUREFORMAT_A8_UNORM = 1,
        SDL_GPU_TEXTUREFORMAT_R8_UNORM = 2,
        SDL_GPU_TEXTUREFORMAT_R8G8_UNORM = 3,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 4,
        SDL_GPU_TEXTUREFORMAT_R16_UNORM = 5,
        SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = 6,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7,
        SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 8,
        SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = 9,
        SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 10,
        SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 11,
        SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 12,
        SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM = 13,
        SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM = 14,
        SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM = 15,
        SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM = 16,
        SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM = 17,
        SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM = 18,
        SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT = 19,
        SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT = 20,
        SDL_GPU_TEXTUREFORMAT_R8_SNORM = 21,
        SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = 22,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 23,
        SDL_GPU_TEXTUREFORMAT_R16_SNORM = 24,
        SDL_GPU_TEXTUREFORMAT_R16G16_SNORM = 25,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM = 26,
        SDL_GPU_TEXTUREFORMAT_R16_FLOAT = 27,
        SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = 28,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 29,
        SDL_GPU_TEXTUREFORMAT_R32_FLOAT = 30,
        SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = 31,
        SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 32,
        SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT = 33,
        SDL_GPU_TEXTUREFORMAT_R8_UINT = 34,
        SDL_GPU_TEXTUREFORMAT_R8G8_UINT = 35,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 36,
        SDL_GPU_TEXTUREFORMAT_R16_UINT = 37,
        SDL_GPU_TEXTUREFORMAT_R16G16_UINT = 38,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 39,
        SDL_GPU_TEXTUREFORMAT_R32_UINT = 40,
        SDL_GPU_TEXTUREFORMAT_R32G32_UINT = 41,
        SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT = 42,
        SDL_GPU_TEXTUREFORMAT_R8_INT = 43,
        SDL_GPU_TEXTUREFORMAT_R8G8_INT = 44,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT = 45,
        SDL_GPU_TEXTUREFORMAT_R16_INT = 46,
        SDL_GPU_TEXTUREFORMAT_R16G16_INT = 47,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT = 48,
        SDL_GPU_TEXTUREFORMAT_R32_INT = 49,
        SDL_GPU_TEXTUREFORMAT_R32G32_INT = 50,
        SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT = 51,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 52,
        SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 53,
        SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB = 54,
        SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB = 55,
        SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB = 56,
        SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB = 57,
        SDL_GPU_TEXTUREFORMAT_D16_UNORM = 58,
        SDL_GPU_TEXTUREFORMAT_D24_UNORM = 59,
        SDL_GPU_TEXTUREFORMAT_D32_FLOAT = 60,
        SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 61,
        SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 62,
        SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM = 63,
        SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM = 64,
        SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM = 65,
        SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM = 66,
        SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM = 67,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM = 68,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM = 69,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM = 70,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM = 71,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM = 72,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM = 73,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM = 74,
        SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM = 75,
        SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM = 76,
        SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB = 77,
        SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB = 78,
        SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB = 79,
        SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB = 80,
        SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB = 81,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB = 82,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB = 83,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB = 84,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB = 85,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB = 86,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB = 87,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB = 88,
        SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB = 89,
        SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB = 90,
        SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT = 91,
        SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT = 92,
        SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT = 93,
        SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT = 94,
        SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT = 95,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT = 96,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT = 97,
        SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT = 98,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT = 99,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT = 100,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT = 101,
        SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT = 102,
        SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT = 103,
        SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT = 104
    }

    public enum SDL_GPUTextureType : int
    {
        SDL_GPU_TEXTURETYPE_2D = 0,
        SDL_GPU_TEXTURETYPE_2D_ARRAY = 1,
        SDL_GPU_TEXTURETYPE_3D = 2,
        SDL_GPU_TEXTURETYPE_CUBE = 3,
        SDL_GPU_TEXTURETYPE_CUBE_ARRAY = 4
    }

    public enum SDL_GPUTransferBufferUsage : int
    {
        SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0,
        SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1
    }

    public enum SDL_GPUVertexElementFormat : int
    {
        SDL_GPU_VERTEXELEMENTFORMAT_INVALID = 0,
        SDL_GPU_VERTEXELEMENTFORMAT_INT = 1,
        SDL_GPU_VERTEXELEMENTFORMAT_INT2 = 2,
        SDL_GPU_VERTEXELEMENTFORMAT_INT3 = 3,
        SDL_GPU_VERTEXELEMENTFORMAT_INT4 = 4,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT = 5,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = 6,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = 7,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = 8,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = 9,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = 10,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = 11,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = 12,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = 13,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = 14,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = 15,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = 16,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 17,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 18,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 19,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 20,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = 21,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = 22,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = 23,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = 24,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 25,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 26,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 27,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 28,
        SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = 29,
        SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = 30
    }

    public enum SDL_GPUVertexInputRate : int
    {
        SDL_GPU_VERTEXINPUTRATE_VERTEX = 0,
        SDL_GPU_VERTEXINPUTRATE_INSTANCE = 1
    }

    public enum SDL_hid_bus_type : int
    {
        SDL_HID_API_BUS_UNKNOWN = 0,
        SDL_HID_API_BUS_USB = 1,
        SDL_HID_API_BUS_BLUETOOTH = 2,
        SDL_HID_API_BUS_I2C = 3,
        SDL_HID_API_BUS_SPI = 4
    }

    public enum SDL_HintPriority : int
    {
        SDL_HINT_DEFAULT = 0,
        SDL_HINT_NORMAL = 1,
        SDL_HINT_OVERRIDE = 2
    }

    public enum SDL_HitTestResult : int
    {
        SDL_HITTEST_NORMAL = 0,
        SDL_HITTEST_DRAGGABLE = 1,
        SDL_HITTEST_RESIZE_TOPLEFT = 2,
        SDL_HITTEST_RESIZE_TOP = 3,
        SDL_HITTEST_RESIZE_TOPRIGHT = 4,
        SDL_HITTEST_RESIZE_RIGHT = 5,
        SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
        SDL_HITTEST_RESIZE_BOTTOM = 7,
        SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
        SDL_HITTEST_RESIZE_LEFT = 9
    }

    public enum SDL_IOStatus : int
    {
        SDL_IO_STATUS_READY = 0,
        SDL_IO_STATUS_ERROR = 1,
        SDL_IO_STATUS_EOF = 2,
        SDL_IO_STATUS_NOT_READY = 3,
        SDL_IO_STATUS_READONLY = 4,
        SDL_IO_STATUS_WRITEONLY = 5
    }

    public enum SDL_IOWhence : int
    {
        SDL_IO_SEEK_SET = 0,
        SDL_IO_SEEK_CUR = 1,
        SDL_IO_SEEK_END = 2
    }

    public enum SDL_JoystickConnectionState : int
    {
        SDL_JOYSTICK_CONNECTION_INVALID = -1,
        SDL_JOYSTICK_CONNECTION_UNKNOWN = 0,
        SDL_JOYSTICK_CONNECTION_WIRED = 1,
        SDL_JOYSTICK_CONNECTION_WIRELESS = 2
    }

    public enum SDL_JoystickType : int
    {
        SDL_JOYSTICK_TYPE_UNKNOWN = 0,
        SDL_JOYSTICK_TYPE_GAMEPAD = 1,
        SDL_JOYSTICK_TYPE_WHEEL = 2,
        SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
        SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
        SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
        SDL_JOYSTICK_TYPE_GUITAR = 6,
        SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
        SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
        SDL_JOYSTICK_TYPE_THROTTLE = 9,
        SDL_JOYSTICK_TYPE_COUNT = 10
    }

    public enum SDL_LogPriority : int
    {
        SDL_LOG_PRIORITY_INVALID = 0,
        SDL_LOG_PRIORITY_TRACE = 1,
        SDL_LOG_PRIORITY_VERBOSE = 2,
        SDL_LOG_PRIORITY_DEBUG = 3,
        SDL_LOG_PRIORITY_INFO = 4,
        SDL_LOG_PRIORITY_WARN = 5,
        SDL_LOG_PRIORITY_ERROR = 6,
        SDL_LOG_PRIORITY_CRITICAL = 7,
        SDL_LOG_PRIORITY_COUNT = 8
    }

    public enum SDL_MouseWheelDirection : int
    {
        SDL_MOUSEWHEEL_NORMAL = 0,
        SDL_MOUSEWHEEL_FLIPPED = 1
    }

    public enum SDL_PathType : int
    {
        SDL_PATHTYPE_NONE = 0,
        SDL_PATHTYPE_FILE = 1,
        SDL_PATHTYPE_DIRECTORY = 2,
        SDL_PATHTYPE_OTHER = 3
    }

    public enum SDL_PenAxis : int
    {
        SDL_PEN_AXIS_PRESSURE = 0,
        SDL_PEN_AXIS_XTILT = 1,
        SDL_PEN_AXIS_YTILT = 2,
        SDL_PEN_AXIS_DISTANCE = 3,
        SDL_PEN_AXIS_ROTATION = 4,
        SDL_PEN_AXIS_SLIDER = 5,
        SDL_PEN_AXIS_TANGENTIAL_PRESSURE = 6,
        SDL_PEN_AXIS_COUNT = 7
    }

    public enum SDL_PixelFormat : int
    {
        SDL_PIXELFORMAT_UNKNOWN = 0,
        SDL_PIXELFORMAT_INDEX1LSB = 286261504,
        SDL_PIXELFORMAT_INDEX1MSB = 287310080,
        SDL_PIXELFORMAT_INDEX2LSB = 470811136,
        SDL_PIXELFORMAT_INDEX2MSB = 471859712,
        SDL_PIXELFORMAT_INDEX4LSB = 303039488,
        SDL_PIXELFORMAT_INDEX4MSB = 304088064,
        SDL_PIXELFORMAT_INDEX8 = 318769153,
        SDL_PIXELFORMAT_RGB332 = 336660481,
        SDL_PIXELFORMAT_XRGB4444 = 353504258,
        SDL_PIXELFORMAT_XBGR4444 = 357698562,
        SDL_PIXELFORMAT_XRGB1555 = 353570562,
        SDL_PIXELFORMAT_XBGR1555 = 357764866,
        SDL_PIXELFORMAT_ARGB4444 = 355602434,
        SDL_PIXELFORMAT_RGBA4444 = 356651010,
        SDL_PIXELFORMAT_ABGR4444 = 359796738,
        SDL_PIXELFORMAT_BGRA4444 = 360845314,
        SDL_PIXELFORMAT_ARGB1555 = 355667970,
        SDL_PIXELFORMAT_RGBA5551 = 356782082,
        SDL_PIXELFORMAT_ABGR1555 = 359862274,
        SDL_PIXELFORMAT_BGRA5551 = 360976386,
        SDL_PIXELFORMAT_RGB565 = 353701890,
        SDL_PIXELFORMAT_BGR565 = 357896194,
        SDL_PIXELFORMAT_RGB24 = 386930691,
        SDL_PIXELFORMAT_BGR24 = 390076419,
        SDL_PIXELFORMAT_XRGB8888 = 370546692,
        SDL_PIXELFORMAT_RGBX8888 = 371595268,
        SDL_PIXELFORMAT_XBGR8888 = 374740996,
        SDL_PIXELFORMAT_BGRX8888 = 375789572,
        SDL_PIXELFORMAT_ARGB8888 = 372645892,
        SDL_PIXELFORMAT_RGBA8888 = 373694468,
        SDL_PIXELFORMAT_ABGR8888 = 376840196,
        SDL_PIXELFORMAT_BGRA8888 = 377888772,
        SDL_PIXELFORMAT_XRGB2101010 = 370614276,
        SDL_PIXELFORMAT_XBGR2101010 = 374808580,
        SDL_PIXELFORMAT_ARGB2101010 = 372711428,
        SDL_PIXELFORMAT_ABGR2101010 = 376905732,
        SDL_PIXELFORMAT_RGB48 = 403714054,
        SDL_PIXELFORMAT_BGR48 = 406859782,
        SDL_PIXELFORMAT_RGBA64 = 404766728,
        SDL_PIXELFORMAT_ARGB64 = 405815304,
        SDL_PIXELFORMAT_BGRA64 = 407912456,
        SDL_PIXELFORMAT_ABGR64 = 408961032,
        SDL_PIXELFORMAT_RGB48_FLOAT = 437268486,
        SDL_PIXELFORMAT_BGR48_FLOAT = 440414214,
        SDL_PIXELFORMAT_RGBA64_FLOAT = 438321160,
        SDL_PIXELFORMAT_ARGB64_FLOAT = 439369736,
        SDL_PIXELFORMAT_BGRA64_FLOAT = 441466888,
        SDL_PIXELFORMAT_ABGR64_FLOAT = 442515464,
        SDL_PIXELFORMAT_RGB96_FLOAT = 454057996,
        SDL_PIXELFORMAT_BGR96_FLOAT = 457203724,
        SDL_PIXELFORMAT_RGBA128_FLOAT = 455114768,
        SDL_PIXELFORMAT_ARGB128_FLOAT = 456163344,
        SDL_PIXELFORMAT_BGRA128_FLOAT = 458260496,
        SDL_PIXELFORMAT_ABGR128_FLOAT = 459309072,
        SDL_PIXELFORMAT_YV12 = 842094169,
        SDL_PIXELFORMAT_IYUV = 1448433993,
        SDL_PIXELFORMAT_YUY2 = 844715353,
        SDL_PIXELFORMAT_UYVY = 1498831189,
        SDL_PIXELFORMAT_YVYU = 1431918169,
        SDL_PIXELFORMAT_NV12 = 842094158,
        SDL_PIXELFORMAT_NV21 = 825382478,
        SDL_PIXELFORMAT_P010 = 808530000,
        SDL_PIXELFORMAT_EXTERNAL_OES = 542328143,
        SDL_PIXELFORMAT_RGBA32 = 376840196,
        SDL_PIXELFORMAT_ARGB32 = 377888772,
        SDL_PIXELFORMAT_BGRA32 = 372645892,
        SDL_PIXELFORMAT_ABGR32 = 373694468,
        SDL_PIXELFORMAT_RGBX32 = 374740996,
        SDL_PIXELFORMAT_XRGB32 = 375789572,
        SDL_PIXELFORMAT_BGRX32 = 370546692,
        SDL_PIXELFORMAT_XBGR32 = 371595268
    }

    public enum SDL_PowerState : int
    {
        SDL_POWERSTATE_ERROR = -1,
        SDL_POWERSTATE_UNKNOWN = 0,
        SDL_POWERSTATE_ON_BATTERY = 1,
        SDL_POWERSTATE_NO_BATTERY = 2,
        SDL_POWERSTATE_CHARGING = 3,
        SDL_POWERSTATE_CHARGED = 4
    }

    public enum SDL_PropertyType : int
    {
        SDL_PROPERTY_TYPE_INVALID = 0,
        SDL_PROPERTY_TYPE_POINTER = 1,
        SDL_PROPERTY_TYPE_STRING = 2,
        SDL_PROPERTY_TYPE_NUMBER = 3,
        SDL_PROPERTY_TYPE_FLOAT = 4,
        SDL_PROPERTY_TYPE_BOOLEAN = 5
    }

    public enum SDL_RendererLogicalPresentation : int
    {
        SDL_LOGICAL_PRESENTATION_DISABLED = 0,
        SDL_LOGICAL_PRESENTATION_STRETCH = 1,
        SDL_LOGICAL_PRESENTATION_LETTERBOX = 2,
        SDL_LOGICAL_PRESENTATION_OVERSCAN = 3,
        SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4
    }

    public enum SDL_ScaleMode : int
    {
        SDL_SCALEMODE_NEAREST = 0,
        SDL_SCALEMODE_LINEAR = 1
    }

    public enum SDL_Scancode : int
    {
        SDL_SCANCODE_UNKNOWN = 0,
        SDL_SCANCODE_A = 4,
        SDL_SCANCODE_B = 5,
        SDL_SCANCODE_C = 6,
        SDL_SCANCODE_D = 7,
        SDL_SCANCODE_E = 8,
        SDL_SCANCODE_F = 9,
        SDL_SCANCODE_G = 10,
        SDL_SCANCODE_H = 11,
        SDL_SCANCODE_I = 12,
        SDL_SCANCODE_J = 13,
        SDL_SCANCODE_K = 14,
        SDL_SCANCODE_L = 15,
        SDL_SCANCODE_M = 16,
        SDL_SCANCODE_N = 17,
        SDL_SCANCODE_O = 18,
        SDL_SCANCODE_P = 19,
        SDL_SCANCODE_Q = 20,
        SDL_SCANCODE_R = 21,
        SDL_SCANCODE_S = 22,
        SDL_SCANCODE_T = 23,
        SDL_SCANCODE_U = 24,
        SDL_SCANCODE_V = 25,
        SDL_SCANCODE_W = 26,
        SDL_SCANCODE_X = 27,
        SDL_SCANCODE_Y = 28,
        SDL_SCANCODE_Z = 29,
        SDL_SCANCODE_1 = 30,
        SDL_SCANCODE_2 = 31,
        SDL_SCANCODE_3 = 32,
        SDL_SCANCODE_4 = 33,
        SDL_SCANCODE_5 = 34,
        SDL_SCANCODE_6 = 35,
        SDL_SCANCODE_7 = 36,
        SDL_SCANCODE_8 = 37,
        SDL_SCANCODE_9 = 38,
        SDL_SCANCODE_0 = 39,
        SDL_SCANCODE_RETURN = 40,
        SDL_SCANCODE_ESCAPE = 41,
        SDL_SCANCODE_BACKSPACE = 42,
        SDL_SCANCODE_TAB = 43,
        SDL_SCANCODE_SPACE = 44,
        SDL_SCANCODE_MINUS = 45,
        SDL_SCANCODE_EQUALS = 46,
        SDL_SCANCODE_LEFTBRACKET = 47,
        SDL_SCANCODE_RIGHTBRACKET = 48,
        SDL_SCANCODE_BACKSLASH = 49,
        SDL_SCANCODE_NONUSHASH = 50,
        SDL_SCANCODE_SEMICOLON = 51,
        SDL_SCANCODE_APOSTROPHE = 52,
        SDL_SCANCODE_GRAVE = 53,
        SDL_SCANCODE_COMMA = 54,
        SDL_SCANCODE_PERIOD = 55,
        SDL_SCANCODE_SLASH = 56,
        SDL_SCANCODE_CAPSLOCK = 57,
        SDL_SCANCODE_F1 = 58,
        SDL_SCANCODE_F2 = 59,
        SDL_SCANCODE_F3 = 60,
        SDL_SCANCODE_F4 = 61,
        SDL_SCANCODE_F5 = 62,
        SDL_SCANCODE_F6 = 63,
        SDL_SCANCODE_F7 = 64,
        SDL_SCANCODE_F8 = 65,
        SDL_SCANCODE_F9 = 66,
        SDL_SCANCODE_F10 = 67,
        SDL_SCANCODE_F11 = 68,
        SDL_SCANCODE_F12 = 69,
        SDL_SCANCODE_PRINTSCREEN = 70,
        SDL_SCANCODE_SCROLLLOCK = 71,
        SDL_SCANCODE_PAUSE = 72,
        SDL_SCANCODE_INSERT = 73,
        SDL_SCANCODE_HOME = 74,
        SDL_SCANCODE_PAGEUP = 75,
        SDL_SCANCODE_DELETE = 76,
        SDL_SCANCODE_END = 77,
        SDL_SCANCODE_PAGEDOWN = 78,
        SDL_SCANCODE_RIGHT = 79,
        SDL_SCANCODE_LEFT = 80,
        SDL_SCANCODE_DOWN = 81,
        SDL_SCANCODE_UP = 82,
        SDL_SCANCODE_NUMLOCKCLEAR = 83,
        SDL_SCANCODE_KP_DIVIDE = 84,
        SDL_SCANCODE_KP_MULTIPLY = 85,
        SDL_SCANCODE_KP_MINUS = 86,
        SDL_SCANCODE_KP_PLUS = 87,
        SDL_SCANCODE_KP_ENTER = 88,
        SDL_SCANCODE_KP_1 = 89,
        SDL_SCANCODE_KP_2 = 90,
        SDL_SCANCODE_KP_3 = 91,
        SDL_SCANCODE_KP_4 = 92,
        SDL_SCANCODE_KP_5 = 93,
        SDL_SCANCODE_KP_6 = 94,
        SDL_SCANCODE_KP_7 = 95,
        SDL_SCANCODE_KP_8 = 96,
        SDL_SCANCODE_KP_9 = 97,
        SDL_SCANCODE_KP_0 = 98,
        SDL_SCANCODE_KP_PERIOD = 99,
        SDL_SCANCODE_NONUSBACKSLASH = 100,
        SDL_SCANCODE_APPLICATION = 101,
        SDL_SCANCODE_POWER = 102,
        SDL_SCANCODE_KP_EQUALS = 103,
        SDL_SCANCODE_F13 = 104,
        SDL_SCANCODE_F14 = 105,
        SDL_SCANCODE_F15 = 106,
        SDL_SCANCODE_F16 = 107,
        SDL_SCANCODE_F17 = 108,
        SDL_SCANCODE_F18 = 109,
        SDL_SCANCODE_F19 = 110,
        SDL_SCANCODE_F20 = 111,
        SDL_SCANCODE_F21 = 112,
        SDL_SCANCODE_F22 = 113,
        SDL_SCANCODE_F23 = 114,
        SDL_SCANCODE_F24 = 115,
        SDL_SCANCODE_EXECUTE = 116,
        SDL_SCANCODE_HELP = 117,
        SDL_SCANCODE_MENU = 118,
        SDL_SCANCODE_SELECT = 119,
        SDL_SCANCODE_STOP = 120,
        SDL_SCANCODE_AGAIN = 121,
        SDL_SCANCODE_UNDO = 122,
        SDL_SCANCODE_CUT = 123,
        SDL_SCANCODE_COPY = 124,
        SDL_SCANCODE_PASTE = 125,
        SDL_SCANCODE_FIND = 126,
        SDL_SCANCODE_MUTE = 127,
        SDL_SCANCODE_VOLUMEUP = 128,
        SDL_SCANCODE_VOLUMEDOWN = 129,
        SDL_SCANCODE_KP_COMMA = 133,
        SDL_SCANCODE_KP_EQUALSAS400 = 134,
        SDL_SCANCODE_INTERNATIONAL1 = 135,
        SDL_SCANCODE_INTERNATIONAL2 = 136,
        SDL_SCANCODE_INTERNATIONAL3 = 137,
        SDL_SCANCODE_INTERNATIONAL4 = 138,
        SDL_SCANCODE_INTERNATIONAL5 = 139,
        SDL_SCANCODE_INTERNATIONAL6 = 140,
        SDL_SCANCODE_INTERNATIONAL7 = 141,
        SDL_SCANCODE_INTERNATIONAL8 = 142,
        SDL_SCANCODE_INTERNATIONAL9 = 143,
        SDL_SCANCODE_LANG1 = 144,
        SDL_SCANCODE_LANG2 = 145,
        SDL_SCANCODE_LANG3 = 146,
        SDL_SCANCODE_LANG4 = 147,
        SDL_SCANCODE_LANG5 = 148,
        SDL_SCANCODE_LANG6 = 149,
        SDL_SCANCODE_LANG7 = 150,
        SDL_SCANCODE_LANG8 = 151,
        SDL_SCANCODE_LANG9 = 152,
        SDL_SCANCODE_ALTERASE = 153,
        SDL_SCANCODE_SYSREQ = 154,
        SDL_SCANCODE_CANCEL = 155,
        SDL_SCANCODE_CLEAR = 156,
        SDL_SCANCODE_PRIOR = 157,
        SDL_SCANCODE_RETURN2 = 158,
        SDL_SCANCODE_SEPARATOR = 159,
        SDL_SCANCODE_OUT = 160,
        SDL_SCANCODE_OPER = 161,
        SDL_SCANCODE_CLEARAGAIN = 162,
        SDL_SCANCODE_CRSEL = 163,
        SDL_SCANCODE_EXSEL = 164,
        SDL_SCANCODE_KP_00 = 176,
        SDL_SCANCODE_KP_000 = 177,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
        SDL_SCANCODE_DECIMALSEPARATOR = 179,
        SDL_SCANCODE_CURRENCYUNIT = 180,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181,
        SDL_SCANCODE_KP_LEFTPAREN = 182,
        SDL_SCANCODE_KP_RIGHTPAREN = 183,
        SDL_SCANCODE_KP_LEFTBRACE = 184,
        SDL_SCANCODE_KP_RIGHTBRACE = 185,
        SDL_SCANCODE_KP_TAB = 186,
        SDL_SCANCODE_KP_BACKSPACE = 187,
        SDL_SCANCODE_KP_A = 188,
        SDL_SCANCODE_KP_B = 189,
        SDL_SCANCODE_KP_C = 190,
        SDL_SCANCODE_KP_D = 191,
        SDL_SCANCODE_KP_E = 192,
        SDL_SCANCODE_KP_F = 193,
        SDL_SCANCODE_KP_XOR = 194,
        SDL_SCANCODE_KP_POWER = 195,
        SDL_SCANCODE_KP_PERCENT = 196,
        SDL_SCANCODE_KP_LESS = 197,
        SDL_SCANCODE_KP_GREATER = 198,
        SDL_SCANCODE_KP_AMPERSAND = 199,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200,
        SDL_SCANCODE_KP_VERTICALBAR = 201,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
        SDL_SCANCODE_KP_COLON = 203,
        SDL_SCANCODE_KP_HASH = 204,
        SDL_SCANCODE_KP_SPACE = 205,
        SDL_SCANCODE_KP_AT = 206,
        SDL_SCANCODE_KP_EXCLAM = 207,
        SDL_SCANCODE_KP_MEMSTORE = 208,
        SDL_SCANCODE_KP_MEMRECALL = 209,
        SDL_SCANCODE_KP_MEMCLEAR = 210,
        SDL_SCANCODE_KP_MEMADD = 211,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213,
        SDL_SCANCODE_KP_MEMDIVIDE = 214,
        SDL_SCANCODE_KP_PLUSMINUS = 215,
        SDL_SCANCODE_KP_CLEAR = 216,
        SDL_SCANCODE_KP_CLEARENTRY = 217,
        SDL_SCANCODE_KP_BINARY = 218,
        SDL_SCANCODE_KP_OCTAL = 219,
        SDL_SCANCODE_KP_DECIMAL = 220,
        SDL_SCANCODE_KP_HEXADECIMAL = 221,
        SDL_SCANCODE_LCTRL = 224,
        SDL_SCANCODE_LSHIFT = 225,
        SDL_SCANCODE_LALT = 226,
        SDL_SCANCODE_LGUI = 227,
        SDL_SCANCODE_RCTRL = 228,
        SDL_SCANCODE_RSHIFT = 229,
        SDL_SCANCODE_RALT = 230,
        SDL_SCANCODE_RGUI = 231,
        SDL_SCANCODE_MODE = 257,
        SDL_SCANCODE_SLEEP = 258,
        SDL_SCANCODE_WAKE = 259,
        SDL_SCANCODE_CHANNEL_INCREMENT = 260,
        SDL_SCANCODE_CHANNEL_DECREMENT = 261,
        SDL_SCANCODE_MEDIA_PLAY = 262,
        SDL_SCANCODE_MEDIA_PAUSE = 263,
        SDL_SCANCODE_MEDIA_RECORD = 264,
        SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,
        SDL_SCANCODE_MEDIA_REWIND = 266,
        SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,
        SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268,
        SDL_SCANCODE_MEDIA_STOP = 269,
        SDL_SCANCODE_MEDIA_EJECT = 270,
        SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,
        SDL_SCANCODE_MEDIA_SELECT = 272,
        SDL_SCANCODE_AC_NEW = 273,
        SDL_SCANCODE_AC_OPEN = 274,
        SDL_SCANCODE_AC_CLOSE = 275,
        SDL_SCANCODE_AC_EXIT = 276,
        SDL_SCANCODE_AC_SAVE = 277,
        SDL_SCANCODE_AC_PRINT = 278,
        SDL_SCANCODE_AC_PROPERTIES = 279,
        SDL_SCANCODE_AC_SEARCH = 280,
        SDL_SCANCODE_AC_HOME = 281,
        SDL_SCANCODE_AC_BACK = 282,
        SDL_SCANCODE_AC_FORWARD = 283,
        SDL_SCANCODE_AC_STOP = 284,
        SDL_SCANCODE_AC_REFRESH = 285,
        SDL_SCANCODE_AC_BOOKMARKS = 286,
        SDL_SCANCODE_SOFTLEFT = 287,
        SDL_SCANCODE_SOFTRIGHT = 288,
        SDL_SCANCODE_CALL = 289,
        SDL_SCANCODE_ENDCALL = 290,
        SDL_SCANCODE_RESERVED = 400,
        SDL_SCANCODE_COUNT = 512
    }

    public enum SDL_SensorType : int
    {
        SDL_SENSOR_INVALID = -1,
        SDL_SENSOR_UNKNOWN = 0,
        SDL_SENSOR_ACCEL = 1,
        SDL_SENSOR_GYRO = 2,
        SDL_SENSOR_ACCEL_L = 3,
        SDL_SENSOR_GYRO_L = 4,
        SDL_SENSOR_ACCEL_R = 5,
        SDL_SENSOR_GYRO_R = 6
    }

    public enum SDL_SystemCursor : int
    {
        SDL_SYSTEM_CURSOR_DEFAULT = 0,
        SDL_SYSTEM_CURSOR_TEXT = 1,
        SDL_SYSTEM_CURSOR_WAIT = 2,
        SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
        SDL_SYSTEM_CURSOR_PROGRESS = 4,
        SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5,
        SDL_SYSTEM_CURSOR_NESW_RESIZE = 6,
        SDL_SYSTEM_CURSOR_EW_RESIZE = 7,
        SDL_SYSTEM_CURSOR_NS_RESIZE = 8,
        SDL_SYSTEM_CURSOR_MOVE = 9,
        SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10,
        SDL_SYSTEM_CURSOR_POINTER = 11,
        SDL_SYSTEM_CURSOR_NW_RESIZE = 12,
        SDL_SYSTEM_CURSOR_N_RESIZE = 13,
        SDL_SYSTEM_CURSOR_NE_RESIZE = 14,
        SDL_SYSTEM_CURSOR_E_RESIZE = 15,
        SDL_SYSTEM_CURSOR_SE_RESIZE = 16,
        SDL_SYSTEM_CURSOR_S_RESIZE = 17,
        SDL_SYSTEM_CURSOR_SW_RESIZE = 18,
        SDL_SYSTEM_CURSOR_W_RESIZE = 19,
        SDL_SYSTEM_CURSOR_COUNT = 20
    }

    public enum SDL_SystemTheme : int
    {
        SDL_SYSTEM_THEME_UNKNOWN = 0,
        SDL_SYSTEM_THEME_LIGHT = 1,
        SDL_SYSTEM_THEME_DARK = 2
    }

    public enum SDL_TextureAccess : int
    {
        SDL_TEXTUREACCESS_STATIC = 0,
        SDL_TEXTUREACCESS_STREAMING = 1,
        SDL_TEXTUREACCESS_TARGET = 2
    }

    public enum SDL_TimeFormat : int
    {
        SDL_TIME_FORMAT_24HR = 0,
        SDL_TIME_FORMAT_12HR = 1
    }

    public enum SDL_TouchDeviceType : int
    {
        SDL_TOUCH_DEVICE_INVALID = -1,
        SDL_TOUCH_DEVICE_DIRECT = 0,
        SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
        SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_AsyncIO
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_AsyncIOQueue
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Camera
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Cursor
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_DisplayModeData
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Environment
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Gamepad
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GLContextState
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUBuffer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUCommandBuffer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUComputePass
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUComputePipeline
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUCopyPass
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUDevice
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUFence
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUGraphicsPipeline
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPURenderPass
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUSampler
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUShader
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUTexture
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_GPUTransferBuffer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Haptic
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_hid_device
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_iconv_data_t
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_IOStream
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Joystick
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Process
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Renderer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Sensor
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_SharedObject
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Storage
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Tray
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_TrayEntry
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_TrayMenu
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_Window
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_AppEvent_func
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_Event*, SDL_AppResult> Pointer;

        public SDL_AppEvent_func(delegate* unmanaged[Cdecl]<void*, SDL_Event*, SDL_AppResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_AppInit_func
    {
        public delegate* unmanaged[Cdecl]<void**, int, CString*, SDL_AppResult> Pointer;

        public SDL_AppInit_func(delegate* unmanaged[Cdecl]<void**, int, CString*, SDL_AppResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_AppIterate_func
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_AppResult> Pointer;

        public SDL_AppIterate_func(delegate* unmanaged[Cdecl]<void*, SDL_AppResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_AppQuit_func
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_AppResult, void> Pointer;

        public SDL_AppQuit_func(delegate* unmanaged[Cdecl]<void*, SDL_AppResult, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_AssertionHandler
    {
        public delegate* unmanaged[Cdecl]<SDL_AssertData*, void*, SDL_AssertState> Pointer;

        public SDL_AssertionHandler(delegate* unmanaged[Cdecl]<SDL_AssertData*, void*, SDL_AssertState> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_AudioDeviceID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_AudioDeviceID data) => data.Data;
        public static implicit operator SDL_AudioDeviceID(uint data) => new SDL_AudioDeviceID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_BlendMode
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_BlendMode data) => data.Data;
        public static implicit operator SDL_BlendMode(uint data) => new SDL_BlendMode() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_calloc_func
    {
        public delegate* unmanaged[Cdecl]<ulong, ulong, void*> Pointer;

        public SDL_calloc_func(delegate* unmanaged[Cdecl]<ulong, ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_CameraID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_CameraID data) => data.Data;
        public static implicit operator SDL_CameraID(uint data) => new SDL_CameraID() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_CleanupPropertyCallback
    {
        public delegate* unmanaged[Cdecl]<void*, void*, void> Pointer;

        public SDL_CleanupPropertyCallback(delegate* unmanaged[Cdecl]<void*, void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_ClipboardCleanupCallback
    {
        public delegate* unmanaged[Cdecl]<void*, void> Pointer;

        public SDL_ClipboardCleanupCallback(delegate* unmanaged[Cdecl]<void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_ClipboardDataCallback
    {
        public delegate* unmanaged[Cdecl]<void*, CString, ulong*, void*> Pointer;

        public SDL_ClipboardDataCallback(delegate* unmanaged[Cdecl]<void*, CString, ulong*, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_CompareCallback
    {
        public delegate* unmanaged[Cdecl]<void*, void*, int> Pointer;

        public SDL_CompareCallback(delegate* unmanaged[Cdecl]<void*, void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_CompareCallback_r
    {
        public delegate* unmanaged[Cdecl]<void*, void*, void*, int> Pointer;

        public SDL_CompareCallback_r(delegate* unmanaged[Cdecl]<void*, void*, void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_DialogFileCallback
    {
        public delegate* unmanaged[Cdecl]<void*, CString*, int, void> Pointer;

        public SDL_DialogFileCallback(delegate* unmanaged[Cdecl]<void*, CString*, int, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_DisplayID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_DisplayID data) => data.Data;
        public static implicit operator SDL_DisplayID(uint data) => new SDL_DisplayID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_EGLAttrib
    {
        [FieldOffset(0)]
        public IntPtr Data;

        public static implicit operator IntPtr(SDL_EGLAttrib data) => data.Data;
        public static implicit operator SDL_EGLAttrib(IntPtr data) => new SDL_EGLAttrib() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_EGLAttribArrayCallback
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_EGLAttrib*> Pointer;

        public SDL_EGLAttribArrayCallback(delegate* unmanaged[Cdecl]<void*, SDL_EGLAttrib*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_EGLConfig
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLConfig data) => data.Data;
        public static implicit operator SDL_EGLConfig(void* data) => new SDL_EGLConfig() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_EGLDisplay
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLDisplay data) => data.Data;
        public static implicit operator SDL_EGLDisplay(void* data) => new SDL_EGLDisplay() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_EGLint
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_EGLint data) => data.Data;
        public static implicit operator SDL_EGLint(int data) => new SDL_EGLint() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_EGLIntArrayCallback
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_EGLDisplay, SDL_EGLConfig, SDL_EGLint*> Pointer;

        public SDL_EGLIntArrayCallback(delegate* unmanaged[Cdecl]<void*, SDL_EGLDisplay, SDL_EGLConfig, SDL_EGLint*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_EGLSurface
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLSurface data) => data.Data;
        public static implicit operator SDL_EGLSurface(void* data) => new SDL_EGLSurface() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_EnumerateDirectoryCallback
    {
        public delegate* unmanaged[Cdecl]<void*, CString, CString, SDL_EnumerationResult> Pointer;

        public SDL_EnumerateDirectoryCallback(delegate* unmanaged[Cdecl]<void*, CString, CString, SDL_EnumerationResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_EnumeratePropertiesCallback
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_PropertiesID, CString, void> Pointer;

        public SDL_EnumeratePropertiesCallback(delegate* unmanaged[Cdecl]<void*, SDL_PropertiesID, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_EventFilter
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_Event*, CBool> Pointer;

        public SDL_EventFilter(delegate* unmanaged[Cdecl]<void*, SDL_Event*, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_FingerID
    {
        [FieldOffset(0)]
        public ulong Data;

        public static implicit operator ulong(SDL_FingerID data) => data.Data;
        public static implicit operator SDL_FingerID(ulong data) => new SDL_FingerID() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_free_func
    {
        public delegate* unmanaged[Cdecl]<void*, void> Pointer;

        public SDL_free_func(delegate* unmanaged[Cdecl]<void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_FunctionPointer
    {
        public delegate* unmanaged[Cdecl]<void> Pointer;

        public SDL_FunctionPointer(delegate* unmanaged[Cdecl]<void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_GLContext
    {
        [FieldOffset(0)]
        public SDL_GLContextState* Data;

        public static implicit operator SDL_GLContextState*(SDL_GLContext data) => data.Data;
        public static implicit operator SDL_GLContext(SDL_GLContextState* data) => new SDL_GLContext() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_GlobFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_GlobFlags data) => data.Data;
        public static implicit operator SDL_GlobFlags(uint data) => new SDL_GlobFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_GPUBufferUsageFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_GPUBufferUsageFlags data) => data.Data;
        public static implicit operator SDL_GPUBufferUsageFlags(uint data) => new SDL_GPUBufferUsageFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
    public partial struct SDL_GPUColorComponentFlags
    {
        [FieldOffset(0)]
        public byte Data;

        public static implicit operator byte(SDL_GPUColorComponentFlags data) => data.Data;
        public static implicit operator SDL_GPUColorComponentFlags(byte data) => new SDL_GPUColorComponentFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_GPUShaderFormat
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_GPUShaderFormat data) => data.Data;
        public static implicit operator SDL_GPUShaderFormat(uint data) => new SDL_GPUShaderFormat() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_GPUTextureUsageFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_GPUTextureUsageFlags data) => data.Data;
        public static implicit operator SDL_GPUTextureUsageFlags(uint data) => new SDL_GPUTextureUsageFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_HapticID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_HapticID data) => data.Data;
        public static implicit operator SDL_HapticID(uint data) => new SDL_HapticID() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_HintCallback
    {
        public delegate* unmanaged[Cdecl]<void*, CString, CString, CString, void> Pointer;

        public SDL_HintCallback(delegate* unmanaged[Cdecl]<void*, CString, CString, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_HitTest
    {
        public delegate* unmanaged[Cdecl]<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> Pointer;

        public SDL_HitTest(delegate* unmanaged[Cdecl]<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_iconv_t
    {
        [FieldOffset(0)]
        public SDL_iconv_data_t* Data;

        public static implicit operator SDL_iconv_data_t*(SDL_iconv_t data) => data.Data;
        public static implicit operator SDL_iconv_t(SDL_iconv_data_t* data) => new SDL_iconv_t() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_InitFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_InitFlags data) => data.Data;
        public static implicit operator SDL_InitFlags(uint data) => new SDL_InitFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_JoystickID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_JoystickID data) => data.Data;
        public static implicit operator SDL_JoystickID(uint data) => new SDL_JoystickID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_KeyboardID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_KeyboardID data) => data.Data;
        public static implicit operator SDL_KeyboardID(uint data) => new SDL_KeyboardID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_Keycode
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_Keycode data) => data.Data;
        public static implicit operator SDL_Keycode(uint data) => new SDL_Keycode() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
    public partial struct SDL_Keymod
    {
        [FieldOffset(0)]
        public ushort Data;

        public static implicit operator ushort(SDL_Keymod data) => data.Data;
        public static implicit operator SDL_Keymod(ushort data) => new SDL_Keymod() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_LogOutputFunction
    {
        public delegate* unmanaged[Cdecl]<void*, int, SDL_LogPriority, CString, void> Pointer;

        public SDL_LogOutputFunction(delegate* unmanaged[Cdecl]<void*, int, SDL_LogPriority, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_main_func
    {
        public delegate* unmanaged[Cdecl]<int, CString*, int> Pointer;

        public SDL_main_func(delegate* unmanaged[Cdecl]<int, CString*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_MainThreadCallback
    {
        public delegate* unmanaged[Cdecl]<void*, void> Pointer;

        public SDL_MainThreadCallback(delegate* unmanaged[Cdecl]<void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_malloc_func
    {
        public delegate* unmanaged[Cdecl]<ulong, void*> Pointer;

        public SDL_malloc_func(delegate* unmanaged[Cdecl]<ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_MessageBoxButtonFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_MessageBoxButtonFlags data) => data.Data;
        public static implicit operator SDL_MessageBoxButtonFlags(uint data) => new SDL_MessageBoxButtonFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_MessageBoxFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_MessageBoxFlags data) => data.Data;
        public static implicit operator SDL_MessageBoxFlags(uint data) => new SDL_MessageBoxFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_MetalView
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_MetalView data) => data.Data;
        public static implicit operator SDL_MetalView(void* data) => new SDL_MetalView() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_MouseButtonFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_MouseButtonFlags data) => data.Data;
        public static implicit operator SDL_MouseButtonFlags(uint data) => new SDL_MouseButtonFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_MouseID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_MouseID data) => data.Data;
        public static implicit operator SDL_MouseID(uint data) => new SDL_MouseID() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_NSTimerCallback
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_TimerID, ulong, ulong> Pointer;

        public SDL_NSTimerCallback(delegate* unmanaged[Cdecl]<void*, SDL_TimerID, ulong, ulong> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_PenID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_PenID data) => data.Data;
        public static implicit operator SDL_PenID(uint data) => new SDL_PenID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_PenInputFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_PenInputFlags data) => data.Data;
        public static implicit operator SDL_PenInputFlags(uint data) => new SDL_PenInputFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_PropertiesID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_PropertiesID data) => data.Data;
        public static implicit operator SDL_PropertiesID(uint data) => new SDL_PropertiesID() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_realloc_func
    {
        public delegate* unmanaged[Cdecl]<void*, ulong, void*> Pointer;

        public SDL_realloc_func(delegate* unmanaged[Cdecl]<void*, ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_SensorID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_SensorID data) => data.Data;
        public static implicit operator SDL_SensorID(uint data) => new SDL_SensorID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_SurfaceFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_SurfaceFlags data) => data.Data;
        public static implicit operator SDL_SurfaceFlags(uint data) => new SDL_SurfaceFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_Time
    {
        [FieldOffset(0)]
        public long Data;

        public static implicit operator long(SDL_Time data) => data.Data;
        public static implicit operator SDL_Time(long data) => new SDL_Time() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_TimerCallback
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_TimerID, uint, uint> Pointer;

        public SDL_TimerCallback(delegate* unmanaged[Cdecl]<void*, SDL_TimerID, uint, uint> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_TimerID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_TimerID data) => data.Data;
        public static implicit operator SDL_TimerID(uint data) => new SDL_TimerID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_TouchID
    {
        [FieldOffset(0)]
        public ulong Data;

        public static implicit operator ulong(SDL_TouchID data) => data.Data;
        public static implicit operator SDL_TouchID(ulong data) => new SDL_TouchID() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct SDL_TrayCallback
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_TrayEntry*, void> Pointer;

        public SDL_TrayCallback(delegate* unmanaged[Cdecl]<void*, SDL_TrayEntry*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_TrayEntryFlags
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_TrayEntryFlags data) => data.Data;
        public static implicit operator SDL_TrayEntryFlags(uint data) => new SDL_TrayEntryFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public partial struct SDL_WindowFlags
    {
        [FieldOffset(0)]
        public ulong Data;

        public static implicit operator ulong(SDL_WindowFlags data) => data.Data;
        public static implicit operator SDL_WindowFlags(ulong data) => new SDL_WindowFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public partial struct SDL_WindowID
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(SDL_WindowID data) => data.Data;
        public static implicit operator SDL_WindowID(uint data) => new SDL_WindowID() { Data = data };
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CBool_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, CBool, CBool> Pointer;

        public FnPtr_VoidPtr_CBool_CBool(delegate* unmanaged[Cdecl]<void*, CBool, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_CString_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, CString, CString, CBool> Pointer;

        public FnPtr_VoidPtr_CString_CString_CBool(delegate* unmanaged[Cdecl]<void*, CString, CString, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_VoidPtr_Ulong_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, CString, void*, ulong, CBool> Pointer;

        public FnPtr_VoidPtr_CString_VoidPtr_Ulong_CBool(delegate* unmanaged[Cdecl]<void*, CString, void*, ulong, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_SDLEnumerateDirectoryCallback_VoidPtr_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, CString, SDL_EnumerateDirectoryCallback, void*, CBool> Pointer;

        public FnPtr_VoidPtr_CString_SDLEnumerateDirectoryCallback_VoidPtr_CBool(delegate* unmanaged[Cdecl]<void*, CString, SDL_EnumerateDirectoryCallback, void*, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_SDLPathInfoPtr_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, CString, SDL_PathInfo*, CBool> Pointer;

        public FnPtr_VoidPtr_CString_SDLPathInfoPtr_CBool(delegate* unmanaged[Cdecl]<void*, CString, SDL_PathInfo*, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, CString, CBool> Pointer;

        public FnPtr_VoidPtr_CString_CBool(delegate* unmanaged[Cdecl]<void*, CString, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_VoidPtr_Int_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, void*, int, CBool> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Int_CBool(delegate* unmanaged[Cdecl]<void*, void*, int, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLIOStatusPtr_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_IOStatus*, CBool> Pointer;

        public FnPtr_VoidPtr_SDLIOStatusPtr_CBool(delegate* unmanaged[Cdecl]<void*, SDL_IOStatus*, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Ushort_Ushort_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, ushort, ushort, CBool> Pointer;

        public FnPtr_VoidPtr_Ushort_Ushort_CBool(delegate* unmanaged[Cdecl]<void*, ushort, ushort, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Byte_Byte_Byte_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, byte, byte, byte, CBool> Pointer;

        public FnPtr_VoidPtr_Byte_Byte_Byte_CBool(delegate* unmanaged[Cdecl]<void*, byte, byte, byte, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CBool
    {
        public delegate* unmanaged[Cdecl]<void*, CBool> Pointer;

        public FnPtr_VoidPtr_CBool(delegate* unmanaged[Cdecl]<void*, CBool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_UlongPtr_VoidPtr
    {
        public delegate* unmanaged[Cdecl]<void*, CString, ulong*, void*> Pointer;

        public FnPtr_VoidPtr_CString_UlongPtr_VoidPtr(delegate* unmanaged[Cdecl]<void*, CString, ulong*, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_VoidPtr_Int
    {
        public delegate* unmanaged[Cdecl]<void*, void*, int> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Int(delegate* unmanaged[Cdecl]<void*, void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_Int_CStringPtr_Int
    {
        public delegate* unmanaged[Cdecl]<int, CString*, int> Pointer;

        public FnPtr_Int_CStringPtr_Int(delegate* unmanaged[Cdecl]<int, CString*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_VoidPtr_VoidPtr_Int
    {
        public delegate* unmanaged[Cdecl]<void*, void*, void*, int> Pointer;

        public FnPtr_VoidPtr_VoidPtr_VoidPtr_Int(delegate* unmanaged[Cdecl]<void*, void*, void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLEventPtr_SDLAppResult
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_Event*, SDL_AppResult> Pointer;

        public FnPtr_VoidPtr_SDLEventPtr_SDLAppResult(delegate* unmanaged[Cdecl]<void*, SDL_Event*, SDL_AppResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLAppResult
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_AppResult> Pointer;

        public FnPtr_VoidPtr_SDLAppResult(delegate* unmanaged[Cdecl]<void*, SDL_AppResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtrPtr_Int_CStringPtr_SDLAppResult
    {
        public delegate* unmanaged[Cdecl]<void**, int, CString*, SDL_AppResult> Pointer;

        public FnPtr_VoidPtrPtr_Int_CStringPtr_SDLAppResult(delegate* unmanaged[Cdecl]<void**, int, CString*, SDL_AppResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState
    {
        public delegate* unmanaged[Cdecl]<SDL_AssertData*, void*, SDL_AssertState> Pointer;

        public FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState(delegate* unmanaged[Cdecl]<SDL_AssertData*, void*, SDL_AssertState> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLEGLAttribPtr
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_EGLAttrib*> Pointer;

        public FnPtr_VoidPtr_SDLEGLAttribPtr(delegate* unmanaged[Cdecl]<void*, SDL_EGLAttrib*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLEGLDisplay_SDLEGLConfig_SDLEGLintPtr
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_EGLDisplay, SDL_EGLConfig, SDL_EGLint*> Pointer;

        public FnPtr_VoidPtr_SDLEGLDisplay_SDLEGLConfig_SDLEGLintPtr(delegate* unmanaged[Cdecl]<void*, SDL_EGLDisplay, SDL_EGLConfig, SDL_EGLint*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_CString_SDLEnumerationResult
    {
        public delegate* unmanaged[Cdecl]<void*, CString, CString, SDL_EnumerationResult> Pointer;

        public FnPtr_VoidPtr_CString_CString_SDLEnumerationResult(delegate* unmanaged[Cdecl]<void*, CString, CString, SDL_EnumerationResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult
    {
        public delegate* unmanaged[Cdecl]<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> Pointer;

        public FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult(delegate* unmanaged[Cdecl]<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Long_SDLIOWhence_Long
    {
        public delegate* unmanaged[Cdecl]<void*, long, SDL_IOWhence, long> Pointer;

        public FnPtr_VoidPtr_Long_SDLIOWhence_Long(delegate* unmanaged[Cdecl]<void*, long, SDL_IOWhence, long> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Long
    {
        public delegate* unmanaged[Cdecl]<void*, long> Pointer;

        public FnPtr_VoidPtr_Long(delegate* unmanaged[Cdecl]<void*, long> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong
    {
        public delegate* unmanaged[Cdecl]<void*, void*, ulong, SDL_IOStatus*, ulong> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong(delegate* unmanaged[Cdecl]<void*, void*, ulong, SDL_IOStatus*, ulong> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLTimerID_Uint_Uint
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_TimerID, uint, uint> Pointer;

        public FnPtr_VoidPtr_SDLTimerID_Uint_Uint(delegate* unmanaged[Cdecl]<void*, SDL_TimerID, uint, uint> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLTimerID_Ulong_Ulong
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_TimerID, ulong, ulong> Pointer;

        public FnPtr_VoidPtr_SDLTimerID_Ulong_Ulong(delegate* unmanaged[Cdecl]<void*, SDL_TimerID, ulong, ulong> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Ulong
    {
        public delegate* unmanaged[Cdecl]<void*, ulong> Pointer;

        public FnPtr_VoidPtr_Ulong(delegate* unmanaged[Cdecl]<void*, ulong> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CString_CString_CString_Void
    {
        public delegate* unmanaged[Cdecl]<void*, CString, CString, CString, void> Pointer;

        public FnPtr_VoidPtr_CString_CString_CString_Void(delegate* unmanaged[Cdecl]<void*, CString, CString, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_CStringPtr_Int_Void
    {
        public delegate* unmanaged[Cdecl]<void*, CString*, int, void> Pointer;

        public FnPtr_VoidPtr_CStringPtr_Int_Void(delegate* unmanaged[Cdecl]<void*, CString*, int, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void
    {
        public delegate* unmanaged[Cdecl]<void*, int, SDL_LogPriority, CString, void> Pointer;

        public FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void(delegate* unmanaged[Cdecl]<void*, int, SDL_LogPriority, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Int_Void
    {
        public delegate* unmanaged[Cdecl]<void*, int, void> Pointer;

        public FnPtr_VoidPtr_Int_Void(delegate* unmanaged[Cdecl]<void*, int, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLAppResult_Void
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_AppResult, void> Pointer;

        public FnPtr_VoidPtr_SDLAppResult_Void(delegate* unmanaged[Cdecl]<void*, SDL_AppResult, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLPropertiesID_CString_Void
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_PropertiesID, CString, void> Pointer;

        public FnPtr_VoidPtr_SDLPropertiesID_CString_Void(delegate* unmanaged[Cdecl]<void*, SDL_PropertiesID, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_SDLTrayEntryPtr_Void
    {
        public delegate* unmanaged[Cdecl]<void*, SDL_TrayEntry*, void> Pointer;

        public FnPtr_VoidPtr_SDLTrayEntryPtr_Void(delegate* unmanaged[Cdecl]<void*, SDL_TrayEntry*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_VoidPtr_Void
    {
        public delegate* unmanaged[Cdecl]<void*, void*, void> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Void(delegate* unmanaged[Cdecl]<void*, void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Void
    {
        public delegate* unmanaged[Cdecl]<void*, void> Pointer;

        public FnPtr_VoidPtr_Void(delegate* unmanaged[Cdecl]<void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_Void
    {
        public delegate* unmanaged[Cdecl]<void> Pointer;

        public FnPtr_Void(delegate* unmanaged[Cdecl]<void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_Ulong_Ulong_VoidPtr
    {
        public delegate* unmanaged[Cdecl]<ulong, ulong, void*> Pointer;

        public FnPtr_Ulong_Ulong_VoidPtr(delegate* unmanaged[Cdecl]<ulong, ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_Ulong_VoidPtr
    {
        public delegate* unmanaged[Cdecl]<ulong, void*> Pointer;

        public FnPtr_Ulong_VoidPtr(delegate* unmanaged[Cdecl]<ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct FnPtr_VoidPtr_Ulong_VoidPtr
    {
        public delegate* unmanaged[Cdecl]<void*, ulong, void*> Pointer;

        public FnPtr_VoidPtr_Ulong_VoidPtr(delegate* unmanaged[Cdecl]<void*, ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }
}


