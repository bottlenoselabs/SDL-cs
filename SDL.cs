// <auto-generated>
//  This code was generated by the following tool on 2022-07-24 20:55:03 GMT+00:00:
//      https://github.com/bottlenoselabs/c2cs (v3.2.8.0)
//      
//  Changes to this file may cause incorrect behavior and will be lost if the code is
//      regenerated. To extend or add functionality use a partial class in a new file.
// </auto-generated>
// ReSharper disable All

#nullable enable
#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static bottlenoselabs.SDL.Runtime;

namespace bottlenoselabs
{
    public static unsafe partial class SDL
    {
        private const string LibraryName = "SDL2";

        #region API

        // Function @ SDL_sensor.h:242:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SensorGetNonPortableType(SDL_Sensor* sensor);

        // Function @ SDL_joystick.h:453:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickSetVirtualButton(SDL_Joystick* joystick, int button, byte value);

        // Function @ SDL_hidapi.h:243:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_hid_device* SDL_hid_open_path(CString path, int bExclusive);

        // Function @ SDL_joystick.h:965:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_JoystickHasRumble(SDL_Joystick* joystick);

        // Function @ SDL_keyboard.h:95:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* SDL_GetKeyboardState(int* numkeys);

        // Function @ SDL_assert.h:245:46
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AssertionHandler SDL_GetDefaultAssertionHandler();

        // Function @ SDL_hidapi.h:395:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_get_manufacturer_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

        // Function @ SDL_render.h:908:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RenderGetViewport(SDL_Renderer* renderer, SDL_Rect* rect);

        // Function @ SDL_sensor.h:181:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SensorGetDeviceNonPortableType(int device_index);

        // Function @ SDL_audio.h:1434:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnlockAudio();

        // Function @ SDL_video.h:308:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetVideoDriver(int index);

        // Function @ SDL_cpuinfo.h:249:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_Has3DNow();

        // Function @ SDL_audio.h:1448:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);

        // Function @ SDL_video.h:562:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode* mode);

        // Function @ SDL_audio.h:1277:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_DequeueAudio(SDL_AudioDeviceID dev, void* data, uint len);

        // Function @ SDL_surface.h:446:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetColorKey(SDL_Surface* surface, int flag, uint key);

        // Function @ SDL_haptic.h:1101:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticUpdateEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data);

        // Function @ SDL_keyboard.h:261:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_StartTextInput();

        // Function @ SDL_audio.h:1415:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LockAudioDevice(SDL_AudioDeviceID dev);

        // Function @ SDL_video.h:389:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetDisplayName(int displayIndex);

        // Function @ SDL_mutex.h:311:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SemPost(SDL_sem* sem);

        // Function @ SDL_joystick.h:772:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickEventState(int state);

        // Function @ SDL_video.h:1434:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Rect* SDL_GetWindowMouseRect(SDL_Window* window);

        // Function @ SDL_surface.h:482:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetColorKey(SDL_Surface* surface, uint* key);

        // Function @ SDL_events.h:1020:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);

        // Function @ SDL_video.h:1150:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_HideWindow(SDL_Window* window);

        // Function @ SDL_atomic.h:263:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_AtomicCAS(SDL_atomic_t* a, int oldval, int newval);

        // Function @ SDL_video.h:1390:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GetWindowMouseGrab(SDL_Window* window);

        // Function @ SDL_video.h:1071:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetWindowMaximumSize(SDL_Window* window, int* w, int* h);

        // Function @ SDL_gamecontroller.h:761:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);

        // Function @ SDL_pixels.h:497:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FreePalette(SDL_Palette* palette);

        // Function @ SDL_gamecontroller.h:974:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerHasRumbleTriggers(SDL_GameController* gamecontroller);

        // Function @ SDL_video.h:1533:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window);

        // Function @ SDL_atomic.h:106:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_AtomicTryLock(SDL_SpinLock* @lock);

        // Function @ SDL_log.h:393:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void* userdata);

        // Function @ SDL_video.h:436:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect* rect);

        // Function @ SDL_haptic.h:966:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick* joystick);

        // Function @ SDL_audio.h:1035:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AudioStreamPut(SDL_AudioStream* stream, void* buf, int len);

        // Function @ SDL_surface.h:582:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

        // Function @ SDL_pixels.h:379:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_PixelFormatEnumToMasks(uint format, int* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask);

        // Function @ SDL_sensor.h:191:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_SensorID SDL_SensorGetDeviceInstanceID(int device_index);

        // Function @ SDL_keyboard.h:298:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IsTextInputShown();

        // Function @ SDL_system.h:585:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_OnApplicationDidReceiveMemoryWarning();

        // Function @ SDL_audio.h:722:41
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);

        // Function @ SDL_rwops.h:211:36
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_RWops* SDL_RWFromFP(nint fp, CBool autoclose);

        // Function @ SDL_mouse.h:133:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetGlobalMouseState(int* x, int* y);

        // Function @ SDL_clipboard.h:71:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetClipboardText();

        // Function @ SDL_surface.h:347:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_LoadBMP_RW(SDL_RWops* src, int freesrc);

        // Function @ SDL_haptic.h:916:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_MouseIsHaptic();

        // Function @ SDL_gamecontroller.h:252:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerMapping(SDL_GameController* gamecontroller);

        // Function @ SDL_rwops.h:587:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_LoadFile(CString file, ulong* datasize);

        // Function @ SDL_gamecontroller.h:815:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerGetNumTouchpads(SDL_GameController* gamecontroller);

        // Function @ SDL_gamecontroller.h:679:1
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerHasAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

        // Function @ SDL_cpuinfo.h:160:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetCPUCacheLineSize();

        // Function @ SDL_gamecontroller.h:853:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerSetSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type, CBool enabled);

        // Function @ SDL_joystick.h:435:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickSetVirtualAxis(SDL_Joystick* joystick, int axis, short value);

        // Function @ SDL_joystick.h:657:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_JoystickGetAttached(SDL_Joystick* joystick);

        // Function @ SDL_gamecontroller.h:389:45
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameController* SDL_GameControllerFromPlayerIndex(int player_index);

        // Function @ SDL_rect.h:233:27
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_PointInFRect(SDL_FPoint* p, SDL_FRect* r);

        // Function @ SDL_audio.h:553:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetDefaultAudioInfo(CString* name, SDL_AudioSpec* spec, int iscapture);

        // Function @ SDL_gamecontroller.h:471:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_GameControllerGetVendor(SDL_GameController* gamecontroller);

        // Function @ SDL_render.h:1748:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RenderPresent(SDL_Renderer* renderer);

        // Function @ SDL_keyboard.h:281:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_StopTextInput();

        // Function @ SDL_gamecontroller.h:841:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerHasSensor(SDL_GameController* gamecontroller, SDL_SensorType type);

        // Function @ SDL_metal.h:102:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_Metal_GetDrawableSize(SDL_Window* window, int* w, int* h);

        // Function @ SDL_pixels.h:589:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetRGB(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b);

        // Function @ SDL_render.h:1409:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderCopy(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_Rect* dstrect);

        // Function @ SDL_system.h:581:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IsTablet();

        // Function @ SDL_render.h:1352:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderFillRect(SDL_Renderer* renderer, SDL_Rect* rect);

        // Function @ SDL_hidapi.h:269:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_write(SDL_hid_device* dev, byte* data, ulong length);

        // Function @ SDL_surface.h:620:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_SetClipRect(SDL_Surface* surface, SDL_Rect* rect);

        // Function @ SDL_sensor.h:288:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SensorUpdate();

        // Function @ SDL_gamecontroller.h:1026:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

        // Function @ SDL_gamecontroller.h:449:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerGetPlayerIndex(SDL_GameController* gamecontroller);

        // Function @ SDL_gamecontroller.h:647:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);

        // Function @ SDL_log.h:123:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogSetAllPriority(SDL_LogPriority priority);

        // Function @ SDL_shape.h:128:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowShape(SDL_Window* window, SDL_Surface* shape, SDL_WindowShapeMode* shape_mode);

        // Function @ SDL_pixels.h:424:43
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_PixelFormat* SDL_AllocFormat(uint pixel_format);

        // Function @ SDL_video.h:1717:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DestroyWindow(SDL_Window* window);

        // Function @ SDL_touch.h:104:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetTouchName(int index);

        // Function @ SDL_surface.h:800:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_FillRects(SDL_Surface* dst, SDL_Rect* rects, int count, uint color);

        // Function @ SDL_audio.h:978:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_ConvertAudio(SDL_AudioCVT* cvt);

        // Function @ SDL_gamecontroller.h:520:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerGetSerial(SDL_GameController* gamecontroller);

        // Function @ SDL_render.h:414:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetTextureColorMod(SDL_Texture* texture, byte r, byte g, byte b);

        // Function @ SDL_joystick.h:233:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_JoystickGetDeviceVendor(int device_index);

        // Function @ SDL_mouse.h:376:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Cursor* SDL_GetCursor();

        // Function @ SDL_mutex.h:268:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SemTryWait(SDL_sem* sem);

        // Function @ SDL_render.h:1453:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderCopyEx(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_Rect* dstrect, double angle, SDL_Point* center, SDL_RendererFlip flip);

        // Function @ SDL_render.h:433:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetTextureColorMod(SDL_Texture* texture, byte* r, byte* g, byte* b);

        // Function @ SDL_log.h:245:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogInfo(int category, CString fmt);

        // Function @ SDL_hidapi.h:229:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_hid_device* SDL_hid_open(ushort vendor_id, ushort product_id, CStringWide serial_number);

        // Function @ SDL_sensor.h:275:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SensorClose(SDL_Sensor* sensor);

        // Function @ SDL_assert.h:268:46
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AssertionHandler SDL_GetAssertionHandler(void** puserdata);

        // Function @ SDL_audio.h:339:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_AudioQuit();

        // Function @ SDL_mouse.h:310:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Cursor* SDL_CreateCursor(byte* data, byte* mask, int w, int h, int hot_x, int hot_y);

        // Function @ SDL_haptic.h:1202:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticSetGain(SDL_Haptic* haptic, int gain);

        // Function @ SDL_haptic.h:943:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickIsHaptic(SDL_Joystick* joystick);

        // Function @ SDL_rwops.h:623:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_ReadLE16(SDL_RWops* src);

        // Function @ SDL_surface.h:188:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_CreateRGBSurfaceWithFormat(uint flags, int width, int height, int depth, uint format);

        // Function @ SDL_joystick.h:1016:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_JoystickClose(SDL_Joystick* joystick);

        // Function @ SDL_gesture.h:91:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SaveDollarTemplate(SDL_GestureID gestureId, SDL_RWops* dst);

        // Function @ SDL_events.h:901:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_WaitEvent(SDL_Event* @event);

        // Function @ SDL_haptic.h:1027:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_HapticQuery(SDL_Haptic* haptic);

        // Function @ SDL_joystick.h:396:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickAttachVirtualEx(SDL_VirtualJoystickDesc* desc);

        // Function @ SDL_atomic.h:281:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AtomicSet(SDL_atomic_t* a, int v);

        // Function @ SDL_surface.h:312:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LockSurface(SDL_Surface* surface);

        // Function @ SDL_surface.h:462:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasColorKey(SDL_Surface* surface);

        // Function @ SDL_video.h:812:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetWindowFlags(SDL_Window* window);

        // Function @ SDL_joystick.h:345:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickAttachVirtual(SDL_JoystickType type, int naxes, int nbuttons, int nhats);

        // Function @ SDL_render.h:942:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RenderGetClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

        // Function @ SDL_system.h:169:29
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LinuxSetThreadPriority(long threadID, int priority);

        // Function @ SDL_joystick.h:325:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Joystick* SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);

        // Function @ SDL_joystick.h:587:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_JoystickGetFirmwareVersion(SDL_Joystick* joystick);

        // Function @ SDL_joystick.h:200:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickGetDevicePlayerIndex(int device_index);

        // Function @ SDL_video.h:1881:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GL_ResetAttributes();

        // Function @ SDL_video.h:339:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_VideoInit(CString driver_name);

        // Function @ SDL_hidapi.h:156:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_exit();

        // Function @ SDL_gesture.h:107:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops* src);

        // Function @ SDL_render.h:1529:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawRectF(SDL_Renderer* renderer, SDL_FRect* rect);

        // Function @ SDL_shape.h:82:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IsShapedWindow(SDL_Window* window);

        // Function @ SDL_system.h:151:34
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_DXGIGetOutputInfo(int displayIndex, int* adapterIndex, int* outputIndex);

        // Function @ SDL_render.h:458:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetTextureAlphaMod(SDL_Texture* texture, byte alpha);

        // Function @ SDL_render.h:1377:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderFillRects(SDL_Renderer* renderer, SDL_Rect* rects, int count);

        // Function @ SDL_haptic.h:1221:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticSetAutocenter(SDL_Haptic* haptic, int autocenter);

        // Function @ SDL_video.h:539:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode* mode);

        // Function @ SDL_shape.h:69:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_CreateShapedWindow(CString title, uint x, uint y, uint w, uint h, uint flags);

        // Function @ SDL_audio.h:1345:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);

        // Function @ SDL_video.h:794:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_GetWindowFromID(uint id);

        // Function @ SDL_cpuinfo.h:535:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_SIMDAlloc(ulong len);

        // Function @ SDL_haptic.h:1256:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticUnpause(SDL_Haptic* haptic);

        // Function @ SDL_video.h:1214:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowFullscreen(SDL_Window* window, uint flags);

        // Function @ SDL_mouse.h:403:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FreeCursor(SDL_Cursor* cursor);

        // Function @ SDL_surface.h:979:49
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode();

        // Function @ SDL_cpuinfo.h:337:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasSSE41();

        // Function @ SDL_log.h:287:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogError(int category, CString fmt);

        // Function @ SDL_rwops.h:343:36
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_RWops* SDL_AllocRW();

        // Function @ SDL_joystick.h:511:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickGetPlayerIndex(SDL_Joystick* joystick);

        // Function @ SDL_main.h:142:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_main(int argc, CString* argv);

        // Function @ SDL_haptic.h:1267:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticStopAll(SDL_Haptic* haptic);

        // Function @ SDL_render.h:686:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LockTexture(SDL_Texture* texture, SDL_Rect* rect, void** pixels, int* pitch);

        // Function @ SDL_gamecontroller.h:576:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerEventState(int state);

        // Function @ SDL_audio.h:1011:43
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AudioStream* SDL_NewAudioStream(SDL_AudioFormat src_format, byte src_channels, int src_rate, SDL_AudioFormat dst_format, byte dst_channels, int dst_rate);

        // Function @ SDL_rwops.h:760:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_WriteBE16(SDL_RWops* dst, ushort value);

        // Function @ SDL_log.h:308:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogCritical(int category, CString fmt);

        // Function @ SDL_video.h:1759:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DisableScreenSaver();

        // Function @ SDL_video.h:375:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumVideoDisplays();

        // Function @ SDL_hints.h:2272:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_ClearHints();

        // Function @ SDL_rect.h:222:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IntersectRectAndLine(SDL_Rect* rect, int* X1, int* Y1, int* X2, int* Y2);

        // Function @ SDL_atomic.h:315:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AtomicAdd(SDL_atomic_t* a, int v);

        // Function @ SDL_rwops.h:547:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RWclose(SDL_RWops* context);

        // Function @ SDL_rwops.h:725:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_WriteU8(SDL_RWops* dst, byte value);

        // Function @ SDL_video.h:293:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumVideoDrivers();

        // Function @ SDL_joystick.h:857:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte SDL_JoystickGetHat(SDL_Joystick* joystick, int hat);

        // Function @ SDL_rwops.h:516:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_RWwrite(SDL_RWops* context, void* ptr, ulong size, ulong num);

        // Function @ SDL_keyboard.h:64:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_GetKeyboardFocus();

        // Function @ SDL_video.h:1550:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowInputFocus(SDL_Window* window);

        // Function @ SDL_render.h:628:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UpdateYUVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* Uplane, int Upitch, byte* Vplane, int Vpitch);

        // Function @ SDL_gamecontroller.h:310:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerPathForIndex(int joystick_index);

        // Function @ SDL_render.h:1296:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawRect(SDL_Renderer* renderer, SDL_Rect* rect);

        // Function @ SDL_hidapi.h:407:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_get_product_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

        // Function @ SDL_surface.h:940:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UpperBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

        // Function @ SDL_joystick.h:158:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_NumJoysticks();

        // Function @ SDL_audio.h:1311:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);

        // Function @ SDL_cpuinfo.h:182:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasRDTSC();

        // Function @ SDL_render.h:288:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetRendererInfo(SDL_Renderer* renderer, SDL_RendererInfo* info);

        // Function @ SDL_gamecontroller.h:1040:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerGetAppleSFSymbolsNameForAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

        // Function @ SDL_joystick.h:574:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_JoystickGetProductVersion(SDL_Joystick* joystick);

        // Function @ SDL_sensor.h:170:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_SensorType SDL_SensorGetDeviceType(int device_index);

        // Function @ SDL_rect.h:164:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IntersectRect(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

        // Function @ SDL_video.h:1736:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IsScreenSaverEnabled();

        // Function @ SDL_surface.h:912:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SoftStretch(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

        // Function @ SDL_gamecontroller.h:823:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerGetNumTouchpadFingers(SDL_GameController* gamecontroller, int touchpad);

        // Function @ SDL_system.h:75:29
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_Direct3D9GetAdapterIndex(int displayIndex);

        // Function @ SDL_joystick.h:627:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, CString pszGUID, int cbGUID);

        // Function @ SDL_mouse.h:194:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_WarpMouseGlobal(int x, int y);

        // Function @ SDL_video.h:1688:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data);

        // Function @ SDL_gamecontroller.h:556:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController* gamecontroller);

        // Function @ SDL_haptic.h:1316:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticRumblePlay(SDL_Haptic* haptic, float strength, uint length);

        // Function @ SDL_timer.h:211:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_RemoveTimer(SDL_TimerID id);

        // Function @ SDL_gamecontroller.h:699:1
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short SDL_GameControllerGetAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

        // Function @ SDL_video.h:350:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_VideoQuit();

        // Function @ SDL_haptic.h:1042:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticNumAxes(SDL_Haptic* haptic);

        // Function @ SDL_gamecontroller.h:217:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerMappingForIndex(int mapping_index);

        // Function @ SDL_cpuinfo.h:315:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasSSE3();

        // Function @ SDL_joystick.h:248:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_JoystickGetDeviceProduct(int device_index);

        // Function @ SDL_system.h:107:39
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ID3D11Device* SDL_RenderGetD3D11Device(SDL_Renderer* renderer);

        // Function @ SDL_cpuinfo.h:227:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasMMX();

        // Function @ SDL_events.h:1067:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_AddEventWatch(SDL_EventFilter filter, void* userdata);

        // Function @ SDL_hidapi.h:441:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_hid_ble_scan(CBool active);

        // Function @ SDL_pixels.h:618:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetRGBA(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b, byte* a);

        // Function @ SDL_joystick.h:879:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickGetBall(SDL_Joystick* joystick, int ball, int* dx, int* dy);

        // Function @ SDL_system.h:184:29
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LinuxSetThreadPriorityAndPolicy(long threadID, int sdlPriority, int schedPolicy);

        // Function @ SDL_system.h:589:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_OnApplicationDidBecomeActive();

        // Function @ SDL_render.h:1895:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_RenderGetMetalCommandEncoder(SDL_Renderer* renderer);

        // Function @ SDL_keyboard.h:119:36
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Keymod SDL_GetModState();

        // Function @ SDL_video.h:1054:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);

        // Function @ SDL_mutex.h:99:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LockMutex(SDL_mutex* mutex);

        // Function @ SDL_mutex.h:141:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UnlockMutex(SDL_mutex* mutex);

        // Function @ SDL_system.h:91:43
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern IDirect3DDevice9* SDL_RenderGetD3D9Device(SDL_Renderer* renderer);

        // Function @ SDL_render.h:474:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetTextureAlphaMod(SDL_Texture* texture, byte* alpha);

        // Function @ SDL_mutex.h:162:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DestroyMutex(SDL_mutex* mutex);

        // Function @ SDL_log.h:136:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogSetPriority(int category, SDL_LogPriority priority);

        // Function @ SDL_render.h:877:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_RenderGetIntegerScale(SDL_Renderer* renderer);

        // Function @ SDL_cpuinfo.h:559:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_SIMDRealloc(void* mem, ulong len);

        // Function @ SDL_rwops.h:367:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FreeRW(SDL_RWops* area);

        // Function @ SDL_surface.h:972:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);

        // Function @ SDL_version.h:193:44
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetRevisionNumber();

        // Function @ SDL_keyboard.h:272:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IsTextInputActive();

        // Function @ SDL_mutex.h:351:35
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_cond* SDL_CreateCond();

        // Function @ SDL_mouse.h:152:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetRelativeMouseState(int* x, int* y);

        // Function @ SDL_rwops.h:385:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SDL_RWsize(SDL_RWops* context);

        // Function @ SDL_render.h:508:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode);

        // Function @ SDL_joystick.h:600:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_JoystickGetSerial(SDL_Joystick* joystick);

        // Function @ SDL_video.h:1421:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowMouseRect(SDL_Window* window, SDL_Rect* rect);

        // Function @ SDL_audio.h:709:41
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AudioStatus SDL_GetAudioStatus();

        // Function @ SDL_render.h:1616:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderCopyExF(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_FRect* dstrect, double angle, SDL_FPoint* center, SDL_RendererFlip flip);

        // Function @ SDL_render.h:1472:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawPointF(SDL_Renderer* renderer, float x, float y);

        // Function @ SDL_joystick.h:175:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_JoystickNameForIndex(int device_index);

        // Function @ SDL.h:222:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_Quit();

        // Function @ SDL_error.h:130:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_ClearError();

        // Function @ SDL_rect.h:267:27
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_FRectEquals(SDL_FRect* a, SDL_FRect* b);

        // Function @ SDL_rwops.h:639:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_ReadBE16(SDL_RWops* src);

        // Function @ SDL_video.h:1787:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_LoadLibrary(CString path);

        // Function @ SDL_haptic.h:1077:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticNewEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect);

        // Function @ SDL_events.h:879:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_PollEvent(SDL_Event* @event);

        // Function @ SDL_gamecontroller.h:372:45
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameController* SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);

        // Function @ SDL_timer.h:134:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_GetPerformanceFrequency();

        // Function @ SDL_assert.h:226:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void* userdata);

        // Function @ SDL_atomic.h:384:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_AtomicGetPtr(void** a);

        // Function @ SDL_hidapi.h:290:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_read_timeout(SDL_hid_device* dev, byte* data, ulong length, int milliseconds);

        // Function @ SDL_video.h:826:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowTitle(SDL_Window* window, CString title);

        // Function @ SDL_events.h:699:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_PumpEvents();

        // Function @ SDL_joystick.h:277:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);

        // Function @ SDL_hidapi.h:177:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_hid_device_change_count();

        // Function @ SDL_video.h:1159:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RaiseWindow(SDL_Window* window);

        // Function @ SDL_render.h:1501:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawLineF(SDL_Renderer* renderer, float x1, float y1, float x2, float y2);

        // Function @ SDL_cpuinfo.h:381:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasAVX();

        // Function @ SDL_video.h:363:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetCurrentVideoDriver();

        // Function @ SDL_video.h:900:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowPosition(SDL_Window* window, int x, int y);

        // Function @ SDL_cpuinfo.h:442:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasNEON();

        // Function @ SDL_video.h:1916:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_GetAttribute(SDL_GLattr attr, int* value);

        // Function @ SDL_surface.h:774:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_FillRect(SDL_Surface* dst, SDL_Rect* rect, uint color);

        // Function @ SDL_gamecontroller.h:876:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float SDL_GameControllerGetSensorDataRate(SDL_GameController* gamecontroller, SDL_SensorType type);

        // Function @ SDL_hidapi.h:142:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_init();

        // Function @ SDL_haptic.h:1058:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect);

        // Function @ SDL_sensor.h:221:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_SensorGetName(SDL_Sensor* sensor);

        // Function @ SDL_render.h:926:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderSetClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

        // Function @ SDL_render.h:308:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetRendererOutputSize(SDL_Renderer* renderer, int* w, int* h);

        // Function @ SDL_rwops.h:314:36
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_RWops* SDL_RWFromConstMem(void* mem, int size);

        // Function @ SDL_rwops.h:687:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_ReadLE64(SDL_RWops* src);

        // Function @ SDL_sensor.h:211:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Sensor* SDL_SensorFromInstanceID(SDL_SensorID instance_id);

        // Function @ SDL_audio.h:407:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_OpenAudio(SDL_AudioSpec* desired, SDL_AudioSpec* obtained);

        // Function @ SDL_joystick.h:915:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickRumble(SDL_Joystick* joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

        // Function @ SDL_cpuinfo.h:583:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SIMDFree(void* ptr);

        // Function @ SDL_video.h:1377:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GetWindowKeyboardGrab(SDL_Window* window);

        // Function @ SDL_haptic.h:1283:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticRumbleSupported(SDL_Haptic* haptic);

        // Function @ SDL_gamecontroller.h:587:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GameControllerUpdate();

        // Function @ SDL_render.h:1143:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode);

        // Function @ SDL_video.h:1334:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowKeyboardGrab(SDL_Window* window, CBool grabbed);

        // Function @ SDL_render.h:823:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderSetLogicalSize(SDL_Renderer* renderer, int w, int h);

        // Function @ SDL_joystick.h:894:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte SDL_JoystickGetButton(SDL_Joystick* joystick, int button);

        // Function @ SDL_gamecontroller.h:407:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerName(SDL_GameController* gamecontroller);

        // Function @ SDL_surface.h:563:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, byte* alpha);

        // Function @ SDL_rwops.h:482:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_RWread(SDL_RWops* context, void* ptr, ulong size, ulong maxnum);

        // Function @ SDL_loadso.h:65:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_LoadObject(CString sofile);

        // Function @ SDL_gamecontroller.h:792:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerHasButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

        // Function @ SDL_sensor.h:159:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_SensorGetDeviceName(int device_index);

        // Function @ SDL_messagebox.h:140:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, int* buttonid);

        // Function @ SDL_surface.h:377:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SaveBMP_RW(SDL_Surface* surface, SDL_RWops* dst, int freedst);

        // Function @ SDL_pixels.h:633:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_CalculateGammaRamp(float gamma, ushort* ramp);

        // Function @ SDL_video.h:1195:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RestoreWindow(SDL_Window* window);

        // Function @ SDL_rwops.h:245:36
        //	x86_64-pc-windows-msvc
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_RWops* SDL_RWFromFP(void* fp, CBool autoclose);

        // Function @ SDL_rwops.h:830:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_WriteBE64(SDL_RWops* dst, ulong value);

        // Function @ SDL_surface.h:219:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_CreateRGBSurfaceFrom(void* pixels, int width, int height, int depth, int pitch, uint Rmask, uint Gmask, uint Bmask, uint Amask);

        // Function @ SDL_render.h:895:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderSetViewport(SDL_Renderer* renderer, SDL_Rect* rect);

        // Function @ SDL_video.h:1022:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);

        // Function @ SDL_log.h:266:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogWarn(int category, CString fmt);

        // Function @ SDL_surface.h:873:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UpperBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

        // Function @ SDL_surface.h:420:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasSurfaceRLE(SDL_Surface* surface);

        // Function @ SDL_video.h:1955:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context);

        // Function @ SDL_video.h:919:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetWindowPosition(SDL_Window* window, int* x, int* y);

        // Function @ SDL_joystick.h:314:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Joystick* SDL_JoystickOpen(int device_index);

        // Function @ SDL_video.h:641:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);

        // Function @ SDL_joystick.h:521:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_JoystickSetPlayerIndex(SDL_Joystick* joystick, int player_index);

        // Function @ SDL_render.h:1572:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderFillRectsF(SDL_Renderer* renderer, SDL_FRect* rects, int count);

        // Function @ SDL_audio.h:898:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FreeWAV(byte* audio_buf);

        // Function @ SDL_render.h:538:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode);

        // Function @ SDL_video.h:2000:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GL_GetDrawableSize(SDL_Window* window, int* w, int* h);

        // Function @ SDL_endian.h:297:1
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float SDL_SwapFloat(float x);

        // Function @ SDL_keyboard.h:154:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);

        // Function @ SDL_surface.h:651:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

        // Function @ SDL_events.h:1130:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte SDL_EventState(uint type, int state);

        // Function @ SDL_video.h:1039:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetWindowMinimumSize(SDL_Window* window, int* w, int* h);

        // Function @ SDL_audio.h:518:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetAudioDeviceSpec(int index, int iscapture, SDL_AudioSpec* spec);

        // Function @ SDL_surface.h:525:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetSurfaceColorMod(SDL_Surface* surface, byte* r, byte* g, byte* b);

        // Function @ SDL_joystick.h:407:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickDetachVirtual(int device_index);

        // Function @ SDL_gamecontroller.h:663:1
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

        // Function @ SDL_video.h:762:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_CreateWindowFrom(void* data);

        // Function @ SDL_haptic.h:877:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Haptic* SDL_HapticOpen(int device_index);

        // Function @ SDL_joystick.h:689:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickNumAxes(SDL_Joystick* joystick);

        // Function @ SDL_filesystem.h:135:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetPrefPath(CString org, CString app);

        // Function @ SDL_video.h:1500:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowOpacity(SDL_Window* window, float opacity);

        // Function @ SDL_render.h:169:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumRenderDrivers();

        // Function @ SDL_power.h:78:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_PowerState SDL_GetPowerInfo(int* secs, int* pct);

        // Function @ SDL_keyboard.h:318:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetTextInputRect(SDL_Rect* rect);

        // Function @ SDL_system.h:584:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_OnApplicationWillTerminate();

        // Function @ SDL_render.h:1187:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawPoint(SDL_Renderer* renderer, int x, int y);

        // Function @ SDL_metal.h:66:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_MetalView SDL_Metal_CreateView(SDL_Window* window);

        // Function @ SDL_render.h:795:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer);

        // Function @ SDL_timer.h:123:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_GetPerformanceCounter();

        // Function @ SDL_joystick.h:263:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_JoystickGetDeviceProductVersion(int device_index);

        // Function @ SDL_log.h:381:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogGetOutputFunction(SDL_LogOutputFunction* callback, void** userdata);

        // Function @ SDL_video.h:405:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetDisplayBounds(int displayIndex, SDL_Rect* rect);

        // Function @ SDL_mouse.h:425:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_ShowCursor(int toggle);

        // Function @ SDL_error.h:66:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetError(CString fmt);

        // Function @ SDL_haptic.h:1162:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_HapticDestroyEffect(SDL_Haptic* haptic, int effect);

        // Function @ SDL_video.h:741:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_CreateWindow(CString title, int x, int y, int w, int h, uint flags);

        // Function @ SDL_pixels.h:403:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_MasksToPixelFormatEnum(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

        // Function @ SDL_rect.h:199:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_EnclosePoints(SDL_Point* points, int count, SDL_Rect* clip, SDL_Rect* result);

        // Function @ SDL_haptic.h:996:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticNumEffects(SDL_Haptic* haptic);

        // Function @ SDL_events.h:1102:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FilterEvents(SDL_EventFilter filter, void* userdata);

        // Function @ SDL_joystick.h:735:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickNumButtons(SDL_Joystick* joystick);

        // Function @ SDL_events.h:747:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_eventaction action, uint minType, uint maxType);

        // Function @ SDL_render.h:722:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LockTextureToSurface(SDL_Texture* texture, SDL_Rect* rect, SDL_Surface** surface);

        // Function @ SDL_timer.h:58:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetTicks();

        // Function @ SDL_render.h:1160:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderClear(SDL_Renderer* renderer);

        // Function @ SDL_hidapi.h:310:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_read(SDL_hid_device* dev, byte* data, ulong length);

        // Function @ SDL_rwops.h:795:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_WriteBE32(SDL_RWops* dst, uint value);

        // Function @ SDL_surface.h:675:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_ConvertSurface(SDL_Surface* src, SDL_PixelFormat* fmt, uint flags);

        // Function @ SDL_hints.h:2245:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_AddHintCallback(CString name, SDL_HintCallback callback, void* userdata);

        // Function @ SDL_rwops.h:607:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte SDL_ReadU8(SDL_RWops* src);

        // Function @ SDL_video.h:1462:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowBrightness(SDL_Window* window, float brightness);

        // Function @ SDL_pixels.h:529:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_MapRGB(SDL_PixelFormat* format, byte r, byte g, byte b);

        // Function @ SDL_pixels.h:451:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Palette* SDL_AllocPalette(int ncolors);

        // Function @ SDL_timer.h:196:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_TimerID SDL_AddTimer(uint interval, SDL_TimerCallback callback, void* param);

        // Function @ SDL_video.h:1702:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_FlashWindow(SDL_Window* window, SDL_FlashOperation operation);

        // Function @ SDL_audio.h:465:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumAudioDevices(int iscapture);

        // Function @ SDL_video.h:2030:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_SetSwapInterval(int interval);

        // Function @ SDL_joystick.h:816:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_JoystickGetAxisInitialState(SDL_Joystick* joystick, int axis, short* state);

        // Function @ SDL_audio.h:1229:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_QueueAudio(SDL_AudioDeviceID dev, void* data, uint len);

        // Function @ SDL_rwops.h:671:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_ReadBE32(SDL_RWops* src);

        // Function @ SDL_log.h:203:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogVerbose(int category, CString fmt);

        // Function @ SDL_mutex.h:293:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SemWaitTimeout(SDL_sem* sem, uint ms);

        // Function @ SDL_surface.h:547:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, byte alpha);

        // Function @ SDL_render.h:1270:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawLines(SDL_Renderer* renderer, SDL_Point* points, int count);

        // Function @ SDL_mutex.h:400:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_CondBroadcast(SDL_cond* cond);

        // Function @ SDL_keyboard.h:343:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IsScreenKeyboardShown(SDL_Window* window);

        // Function @ SDL_video.h:944:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowSize(SDL_Window* window, int w, int h);

        // Function @ SDL_hints.h:2261:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DelHintCallback(CString name, SDL_HintCallback callback, void* userdata);

        // Function @ SDL_surface.h:899:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LowerBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

        // Function @ SDL_render.h:1079:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetRenderDrawColor(SDL_Renderer* renderer, byte r, byte g, byte b, byte a);

        // Function @ SDL_video.h:1259:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UpdateWindowSurface(SDL_Window* window);

        // Function @ SDL_main.h:185:29
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RegisterApp(CString name, uint style, void* hInst);

        // Function @ SDL_sensor.h:140:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnlockSensors();

        // Function @ SDL_cpuinfo.h:271:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasSSE();

        // Function @ SDL_video.h:1303:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowGrab(SDL_Window* window, CBool grabbed);

        // Function @ SDL_video.h:1364:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GetWindowGrab(SDL_Window* window);

        // Function @ SDL_rwops.h:813:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_WriteLE64(SDL_RWops* dst, ulong value);

        // Function @ SDL_touch.h:124:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumTouchFingers(SDL_TouchID touchID);

        // Function @ SDL_surface.h:639:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetClipRect(SDL_Surface* surface, SDL_Rect* rect);

        // Function @ SDL_render.h:957:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_RenderIsClipEnabled(SDL_Renderer* renderer);

        // Function @ SDL_joystick.h:953:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_JoystickHasLED(SDL_Joystick* joystick);

        // Function @ SDL_surface.h:160:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_CreateRGBSurface(uint flags, int width, int height, int depth, uint Rmask, uint Gmask, uint Bmask, uint Amask);

        // Function @ SDL_render.h:1843:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_BindTexture(SDL_Texture* texture, float* texw, float* texh);

        // Function @ SDL_log.h:182:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_Log(CString fmt);

        // Function @ SDL_video.h:1402:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_GetGrabbedWindow();

        // Function @ SDL_events.h:927:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_WaitEventTimeout(SDL_Event* @event, int timeout);

        // Function @ SDL_render.h:1858:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_UnbindTexture(SDL_Texture* texture);

        // Function @ SDL_joystick.h:192:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_JoystickPathForIndex(int device_index);

        // Function @ SDL_video.h:1840:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_GL_GetProcAddress(CString proc);

        // Function @ SDL_hidapi.h:199:47
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_hid_device_info* SDL_hid_enumerate(ushort vendor_id, ushort product_id);

        // Function @ SDL_audio.h:1105:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_AudioStreamClear(SDL_AudioStream* stream);

        // Function @ SDL_misc.h:69:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_OpenURL(CString url);

        // Function @ SDL_video.h:516:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetDisplayMode(int displayIndex, int modeIndex, SDL_DisplayMode* mode);

        // Function @ SDL_gamecontroller.h:864:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerIsSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type);

        // Function @ SDL_error.h:103:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetError();

        // Function @ SDL_cpuinfo.h:293:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasSSE2();

        // Function @ SDL_sensor.h:139:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LockSensors();

        // Function @ SDL_clipboard.h:53:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetClipboardText(CString text);

        // Function @ SDL_audio.h:1091:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AudioStreamFlush(SDL_AudioStream* stream);

        // Function @ SDL_video.h:1351:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowMouseGrab(SDL_Window* window, CBool grabbed);

        // Function @ SDL_hidapi.h:374:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_get_feature_report(SDL_hid_device* dev, byte* data, ulong length);

        // Function @ SDL_audio.h:755:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_PauseAudio(int pause_on);

        // Function @ SDL_touch.h:83:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumTouchDevices();

        // Function @ SDL_gamecontroller.h:948:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerHasLED(SDL_GameController* gamecontroller);

        // Function @ SDL_render.h:1128:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode);

        // Function @ SDL_render.h:1558:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderFillRectF(SDL_Renderer* renderer, SDL_FRect* rect);

        // Function @ SDL_gamecontroller.h:495:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_GameControllerGetProductVersion(SDL_GameController* gamecontroller);

        // Function @ SDL_rect.h:252:27
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_FRectEqualsEpsilon(SDL_FRect* a, SDL_FRect* b, float epsilon);

        // Function @ SDL_render.h:262:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Renderer* SDL_GetRenderer(SDL_Window* window);

        // Function @ SDL_mutex.h:122:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_TryLockMutex(SDL_mutex* mutex);

        // Function @ SDL_assert.h:131:41
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AssertState SDL_ReportAssertion(SDL_AssertData* param, CString param2, CString param3, int param4);

        // Function @ SDL_pixels.h:564:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_MapRGBA(SDL_PixelFormat* format, byte r, byte g, byte b, byte a);

        // Function @ SDL_gamecontroller.h:745:50
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameControllerButton SDL_GameControllerGetButtonFromString(CString str);

        // Function @ SDL_render.h:227:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, int index, uint flags);

        // Function @ SDL_atomic.h:296:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AtomicGet(SDL_atomic_t* a);

        // Function @ SDL_metal.h:87:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_Metal_GetLayer(SDL_MetalView view);

        // Function @ SDL_video.h:2047:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_GetSwapInterval();

        // Function @ SDL_render.h:552:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetTextureUserData(SDL_Texture* texture, void* userdata);

        // Function @ SDL_rwops.h:565:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_LoadFile_RW(SDL_RWops* src, ulong* datasize, int freesrc);

        // Function @ SDL_keyboard.h:170:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);

        // Function @ SDL_cpuinfo.h:148:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetCPUCount();

        // Function @ SDL_keyboard.h:106:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_ResetKeyboard();

        // Function @ SDL_assert.h:310:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_ResetAssertionReport();

        // Function @ SDL_hints.h:2221:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GetHintBoolean(CString name, CBool default_value);

        // Function @ SDL_shape.h:147:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetShapedWindowMode(SDL_Window* window, SDL_WindowShapeMode* shape_mode);

        // Function @ SDL_keyboard.h:195:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetScancodeName(SDL_Scancode scancode);

        // Function @ SDL_sensor.h:149:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_NumSensors();

        // Function @ SDL_video.h:1109:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowResizable(SDL_Window* window, CBool resizable);

        // Function @ SDL_render.h:755:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_RenderTargetSupported(SDL_Renderer* renderer);

        // Function @ SDL_video.h:624:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);

        // Function @ SDL_events.h:832:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FlushEvents(uint minType, uint maxType);

        // Function @ SDL_cpuinfo.h:431:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasARMSIMD();

        // Function @ SDL_surface.h:922:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SoftStretchLinear(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

        // Function @ SDL_video.h:1582:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetWindowGammaRamp(SDL_Window* window, ushort* red, ushort* green, ushort* blue);

        // Function @ SDL_audio.h:358:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetCurrentAudioDriver();

        // Function @ SDL_platform.h:246:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetPlatform();

        // Function @ SDL_audio.h:1072:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AudioStreamAvailable(SDL_AudioStream* stream);

        // Function @ SDL_joystick.h:538:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick* joystick);

        // Function @ SDL_rect.h:317:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnionFRect(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

        // Function @ SDL_cpuinfo.h:416:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasAVX512F();

        // Function @ SDL_video.h:1901:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GL_SetAttribute(SDL_GLattr attr, int value);

        // Function @ SDL_touch.h:96:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_TouchID SDL_GetTouchDevice(int index);

        // Function @ SDL_audio.h:669:43
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AudioDeviceID SDL_OpenAudioDevice(CString device, int iscapture, SDL_AudioSpec* desired, SDL_AudioSpec* obtained, int allowed_changes);

        // Function @ SDL_render.h:1543:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawRectsF(SDL_Renderer* renderer, SDL_FRect* rects, int count);

        // Function @ SDL_video.h:492:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumDisplayModes(int displayIndex);

        // Function @ SDL_surface.h:288:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

        // Function @ SDL_guid.h:74:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GUIDToString(SDL_GUID guid, CString pszGUID, int cbGUID);

        // Function @ SDL_audio.h:1178:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_MixAudioFormat(byte* dst, byte* src, SDL_AudioFormat format, uint len, int volume);

        // Function @ SDL_rect.h:285:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasIntersectionF(SDL_FRect* A, SDL_FRect* B);

        // Function @ SDL_joystick.h:940:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickRumbleTriggers(SDL_Joystick* joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

        // Function @ SDL_haptic.h:1127:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticRunEffect(SDL_Haptic* haptic, int effect, uint iterations);

        // Function @ SDL_timer.h:82:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_GetTicks64();

        // Function @ SDL_gamecontroller.h:631:48
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(CString str);

        // Function @ SDL_audio.h:1376:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LockAudio();

        // Function @ SDL_guid.h:90:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GUID SDL_GUIDFromString(CString pchGUID);

        // Function @ SDL_render.h:743:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnlockTexture(SDL_Texture* texture);

        // Function @ SDL_render.h:1020:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RenderWindowToLogical(SDL_Renderer* renderer, int windowX, int windowY, float* logicalX, float* logicalY);

        // Function @ SDL_error.h:152:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_Error(SDL_errorcode code);

        // Function @ SDL_video.h:1521:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetWindowOpacity(SDL_Window* window, float* out_opacity);

        // Function @ SDL_render.h:597:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UpdateTexture(SDL_Texture* texture, SDL_Rect* rect, void* pixels, int pitch);

        // Function @ SDL_rwops.h:280:36
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_RWops* SDL_RWFromMem(void* mem, int size);

        // Function @ SDL_gamecontroller.h:437:48
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameControllerType SDL_GameControllerGetType(SDL_GameController* gamecontroller);

        // Function @ SDL_rwops.h:703:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_ReadBE64(SDL_RWops* src);

        // Function @ SDL_render.h:249:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface);

        // Function @ SDL_haptic.h:1241:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticPause(SDL_Haptic* haptic);

        // Function @ SDL_joystick.h:993:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickSetLED(SDL_Joystick* joystick, byte red, byte green, byte blue);

        // Function @ SDL.h:198:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_WasInit(uint flags);

        // Function @ SDL_mutex.h:198:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_sem* SDL_CreateSemaphore(uint initial_value);

        // Function @ SDL_log.h:330:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogMessage(int category, SDL_LogPriority priority, CString fmt);

        // Function @ SDL_audio.h:870:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops* src, int freesrc, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

        // Function @ SDL_render.h:1774:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DestroyRenderer(SDL_Renderer* renderer);

        // Function @ SDL_render.h:185:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetRenderDriverInfo(int index, SDL_RendererInfo* info);

        // Function @ SDL_joystick.h:471:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickSetVirtualHat(SDL_Joystick* joystick, int hat, byte value);

        // Function @ SDL_video.h:1171:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_MaximizeWindow(SDL_Window* window);

        // Function @ SDL_keyboard.h:331:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasScreenKeyboardSupport();

        // Function @ SDL_video.h:603:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetWindowDisplayIndex(SDL_Window* window);

        // Function @ SDL_haptic.h:929:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Haptic* SDL_HapticOpenFromMouse();

        // Function @ SDL_haptic.h:850:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_HapticName(int device_index);

        // Function @ SDL_keyboard.h:229:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetKeyName(SDL_Keycode key);

        // Function @ SDL_joystick.h:485:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_JoystickName(SDL_Joystick* joystick);

        // Function @ SDL_joystick.h:643:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickGUID SDL_JoystickGetGUIDFromString(CString pchGUID);

        // Function @ SDL_render.h:333:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, uint format, int access, int w, int h);

        // Function @ SDL_mouse.h:387:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Cursor* SDL_GetDefaultCursor();

        // Function @ SDL_mutex.h:81:36
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_mutex* SDL_CreateMutex();

        // Function @ SDL_surface.h:597:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

        // Function @ SDL_mouse.h:81:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_GetMouseFocus();

        // Function @ SDL_joystick.h:562:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_JoystickGetProduct(SDL_Joystick* joystick);

        // Function @ SDL_mouse.h:267:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GetRelativeMouseMode();

        // Function @ SDL_gamecontroller.h:337:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerMappingForDeviceIndex(int joystick_index);

        // Function @ SDL_render.h:386:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_QueryTexture(SDL_Texture* texture, uint* format, int* access, int* w, int* h);

        // Function @ SDL_gamecontroller.h:912:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerRumble(SDL_GameController* gamecontroller, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

        // Function @ SDL_render.h:1102:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetRenderDrawColor(SDL_Renderer* renderer, byte* r, byte* g, byte* b, byte* a);

        // Function @ SDL_haptic.h:1180:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticGetEffectStatus(SDL_Haptic* haptic, int effect);

        // Function @ SDL_video.h:867:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_SetWindowData(SDL_Window* window, CString name, void* userdata);

        // Function @ SDL_events.h:766:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasEvent(uint type);

        // Function @ SDL_video.h:462:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetDisplayDPI(int displayIndex, float* ddpi, float* hdpi, float* vdpi);

        // Function @ SDL_render.h:1763:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DestroyTexture(SDL_Texture* texture);

        // Function @ SDL_events.h:962:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_PushEvent(SDL_Event* @event);

        // Function @ SDL.h:160:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_InitSubSystem(uint flags);

        // Function @ SDL_render.h:1906:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderSetVSync(SDL_Renderer* renderer, int vsync);

        // Function @ SDL_cpuinfo.h:477:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetSystemRAM();

        // Function @ SDL_events.h:807:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FlushEvent(uint type);

        // Function @ SDL_surface.h:963:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_LowerBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

        // Function @ SDL_events.h:1152:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_RegisterEvents(int numevents);

        // Function @ SDL_render.h:982:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderSetScale(SDL_Renderer* renderer, float scaleX, float scaleY);

        // Function @ SDL_blendmode.h:183:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

        // Function @ SDL_render.h:996:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RenderGetScale(SDL_Renderer* renderer, float* scaleX, float* scaleY);

        // Function @ SDL_video.h:882:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_GetWindowData(SDL_Window* window, CString name);

        // Function @ SDL_pixels.h:484:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

        // Function @ SDL_mouse.h:256:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_CaptureMouse(CBool enabled);

        // Function @ SDL_hidapi.h:432:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_get_indexed_string(SDL_hid_device* dev, int string_index, CStringWide @string, ulong maxlen);

        // Function @ SDL_haptic.h:1331:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticRumbleStop(SDL_Haptic* haptic);

        // Function @ SDL_rect.h:242:27
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_FRectEmpty(SDL_FRect* r);

        // Function @ SDL_system.h:588:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_OnApplicationWillEnterForeground();

        // Function @ SDL_sensor.h:201:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Sensor* SDL_SensorOpen(int device_index);

        // Function @ SDL_joystick.h:417:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_JoystickIsVirtual(int device_index);

        // Function @ SDL_mouse.h:219:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetRelativeMouseMode(CBool enabled);

        // Function @ SDL_gamecontroller.h:892:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerGetSensorData(SDL_GameController* gamecontroller, SDL_SensorType type, float* data, int num_values);

        // Function @ SDL_gamecontroller.h:459:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GameControllerSetPlayerIndex(SDL_GameController* gamecontroller, int player_index);

        // Function @ SDL_gamecontroller.h:270:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IsGameController(int joystick_index);

        // Function @ SDL_atomic.h:351:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_AtomicCASPtr(void** a, void* oldval, void* newval);

        // Function @ SDL_rwops.h:655:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_ReadLE32(SDL_RWops* src);

        // Function @ SDL_atomic.h:184:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_MemoryBarrierAcquireFunction();

        // Function @ SDL_render.h:1515:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawLinesF(SDL_Renderer* renderer, SDL_FPoint* points, int count);

        // Function @ SDL_gamecontroller.h:1012:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GameControllerClose(SDL_GameController* gamecontroller);

        // Function @ SDL_filesystem.h:78:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetBasePath();

        // Function @ SDL_rect.h:339:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_EncloseFPoints(SDL_FPoint* points, int count, SDL_FRect* clip, SDL_FRect* result);

        // Function @ SDL_video.h:850:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);

        // Function @ SDL_events.h:1038:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata);

        // Function @ SDL_rwops.h:778:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_WriteLE32(SDL_RWops* dst, uint value);

        // Function @ SDL_audio.h:325:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AudioInit(CString driver_name);

        // Function @ SDL_audio.h:276:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetNumAudioDrivers();

        // Function @ SDL_joystick.h:707:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickNumBalls(SDL_Joystick* joystick);

        // Function @ SDL_render.h:273:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_RenderGetWindow(SDL_Renderer* renderer);

        // Function @ SDL_version.h:170:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetRevision();

        // Function @ SDL_gesture.h:61:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RecordGesture(SDL_TouchID touchId);

        // Function @ SDL_metal.h:78:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_Metal_DestroyView(SDL_MetalView view);

        // Function @ SDL_video.h:1139:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_ShowWindow(SDL_Window* window);

        // Function @ SDL_joystick.h:550:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_JoystickGetVendor(SDL_Joystick* joystick);

        // Function @ SDL_joystick.h:1027:48
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(SDL_Joystick* joystick);

        // Function @ SDL_render.h:1708:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderReadPixels(SDL_Renderer* renderer, SDL_Rect* rect, uint format, void* pixels, int pitch);

        // Function @ SDL_render.h:1244:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawLine(SDL_Renderer* renderer, int x1, int y1, int x2, int y2);

        // Function @ SDL_mutex.h:217:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DestroySemaphore(SDL_sem* sem);

        // Function @ SDL_hidapi.h:383:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_hid_close(SDL_hid_device* dev);

        // Function @ SDL_haptic.h:978:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_HapticClose(SDL_Haptic* haptic);

        // Function @ SDL_joystick.h:1005:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickSendEffect(SDL_Joystick* joystick, void* data, int size);

        // Function @ SDL_joystick.h:721:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_JoystickNumHats(SDL_Joystick* joystick);

        // Function @ SDL_video.h:840:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetWindowTitle(SDL_Window* window);

        // Function @ SDL_gamecontroller.h:207:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerNumMappings();

        // Function @ SDL_video.h:1746:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_EnableScreenSaver();

        // Function @ SDL_mutex.h:323:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_SemValue(SDL_sem* sem);

        // Function @ SDL_surface.h:719:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_ConvertPixels(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, void* dst, int dst_pitch);

        // Function @ SDL_video.h:1610:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetWindowGammaRamp(SDL_Window* window, ushort* red, ushort* green, ushort* blue);

        // Function @ SDL_audio.h:298:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetAudioDriver(int index);

        // Function @ SDL_sensor.h:252:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_SensorID SDL_SensorGetInstanceID(SDL_Sensor* sensor);

        // Function @ SDL_render.h:524:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode);

        // Function @ SDL_audio.h:1490:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_CloseAudioDevice(SDL_AudioDeviceID dev);

        // Function @ SDL_mouse.h:362:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetCursor(SDL_Cursor* cursor);

        // Function @ SDL_video.h:1183:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_MinimizeWindow(SDL_Window* window);

        // Function @ SDL_video.h:1006:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GetWindowBordersSize(SDL_Window* window, int* top, int* left, int* bottom, int* right);

        // Function @ SDL_render.h:844:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RenderGetLogicalSize(SDL_Renderer* renderer, int* w, int* h);

        // Function @ SDL_video.h:668:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetWindowPixelFormat(SDL_Window* window);

        // Function @ SDL_gamecontroller.h:535:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerGetAttached(SDL_GameController* gamecontroller);

        // Function @ SDL_rect.h:146:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasIntersection(SDL_Rect* A, SDL_Rect* B);

        // Function @ SDL_version.h:141:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetVersion(SDL_version* ver);

        // Function @ SDL_render.h:362:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface);

        // Function @ SDL_keyboard.h:138:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetModState(SDL_Keymod modstate);

        // Function @ SDL_atomic.h:368:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_AtomicSetPtr(void** a, void* v);

        // Function @ SDL_video.h:1240:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_GetWindowSurface(SDL_Window* window);

        // Function @ SDL_joystick.h:144:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnlockJoysticks();

        // Function @ SDL_joystick.h:129:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LockJoysticks();

        // Function @ SDL_mutex.h:244:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SemWait(SDL_sem* sem);

        // Function @ SDL_rwops.h:450:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SDL_RWtell(SDL_RWops* context);

        // Function @ SDL_mouse.h:344:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);

        // Function @ SDL_assert.h:296:48
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_AssertData* SDL_GetAssertionReport();

        // Function @ SDL_joystick.h:977:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_JoystickHasRumbleTriggers(SDL_Joystick* joystick);

        // Function @ SDL_audio.h:1466:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_CloseAudio();

        // Function @ SDL_sensor.h:232:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_SensorType SDL_SensorGetType(SDL_Sensor* sensor);

        // Function @ SDL_audio.h:1119:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FreeAudioStream(SDL_AudioStream* stream);

        // Function @ SDL_audio.h:1145:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_MixAudio(byte* dst, byte* src, uint len, int volume);

        // Function @ SDL_joystick.h:610:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickType SDL_JoystickGetType(SDL_Joystick* joystick);

        // Function @ SDL_rect.h:178:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnionRect(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

        // Function @ SDL_haptic.h:1013:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticNumEffectsPlaying(SDL_Haptic* haptic);

        // Function @ SDL_surface.h:274:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FreeSurface(SDL_Surface* surface);

        // Function @ SDL_pixels.h:361:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetPixelFormatName(uint format);

        // Function @ SDL_loadso.h:105:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnloadObject(void* handle);

        // Function @ SDL_video.h:1481:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float SDL_GetWindowBrightness(SDL_Window* window);

        // Function @ SDL_mouse.h:329:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

        // Function @ SDL_gamecontroller.h:233:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);

        // Function @ SDL_log.h:161:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogResetPriorities();

        // Function @ SDL_joystick.h:292:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickID SDL_JoystickGetDeviceInstanceID(int device_index);

        // Function @ SDL_gamecontroller.h:198:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerAddMapping(CString mappingString);

        // Function @ SDL_video.h:1281:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UpdateWindowSurfaceRects(SDL_Window* window, SDL_Rect* rects, int numrects);

        // Function @ SDL_joystick.h:498:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_JoystickPath(SDL_Joystick* joystick);

        // Function @ SDL_gamecontroller.h:987:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerSetLED(SDL_GameController* gamecontroller, byte red, byte green, byte blue);

        // Function @ SDL_mouse.h:104:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetMouseState(int* x, int* y);

        // Function @ SDL_rect.h:363:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IntersectFRectAndLine(SDL_FRect* rect, float* X1, float* Y1, float* X2, float* Y2);

        // Function @ SDL_surface.h:405:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetSurfaceRLE(SDL_Surface* surface, int flag);

        // Function @ SDL_gesture.h:76:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SaveAllDollarTemplates(SDL_RWops* dst);

        // Function @ SDL.h:182:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_QuitSubSystem(uint flags);

        // Function @ SDL_mutex.h:457:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_CondWaitTimeout(SDL_cond* cond, SDL_mutex* mutex, uint ms);

        // Function @ SDL_render.h:493:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode);

        // Function @ SDL_hints.h:2192:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_SetHint(CString name, CString value);

        // Function @ SDL_timer.h:147:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_Delay(uint ms);

        // Function @ SDL_gamecontroller.h:361:45
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameController* SDL_GameControllerOpen(int joystick_index);

        // Function @ SDL_hints.h:2206:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetHint(CString name);

        // Function @ SDL_rwops.h:206:36
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_RWops* SDL_RWFromFile(CString file, CString mode);

        // Function @ SDL_haptic.h:905:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticIndex(SDL_Haptic* haptic);

        // Function @ SDL_log.h:353:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogMessageV(int category, SDL_LogPriority priority, CString fmt, void* ap);

        // Function @ SDL_gamecontroller.h:323:48
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);

        // Function @ SDL_video.h:1978:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GLContext SDL_GL_GetCurrentContext();

        // Function @ SDL_render.h:1644:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderGeometry(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Vertex* vertices, int num_vertices, int* indices, int num_indices);

        // Function @ SDL_locale.h:91:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Locale* SDL_GetPreferredLocales();

        // Function @ SDL_render.h:1046:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_RenderLogicalToWindow(SDL_Renderer* renderer, float logicalX, float logicalY, int* windowX, int* windowY);

        // Function @ SDL_gamecontroller.h:937:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerRumbleTriggers(SDL_GameController* gamecontroller, ushort left_rumble, ushort right_rumble, uint duration_ms);

        // Function @ SDL_surface.h:257:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom(void* pixels, int width, int height, int depth, int pitch, uint format);

        // Function @ SDL_video.h:1966:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Window* SDL_GL_GetCurrentWindow();

        // Function @ SDL_joystick.h:218:42
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index);

        // Function @ SDL_mutex.h:428:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_CondWait(SDL_cond* cond, SDL_mutex* mutex);

        // Function @ SDL_render.h:779:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);

        // Function @ SDL_system.h:127:39
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ID3D12Device* SDL_RenderGetD3D12Device(SDL_Renderer* renderer);

        // Function @ SDL_haptic.h:834:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_NumHaptics();

        // Function @ SDL_atomic.h:121:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_AtomicLock(SDL_SpinLock* @lock);

        // Function @ SDL_gamecontroller.h:162:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerAddMappingsFromRW(SDL_RWops* rw, int freerw);

        // Function @ SDL_render.h:1805:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderFlush(SDL_Renderer* renderer);

        // Function @ SDL_gamecontroller.h:807:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte SDL_GameControllerGetButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

        // Function @ SDL_hints.h:2172:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_SetHintWithPriority(CString name, CString value, SDL_HintPriority priority);

        // Function @ SDL_render.h:1322:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawRects(SDL_Renderer* renderer, SDL_Rect* rects, int count);

        // Function @ SDL_audio.h:785:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on);

        // Function @ SDL_surface.h:745:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_PremultiplyAlpha(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, void* dst, int dst_pitch);

        // Function @ SDL_log.h:224:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_LogDebug(int category, CString fmt);

        // Function @ SDL_gamecontroller.h:507:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_GameControllerGetFirmwareVersion(SDL_GameController* gamecontroller);

        // Function @ SDL_video.h:1849:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GL_UnloadLibrary();

        // Function @ SDL_atomic.h:183:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_MemoryBarrierReleaseFunction();

        // Function @ SDL_sensor.h:266:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SensorGetData(SDL_Sensor* sensor, float* data, int num_values);

        // Function @ SDL_hidapi.h:211:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_hid_free_enumeration(SDL_hid_device_info* devs);

        // Function @ SDL_haptic.h:1146:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticStopEffect(SDL_Haptic* haptic, int effect);

        // Function @ SDL_surface.h:700:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* src, uint pixel_format, uint flags);

        // Function @ SDL_hidapi.h:419:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_get_serial_number_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

        // Function @ SDL_system.h:586:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_OnApplicationWillResignActive();

        // Function @ SDL_gamecontroller.h:483:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SDL_GameControllerGetProduct(SDL_GameController* gamecontroller);

        // Function @ SDL_haptic.h:891:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticOpened(int device_index);

        // Function @ SDL_error.h:120:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetErrorMsg(CString errstr, int maxlen);

        // Function @ SDL_rect.h:303:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_IntersectFRect(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

        // Function @ SDL_loadso.h:92:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_LoadFunction(void* handle, CString name);

        // Function @ SDL_video.h:475:48
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);

        // Function @ SDL_keyboard.h:291:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_ClearComposition();

        // Function @ SDL_atomic.h:138:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_AtomicUnlock(SDL_SpinLock* @lock);

        // Function @ SDL_hidapi.h:352:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_send_feature_report(SDL_hid_device* dev, byte* data, ulong length);

        // Function @ SDL_audio.h:1054:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_AudioStreamGet(SDL_AudioStream* stream, void* buf, int len);

        // Function @ SDL_audio.h:492:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GetAudioDeviceName(int index, int iscapture);

        // Function @ SDL_render.h:205:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_CreateWindowAndRenderer(int width, int height, uint window_flags, SDL_Window** window, SDL_Renderer** renderer);

        // Function @ SDL_events.h:785:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasEvents(uint minType, uint maxType);

        // Function @ SDL_video.h:588:43
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_DisplayMode* SDL_GetClosestDisplayMode(int displayIndex, SDL_DisplayMode* mode, SDL_DisplayMode* closest);

        // Function @ SDL_cpuinfo.h:403:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasAVX2();

        // Function @ SDL_video.h:1938:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GLContext SDL_GL_CreateContext(SDL_Window* window);

        // Function @ SDL_mouse.h:171:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_WarpMouseInWindow(SDL_Window* window, int x, int y);

        // Function @ SDL_render.h:654:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_UpdateNVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* UVplane, int UVpitch);

        // Function @ SDL_gamecontroller.h:424:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerPath(SDL_GameController* gamecontroller);

        // Function @ SDL_main.h:158:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetMainReady();

        // Function @ SDL_render.h:1674:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderGeometryRaw(SDL_Renderer* renderer, SDL_Texture* texture, float* xy, int xy_stride, SDL_Color* color, int color_stride, float* uv, int uv_stride, int num_vertices, void* indices, int num_indices, int size_indices);

        // Function @ SDL_mutex.h:366:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DestroyCond(SDL_cond* cond);

        // Function @ SDL_render.h:566:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_GetTextureUserData(SDL_Texture* texture);

        // Function @ SDL_cpuinfo.h:205:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasAltiVec();

        // Function @ SDL_gamecontroller.h:777:1
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

        // Function @ SDL_video.h:1126:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowAlwaysOnTop(SDL_Window* window, CBool on_top);

        // Function @ SDL_joystick.h:670:40
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick* joystick);

        // Function @ SDL_rwops.h:743:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_WriteLE16(SDL_RWops* dst, ushort value);

        // Function @ SDL_surface.h:506:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetSurfaceColorMod(SDL_Surface* surface, byte r, byte g, byte b);

        // Function @ SDL_video.h:656:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_GetWindowICCProfile(SDL_Window* window, ulong* size);

        // Function @ SDL_keyboard.h:210:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Scancode SDL_GetScancodeFromName(CString name);

        // Function @ SDL_gamecontroller.h:291:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString SDL_GameControllerNameForIndex(int joystick_index);

        // Function @ SDL_surface.h:323:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnlockSurface(SDL_Surface* surface);

        // Function @ SDL_surface.h:987:49
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);

        // Function @ SDL_gamecontroller.h:830:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerGetTouchpadFinger(SDL_GameController* gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, float* pressure);

        // Function @ SDL_rwops.h:422:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SDL_RWseek(SDL_RWops* context, long offset, int whence);

        // Function @ SDL_video.h:778:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SDL_GetWindowID(SDL_Window* window);

        // Function @ SDL_hidapi.h:328:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_hid_set_nonblocking(SDL_hid_device* dev, int nonblock);

        // Function @ SDL_main.h:202:30
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_UnregisterApp();

        // Function @ SDL_video.h:1870:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GL_ExtensionSupported(CString extension);

        // Function @ SDL_render.h:1590:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderCopyF(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_FRect* dstrect);

        // Function @ SDL_cpuinfo.h:455:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasLSX();

        // Function @ SDL_video.h:1090:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowBordered(SDL_Window* window, CBool bordered);

        // Function @ SDL_video.h:2063:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GL_SwapWindow(SDL_Window* window);

        // Function @ SDL_gamecontroller.h:1000:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_GameControllerSendEffect(SDL_GameController* gamecontroller, void* data, int size);

        // Function @ SDL_log.h:149:41
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_LogPriority SDL_LogGetPriority(int category);

        // Function @ SDL_messagebox.h:182:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_ShowSimpleMessageBox(uint flags, CString title, CString message, SDL_Window* window);

        // Function @ SDL_system.h:587:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_OnApplicationDidEnterBackground();

        // Function @ SDL_clipboard.h:83:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasClipboardText();

        // Function @ SDL_render.h:1874:31
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SDL_RenderGetMetalLayer(SDL_Renderer* renderer);

        // Function @ SDL_render.h:1213:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawPoints(SDL_Renderer* renderer, SDL_Point* points, int count);

        // Function @ SDL_render.h:1485:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderDrawPointsF(SDL_Renderer* renderer, SDL_FPoint* points, int count);

        // Function @ SDL_touch.h:111:45
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

        // Function @ SDL_cpuinfo.h:468:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasLASX();

        // Function @ SDL_video.h:971:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GetWindowSize(SDL_Window* window, int* w, int* h);

        // Function @ SDL_audio.h:932:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_BuildAudioCVT(SDL_AudioCVT* cvt, SDL_AudioFormat src_format, byte src_channels, int src_rate, SDL_AudioFormat dst_format, byte dst_channels, int dst_rate);

        // Function @ SDL_gamecontroller.h:961:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_GameControllerHasRumble(SDL_GameController* gamecontroller);

        // Function @ SDL_pixels.h:435:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_FreeFormat(SDL_PixelFormat* format);

        // Function @ SDL_events.h:1083:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_DelEventWatch(SDL_EventFilter filter, void* userdata);

        // Function @ SDL_system.h:56:30
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_SetWindowsMessageHook(SDL_WindowsMessageHook callback, void* userdata);

        // Function @ SDL_touch.h:140:38
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID, int index);

        // Function @ SDL_pixels.h:466:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_SetPixelFormatPalette(SDL_PixelFormat* format, SDL_Palette* palette);

        // Function @ SDL.h:143:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_Init(uint flags);

        // Function @ SDL_cpuinfo.h:496:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SDL_SIMDGetAlignment();

        // Function @ SDL_render.h:863:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_RenderSetIntegerScale(SDL_Renderer* renderer, CBool enable);

        // Function @ SDL_joystick.h:336:39
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Joystick* SDL_JoystickFromPlayerIndex(int player_index);

        // Function @ SDL_haptic.h:1299:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_HapticRumbleInit(SDL_Haptic* haptic);

        // Function @ SDL_keyboard.h:244:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SDL_Keycode SDL_GetKeyFromName(CString name);

        // Function @ SDL_joystick.h:747:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_JoystickUpdate();

        // Function @ SDL_cpuinfo.h:359:34
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool SDL_HasSSE42();

        // Function @ SDL_mutex.h:383:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SDL_CondSignal(SDL_cond* cond);

        // Function @ SDL_joystick.h:799:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short SDL_JoystickGetAxis(SDL_Joystick* joystick, int axis);

        // Function @ SDL_video.h:2074:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SDL_GL_DeleteContext(SDL_GLContext context);

        #endregion

        #region Types

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_SDL_WindowPtr_SDL_PointPtr_VoidPtr_SDL_HitTestResult
        {
            public delegate* unmanaged<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr_Int_Int
        {
            public delegate* unmanaged<void*, void*, int, int> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Ushort_Ushort_Int
        {
            public delegate* unmanaged<void*, ushort, ushort, int> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_CString_CString_CString_Void
        {
            public delegate* unmanaged<void*, CString, CString, CString, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Void
        {
            public delegate* unmanaged<void*, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_SDL_AssertDataPtr_VoidPtr_SDL_AssertState
        {
            public delegate* unmanaged<SDL_AssertData*, void*, SDL_AssertState> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Int_SDL_LogPriority_CString_Void
        {
            public delegate* unmanaged<void*, int, SDL_LogPriority, CString, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Int_Void
        {
            public delegate* unmanaged<void*, int, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_BytePtr_Int_Void
        {
            public delegate* unmanaged<void*, byte*, int, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_VoidPtr_Uint_Ulong_Long_Void
        {
            public delegate* unmanaged<void*, void*, uint, ulong, long, void> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_SDL_EventPtr_Int
        {
            public delegate* unmanaged<void*, SDL_Event*, int> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Uint_VoidPtr_Uint
        {
            public delegate* unmanaged<uint, void*, uint> Pointer;
        }

        // FunctionPointer @ NoLocation
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_VoidPtr_Byte_Byte_Byte_Int
        {
            public delegate* unmanaged<void*, byte, byte, byte, int> Pointer;
        }

        // Struct @ SDL_events.h:402:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_JoyBatteryEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 4
            public SDL_JoystickPowerLevel level;
        }

        // Struct @ SDL_events.h:293:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct SDL_MouseButtonEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 4
            public uint which;

            [FieldOffset(16)] // size = 1
            public byte button;

            [FieldOffset(17)] // size = 1
            public byte state;

            [FieldOffset(18)] // size = 1
            public byte clicks;

            [FieldOffset(19)] // size = 1
            public byte padding1;

            [FieldOffset(20)] // size = 4
            public int x;

            [FieldOffset(24)] // size = 4
            public int y;
        }

        // Struct @ SDL_events.h:573:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_QuitEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;
        }

        // Struct @ SDL_surface.h:72:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
        public struct SDL_Surface
        {
            [FieldOffset(0)] // size = 4
            public uint flags;

            [FieldOffset(8)] // size = 8
            public SDL_PixelFormat* format;

            [FieldOffset(16)] // size = 4
            public int w;

            [FieldOffset(20)] // size = 4
            public int h;

            [FieldOffset(24)] // size = 4
            public int pitch;

            [FieldOffset(32)] // size = 8
            public void* pixels;

            [FieldOffset(40)] // size = 8
            public void* userdata;

            [FieldOffset(48)] // size = 4
            public int locked;

            [FieldOffset(56)] // size = 8
            public void* list_blitmap;

            [FieldOffset(64)] // size = 16
            public SDL_Rect clip_rect;

            [FieldOffset(80)] // size = 8
            public SDL_BlitMap* map;

            [FieldOffset(88)] // size = 4
            public int refcount;
        }

        // Struct @ SDL_events.h:392:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct SDL_JoyDeviceEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public int which;
        }

        // Struct @ SDL_touch.h:52:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct SDL_Finger
        {
            [FieldOffset(0)] // size = 8
            public SDL_FingerID id;

            [FieldOffset(8)] // size = 4
            public float x;

            [FieldOffset(12)] // size = 4
            public float y;

            [FieldOffset(16)] // size = 4
            public float pressure;
        }

        // Struct @ SDL_guid.h:55:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
        public struct SDL_GUID
        {
            [FieldOffset(0)] // size = 16
            public fixed byte _data[16]; // Uint8[16]

            public Span<byte> data
            {
                get
                {
                    fixed (SDL_GUID* @this = &this)
                    {
                        var pointer = &@this->_data[0];
                        var span = new Span<byte>(pointer, 16);
                        return span;
                    }
                }
            }
        }

        // Struct @ SDL_events.h:358:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_JoyHatEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 1
            public byte hat;

            [FieldOffset(13)] // size = 1
            public byte value;

            [FieldOffset(14)] // size = 1
            public byte padding1;

            [FieldOffset(15)] // size = 1
            public byte padding2;
        }

        // Struct @ SDL_audio.h:180:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct SDL_AudioSpec
        {
            [FieldOffset(0)] // size = 4
            public int freq;

            [FieldOffset(4)] // size = 2
            public SDL_AudioFormat format;

            [FieldOffset(6)] // size = 1
            public byte channels;

            [FieldOffset(7)] // size = 1
            public byte silence;

            [FieldOffset(8)] // size = 2
            public ushort samples;

            [FieldOffset(10)] // size = 2
            public ushort padding;

            [FieldOffset(12)] // size = 4
            public uint size;

            [FieldOffset(16)] // size = 8
            public SDL_AudioCallback callback;

            [FieldOffset(24)] // size = 8
            public void* userdata;
        }

        // Struct @ SDL_rect.h:98:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_FRect
        {
            [FieldOffset(0)] // size = 4
            public float x;

            [FieldOffset(4)] // size = 4
            public float y;

            [FieldOffset(8)] // size = 4
            public float w;

            [FieldOffset(12)] // size = 4
            public float h;
        }

        // Struct @ SDL_pixels.h:318:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct SDL_Palette
        {
            [FieldOffset(0)] // size = 4
            public int ncolors;

            [FieldOffset(8)] // size = 8
            public SDL_Color* colors;

            [FieldOffset(16)] // size = 4
            public uint version;

            [FieldOffset(20)] // size = 4
            public int refcount;
        }

        // Struct @ SDL_events.h:378:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_JoyButtonEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 1
            public byte button;

            [FieldOffset(13)] // size = 1
            public byte state;

            [FieldOffset(14)] // size = 1
            public byte padding1;

            [FieldOffset(15)] // size = 1
            public byte padding2;
        }

        // Struct @ SDL_events.h:497:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct SDL_TouchFingerEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 8
            public SDL_TouchID touchId;

            [FieldOffset(16)] // size = 8
            public SDL_FingerID fingerId;

            [FieldOffset(24)] // size = 4
            public float x;

            [FieldOffset(28)] // size = 4
            public float y;

            [FieldOffset(32)] // size = 4
            public float dx;

            [FieldOffset(36)] // size = 4
            public float dy;

            [FieldOffset(40)] // size = 4
            public float pressure;

            [FieldOffset(44)] // size = 4
            public uint windowID;
        }

        // Struct @ SDL_events.h:191:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct SDL_DisplayEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint display;

            [FieldOffset(12)] // size = 1
            public byte @event;

            [FieldOffset(13)] // size = 1
            public byte padding1;

            [FieldOffset(14)] // size = 1
            public byte padding2;

            [FieldOffset(15)] // size = 1
            public byte padding3;

            [FieldOffset(16)] // size = 4
            public int data1;
        }

        // Struct @ SDL_haptic.h:648:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
        public struct SDL_HapticRamp
        {
            [FieldOffset(0)] // size = 2
            public ushort type;

            [FieldOffset(4)] // size = 16
            public SDL_HapticDirection direction;

            [FieldOffset(20)] // size = 4
            public uint length;

            [FieldOffset(24)] // size = 2
            public ushort delay;

            [FieldOffset(26)] // size = 2
            public ushort button;

            [FieldOffset(28)] // size = 2
            public ushort interval;

            [FieldOffset(30)] // size = 2
            public short start;

            [FieldOffset(32)] // size = 2
            public short end;

            [FieldOffset(34)] // size = 2
            public ushort attack_length;

            [FieldOffset(36)] // size = 2
            public ushort attack_level;

            [FieldOffset(38)] // size = 2
            public ushort fade_length;

            [FieldOffset(40)] // size = 2
            public ushort fade_level;
        }

        // Struct @ SDL_events.h:550:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct SDL_DropEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 8
            public CString file;

            [FieldOffset(16)] // size = 4
            public uint windowID;
        }

        // Struct @ SDL_events.h:206:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
        public struct SDL_WindowEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 1
            public byte @event;

            [FieldOffset(13)] // size = 1
            public byte padding1;

            [FieldOffset(14)] // size = 1
            public byte padding2;

            [FieldOffset(15)] // size = 1
            public byte padding3;

            [FieldOffset(16)] // size = 4
            public int data1;

            [FieldOffset(20)] // size = 4
            public int data2;
        }

        // Union @ SDL_haptic.h:809:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
        public struct SDL_HapticEffect
        {
            [FieldOffset(0)] // size = 2
            public ushort type;

            [FieldOffset(0)] // size = 40
            public SDL_HapticConstant constant;

            [FieldOffset(0)] // size = 48
            public SDL_HapticPeriodic periodic;

            [FieldOffset(0)] // size = 68
            public SDL_HapticCondition condition;

            [FieldOffset(0)] // size = 44
            public SDL_HapticRamp ramp;

            [FieldOffset(0)] // size = 12
            public SDL_HapticLeftRight leftright;

            [FieldOffset(0)] // size = 56
            public SDL_HapticCustom custom;
        }

        // Struct @ SDL_events.h:238:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 52, Pack = 4)]
        public struct SDL_TextEditingEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 32
            public fixed byte _text[32]; // char[32]

            public string text
            {
                get
                {
                    fixed (SDL_TextEditingEvent* @this = &this)
                    {
                        var pointer = &@this->_text[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }

            [FieldOffset(44)] // size = 4
            public int start;

            [FieldOffset(48)] // size = 4
            public int length;
        }

        // Struct @ SDL_events.h:252:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct SDL_TextEditingExtEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(16)] // size = 8
            public CString text;

            [FieldOffset(24)] // size = 4
            public int start;

            [FieldOffset(28)] // size = 4
            public int length;
        }

        // Struct @ SDL_events.h:515:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct SDL_MultiGestureEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 8
            public SDL_TouchID touchId;

            [FieldOffset(16)] // size = 4
            public float dTheta;

            [FieldOffset(20)] // size = 4
            public float dDist;

            [FieldOffset(24)] // size = 4
            public float x;

            [FieldOffset(28)] // size = 4
            public float y;

            [FieldOffset(32)] // size = 2
            public ushort numFingers;

            [FieldOffset(34)] // size = 2
            public ushort padding;
        }

        // Struct @ SDL_joystick.h:358:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct SDL_VirtualJoystickDesc
        {
            [FieldOffset(0)] // size = 2
            public ushort version;

            [FieldOffset(2)] // size = 2
            public ushort type;

            [FieldOffset(4)] // size = 2
            public ushort naxes;

            [FieldOffset(6)] // size = 2
            public ushort nbuttons;

            [FieldOffset(8)] // size = 2
            public ushort nhats;

            [FieldOffset(10)] // size = 2
            public ushort vendor_id;

            [FieldOffset(12)] // size = 2
            public ushort product_id;

            [FieldOffset(14)] // size = 2
            public ushort padding;

            [FieldOffset(16)] // size = 4
            public uint button_mask;

            [FieldOffset(20)] // size = 4
            public uint axis_mask;

            [FieldOffset(24)] // size = 8
            public CString name;

            [FieldOffset(32)] // size = 8
            public void* userdata;

            [FieldOffset(40)] // size = 8
            public FnPtr_VoidPtr_Void Update;

            [FieldOffset(48)] // size = 8
            public FnPtr_VoidPtr_Int_Void SetPlayerIndex;

            [FieldOffset(56)] // size = 8
            public FnPtr_VoidPtr_Ushort_Ushort_Int Rumble;

            [FieldOffset(64)] // size = 8
            public FnPtr_VoidPtr_Ushort_Ushort_Int RumbleTriggers;

            [FieldOffset(72)] // size = 8
            public FnPtr_VoidPtr_Byte_Byte_Byte_Int SetLED;

            [FieldOffset(80)] // size = 8
            public FnPtr_VoidPtr_VoidPtr_Int_Int SendEffect;
        }

        // Struct @ SDL_events.h:413:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct SDL_ControllerAxisEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 1
            public byte axis;

            [FieldOffset(13)] // size = 1
            public byte padding1;

            [FieldOffset(14)] // size = 1
            public byte padding2;

            [FieldOffset(15)] // size = 1
            public byte padding3;

            [FieldOffset(16)] // size = 2
            public short value;

            [FieldOffset(18)] // size = 2
            public ushort padding4;
        }

        // Struct @ SDL_haptic.h:459:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_HapticDirection
        {
            [FieldOffset(0)] // size = 1
            public byte type;

            [FieldOffset(4)] // size = 12
            public fixed byte _dir[12]; // Sint32[3]

            public Span<int> dir
            {
                get
                {
                    fixed (SDL_HapticDirection* @this = &this)
                    {
                        var pointer = &@this->_dir[0];
                        var span = new Span<int>(pointer, 3);
                        return span;
                    }
                }
            }
        }

        // Struct @ SDL_shape.h:106:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_WindowShapeMode
        {
            [FieldOffset(0)] // size = 4
            public WindowShapeMode mode;

            [FieldOffset(4)] // size = 4
            public SDL_WindowShapeParams parameters;
        }

        // Struct @ SDL_haptic.h:611:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 68, Pack = 4)]
        public struct SDL_HapticCondition
        {
            [FieldOffset(0)] // size = 2
            public ushort type;

            [FieldOffset(4)] // size = 16
            public SDL_HapticDirection direction;

            [FieldOffset(20)] // size = 4
            public uint length;

            [FieldOffset(24)] // size = 2
            public ushort delay;

            [FieldOffset(26)] // size = 2
            public ushort button;

            [FieldOffset(28)] // size = 2
            public ushort interval;

            [FieldOffset(30)] // size = 6
            public fixed byte _right_sat[6]; // Uint16[3]

            public Span<ushort> right_sat
            {
                get
                {
                    fixed (SDL_HapticCondition* @this = &this)
                    {
                        var pointer = &@this->_right_sat[0];
                        var span = new Span<ushort>(pointer, 3);
                        return span;
                    }
                }
            }

            [FieldOffset(36)] // size = 6
            public fixed byte _left_sat[6]; // Uint16[3]

            public Span<ushort> left_sat
            {
                get
                {
                    fixed (SDL_HapticCondition* @this = &this)
                    {
                        var pointer = &@this->_left_sat[0];
                        var span = new Span<ushort>(pointer, 3);
                        return span;
                    }
                }
            }

            [FieldOffset(42)] // size = 6
            public fixed byte _right_coeff[6]; // Sint16[3]

            public Span<short> right_coeff
            {
                get
                {
                    fixed (SDL_HapticCondition* @this = &this)
                    {
                        var pointer = &@this->_right_coeff[0];
                        var span = new Span<short>(pointer, 3);
                        return span;
                    }
                }
            }

            [FieldOffset(48)] // size = 6
            public fixed byte _left_coeff[6]; // Sint16[3]

            public Span<short> left_coeff
            {
                get
                {
                    fixed (SDL_HapticCondition* @this = &this)
                    {
                        var pointer = &@this->_left_coeff[0];
                        var span = new Span<short>(pointer, 3);
                        return span;
                    }
                }
            }

            [FieldOffset(54)] // size = 6
            public fixed byte _deadband[6]; // Uint16[3]

            public Span<ushort> deadband
            {
                get
                {
                    fixed (SDL_HapticCondition* @this = &this)
                    {
                        var pointer = &@this->_deadband[0];
                        var span = new Span<ushort>(pointer, 3);
                        return span;
                    }
                }
            }

            [FieldOffset(60)] // size = 6
            public fixed byte _center[6]; // Sint16[3]

            public Span<short> center
            {
                get
                {
                    fixed (SDL_HapticCondition* @this = &this)
                    {
                        var pointer = &@this->_center[0];
                        var span = new Span<short>(pointer, 3);
                        return span;
                    }
                }
            }
        }

        // Struct @ SDL_events.h:266:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
        public struct SDL_TextInputEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 32
            public fixed byte _text[32]; // char[32]

            public string text
            {
                get
                {
                    fixed (SDL_TextInputEvent* @this = &this)
                    {
                        var pointer = &@this->_text[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }
        }

        // Struct @ SDL_pixels.h:309:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
        public struct SDL_Color
        {
            [FieldOffset(0)] // size = 1
            public byte r;

            [FieldOffset(1)] // size = 1
            public byte g;

            [FieldOffset(2)] // size = 1
            public byte b;

            [FieldOffset(3)] // size = 1
            public byte a;
        }

        // Struct @ SDL_events.h:430:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_ControllerButtonEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 1
            public byte button;

            [FieldOffset(13)] // size = 1
            public byte state;

            [FieldOffset(14)] // size = 1
            public byte padding1;

            [FieldOffset(15)] // size = 1
            public byte padding2;
        }

        // Struct @ SDL_pixels.h:329:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct SDL_PixelFormat
        {
            [FieldOffset(0)] // size = 4
            public uint format;

            [FieldOffset(8)] // size = 8
            public SDL_Palette* palette;

            [FieldOffset(16)] // size = 1
            public byte BitsPerPixel;

            [FieldOffset(17)] // size = 1
            public byte BytesPerPixel;

            [FieldOffset(18)] // size = 2
            public fixed byte _padding[2]; // Uint8[2]

            public Span<byte> padding
            {
                get
                {
                    fixed (SDL_PixelFormat* @this = &this)
                    {
                        var pointer = &@this->_padding[0];
                        var span = new Span<byte>(pointer, 2);
                        return span;
                    }
                }
            }

            [FieldOffset(20)] // size = 4
            public uint Rmask;

            [FieldOffset(24)] // size = 4
            public uint Gmask;

            [FieldOffset(28)] // size = 4
            public uint Bmask;

            [FieldOffset(32)] // size = 4
            public uint Amask;

            [FieldOffset(36)] // size = 1
            public byte Rloss;

            [FieldOffset(37)] // size = 1
            public byte Gloss;

            [FieldOffset(38)] // size = 1
            public byte Bloss;

            [FieldOffset(39)] // size = 1
            public byte Aloss;

            [FieldOffset(40)] // size = 1
            public byte Rshift;

            [FieldOffset(41)] // size = 1
            public byte Gshift;

            [FieldOffset(42)] // size = 1
            public byte Bshift;

            [FieldOffset(43)] // size = 1
            public byte Ashift;

            [FieldOffset(44)] // size = 4
            public int refcount;

            [FieldOffset(48)] // size = 8
            public SDL_PixelFormat* next;
        }

        // Struct @ SDL_assert.h:117:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct SDL_AssertData
        {
            [FieldOffset(0)] // size = 4
            public int always_ignore;

            [FieldOffset(4)] // size = 4
            public uint trigger_count;

            [FieldOffset(8)] // size = 8
            public CString condition;

            [FieldOffset(16)] // size = 8
            public CString filename;

            [FieldOffset(24)] // size = 4
            public int linenum;

            [FieldOffset(32)] // size = 8
            public CString function;

            [FieldOffset(40)] // size = 8
            public SDL_AssertData* next;
        }

        // Struct @ SDL_rect.h:60:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_FPoint
        {
            [FieldOffset(0)] // size = 4
            public float x;

            [FieldOffset(4)] // size = 4
            public float y;
        }

        // Struct @ SDL_events.h:326:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct SDL_JoyAxisEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 1
            public byte axis;

            [FieldOffset(13)] // size = 1
            public byte padding1;

            [FieldOffset(14)] // size = 1
            public byte padding2;

            [FieldOffset(15)] // size = 1
            public byte padding3;

            [FieldOffset(16)] // size = 2
            public short value;

            [FieldOffset(18)] // size = 2
            public ushort padding4;
        }

        // Union @ SDL_events.h:621:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct SDL_Event
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(0)] // size = 8
            public SDL_CommonEvent common;

            [FieldOffset(0)] // size = 20
            public SDL_DisplayEvent display;

            [FieldOffset(0)] // size = 24
            public SDL_WindowEvent window;

            [FieldOffset(0)] // size = 32
            public SDL_KeyboardEvent key;

            [FieldOffset(0)] // size = 52
            public SDL_TextEditingEvent edit;

            [FieldOffset(0)] // size = 32
            public SDL_TextEditingExtEvent editExt;

            [FieldOffset(0)] // size = 44
            public SDL_TextInputEvent text;

            [FieldOffset(0)] // size = 36
            public SDL_MouseMotionEvent motion;

            [FieldOffset(0)] // size = 28
            public SDL_MouseButtonEvent button;

            [FieldOffset(0)] // size = 36
            public SDL_MouseWheelEvent wheel;

            [FieldOffset(0)] // size = 20
            public SDL_JoyAxisEvent jaxis;

            [FieldOffset(0)] // size = 20
            public SDL_JoyBallEvent jball;

            [FieldOffset(0)] // size = 16
            public SDL_JoyHatEvent jhat;

            [FieldOffset(0)] // size = 16
            public SDL_JoyButtonEvent jbutton;

            [FieldOffset(0)] // size = 12
            public SDL_JoyDeviceEvent jdevice;

            [FieldOffset(0)] // size = 16
            public SDL_JoyBatteryEvent jbattery;

            [FieldOffset(0)] // size = 20
            public SDL_ControllerAxisEvent caxis;

            [FieldOffset(0)] // size = 16
            public SDL_ControllerButtonEvent cbutton;

            [FieldOffset(0)] // size = 12
            public SDL_ControllerDeviceEvent cdevice;

            [FieldOffset(0)] // size = 32
            public SDL_ControllerTouchpadEvent ctouchpad;

            [FieldOffset(0)] // size = 28
            public SDL_ControllerSensorEvent csensor;

            [FieldOffset(0)] // size = 16
            public SDL_AudioDeviceEvent adevice;

            [FieldOffset(0)] // size = 36
            public SDL_SensorEvent sensor;

            [FieldOffset(0)] // size = 8
            public SDL_QuitEvent quit;

            [FieldOffset(0)] // size = 32
            public SDL_UserEvent user;

            [FieldOffset(0)] // size = 16
            public SDL_SysWMEvent syswm;

            [FieldOffset(0)] // size = 48
            public SDL_TouchFingerEvent tfinger;

            [FieldOffset(0)] // size = 40
            public SDL_MultiGestureEvent mgesture;

            [FieldOffset(0)] // size = 40
            public SDL_DollarGestureEvent dgesture;

            [FieldOffset(0)] // size = 24
            public SDL_DropEvent drop;

            [FieldOffset(0)] // size = 56
            public fixed byte _padding[56]; // Uint8[56]

            public Span<byte> padding
            {
                get
                {
                    fixed (SDL_Event* @this = &this)
                    {
                        var pointer = &@this->_padding[0];
                        var span = new Span<byte>(pointer, 56);
                        return span;
                    }
                }
            }
        }

        // Struct @ SDL_events.h:222:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
        public struct SDL_KeyboardEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 1
            public byte state;

            [FieldOffset(13)] // size = 1
            public byte repeat;

            [FieldOffset(14)] // size = 1
            public byte padding2;

            [FieldOffset(15)] // size = 1
            public byte padding3;

            [FieldOffset(16)] // size = 16
            public SDL_Keysym keysym;
        }

        // Struct @ SDL_video.h:53:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct SDL_DisplayMode
        {
            [FieldOffset(0)] // size = 4
            public uint format;

            [FieldOffset(4)] // size = 4
            public int w;

            [FieldOffset(8)] // size = 4
            public int h;

            [FieldOffset(12)] // size = 4
            public int refresh_rate;

            [FieldOffset(16)] // size = 8
            public void* driverdata;
        }

        // Struct @ SDL_haptic.h:713:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct SDL_HapticCustom
        {
            [FieldOffset(0)] // size = 2
            public ushort type;

            [FieldOffset(4)] // size = 16
            public SDL_HapticDirection direction;

            [FieldOffset(20)] // size = 4
            public uint length;

            [FieldOffset(24)] // size = 2
            public ushort delay;

            [FieldOffset(26)] // size = 2
            public ushort button;

            [FieldOffset(28)] // size = 2
            public ushort interval;

            [FieldOffset(30)] // size = 1
            public byte channels;

            [FieldOffset(32)] // size = 2
            public ushort period;

            [FieldOffset(34)] // size = 2
            public ushort samples;

            [FieldOffset(40)] // size = 8
            public ushort* data;

            [FieldOffset(48)] // size = 2
            public ushort attack_length;

            [FieldOffset(50)] // size = 2
            public ushort attack_level;

            [FieldOffset(52)] // size = 2
            public ushort fade_length;

            [FieldOffset(54)] // size = 2
            public ushort fade_level;
        }

        // Struct @ SDL_messagebox.h:68:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
        public struct SDL_MessageBoxColor
        {
            [FieldOffset(0)] // size = 1
            public byte r;

            [FieldOffset(1)] // size = 1
            public byte g;

            [FieldOffset(2)] // size = 1
            public byte b;
        }

        // Struct @ SDL_events.h:342:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct SDL_JoyBallEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 1
            public byte ball;

            [FieldOffset(13)] // size = 1
            public byte padding1;

            [FieldOffset(14)] // size = 1
            public byte padding2;

            [FieldOffset(15)] // size = 1
            public byte padding3;

            [FieldOffset(16)] // size = 2
            public short xrel;

            [FieldOffset(18)] // size = 2
            public short yrel;
        }

        // Struct @ SDL_keyboard.h:47:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_Keysym
        {
            [FieldOffset(0)] // size = 4
            public SDL_Scancode scancode;

            [FieldOffset(4)] // size = 4
            public SDL_Keycode sym;

            [FieldOffset(8)] // size = 2
            public ushort mod;

            [FieldOffset(12)] // size = 4
            public uint unused;
        }

        // Struct @ SDL_version.h:51:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
        public struct SDL_version
        {
            [FieldOffset(0)] // size = 1
            public byte major;

            [FieldOffset(1)] // size = 1
            public byte minor;

            [FieldOffset(2)] // size = 1
            public byte patch;
        }

        // Struct @ SDL_atomic.h:244:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct SDL_atomic_t
        {
            [FieldOffset(0)] // size = 4
            public int value;
        }

        // Struct @ SDL_events.h:455:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
        public struct SDL_ControllerTouchpadEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 4
            public int touchpad;

            [FieldOffset(16)] // size = 4
            public int finger;

            [FieldOffset(20)] // size = 4
            public float x;

            [FieldOffset(24)] // size = 4
            public float y;

            [FieldOffset(28)] // size = 4
            public float pressure;
        }

        // Struct @ SDL_render.h:78:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct SDL_RendererInfo
        {
            [FieldOffset(0)] // size = 8
            public CString name;

            [FieldOffset(8)] // size = 4
            public uint flags;

            [FieldOffset(12)] // size = 4
            public uint num_texture_formats;

            [FieldOffset(16)] // size = 64
            public fixed byte _texture_formats[64]; // Uint32[16]

            public Span<uint> texture_formats
            {
                get
                {
                    fixed (SDL_RendererInfo* @this = &this)
                    {
                        var pointer = &@this->_texture_formats[0];
                        var span = new Span<uint>(pointer, 16);
                        return span;
                    }
                }
            }

            [FieldOffset(80)] // size = 4
            public int max_texture_width;

            [FieldOffset(84)] // size = 4
            public int max_texture_height;
        }

        // Struct @ SDL_locale.h:43:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct SDL_Locale
        {
            [FieldOffset(0)] // size = 8
            public CString language;

            [FieldOffset(8)] // size = 8
            public CString country;
        }

        // Struct @ SDL_render.h:91:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
        public struct SDL_Vertex
        {
            [FieldOffset(0)] // size = 8
            public SDL_FPoint position;

            [FieldOffset(8)] // size = 4
            public SDL_Color color;

            [FieldOffset(12)] // size = 8
            public SDL_FPoint tex_coord;
        }

        // Struct @ SDL_events.h:182:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_CommonEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;
        }

        // Struct @ SDL_haptic.h:477:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
        public struct SDL_HapticConstant
        {
            [FieldOffset(0)] // size = 2
            public ushort type;

            [FieldOffset(4)] // size = 16
            public SDL_HapticDirection direction;

            [FieldOffset(20)] // size = 4
            public uint length;

            [FieldOffset(24)] // size = 2
            public ushort delay;

            [FieldOffset(26)] // size = 2
            public ushort button;

            [FieldOffset(28)] // size = 2
            public ushort interval;

            [FieldOffset(30)] // size = 2
            public short level;

            [FieldOffset(32)] // size = 2
            public ushort attack_length;

            [FieldOffset(34)] // size = 2
            public ushort attack_level;

            [FieldOffset(36)] // size = 2
            public ushort fade_length;

            [FieldOffset(38)] // size = 2
            public ushort fade_level;
        }

        // Struct @ SDL_gamecontroller.h:94:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_GameControllerButtonBind_ANONYMOUS_FIELD1_ANONYMOUS_FIELD2
        {
            [FieldOffset(0)] // size = 4
            public int hat;

            [FieldOffset(4)] // size = 4
            public int hat_mask;
        }

        // Struct @ SDL_messagebox.h:58:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct SDL_MessageBoxButtonData
        {
            [FieldOffset(0)] // size = 4
            public uint flags;

            [FieldOffset(4)] // size = 4
            public int buttonid;

            [FieldOffset(8)] // size = 8
            public CString text;
        }

        // Struct @ SDL_messagebox.h:86:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 15, Pack = 1)]
        public struct SDL_MessageBoxColorScheme
        {
            [FieldOffset(0)] // size = 15
            public fixed byte _colors[15]; // SDL_MessageBoxColor[5]

            public Span<SDL_MessageBoxColor> colors
            {
                get
                {
                    fixed (SDL_MessageBoxColorScheme* @this = &this)
                    {
                        var pointer = &@this->_colors[0];
                        var span = new Span<SDL_MessageBoxColor>(pointer, 5);
                        return span;
                    }
                }
            }
        }

        // Struct @ SDL_events.h:562:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
        public struct SDL_SensorEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public int which;

            [FieldOffset(12)] // size = 24
            public fixed byte _data[24]; // float[6]

            public Span<float> data
            {
                get
                {
                    fixed (SDL_SensorEvent* @this = &this)
                    {
                        var pointer = &@this->_data[0];
                        var span = new Span<float>(pointer, 6);
                        return span;
                    }
                }
            }
        }

        // Struct @ SDL_haptic.h:685:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct SDL_HapticLeftRight
        {
            [FieldOffset(0)] // size = 2
            public ushort type;

            [FieldOffset(4)] // size = 4
            public uint length;

            [FieldOffset(8)] // size = 2
            public ushort large_magnitude;

            [FieldOffset(10)] // size = 2
            public ushort small_magnitude;
        }

        // Struct @ SDL_events.h:310:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
        public struct SDL_MouseWheelEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 4
            public uint which;

            [FieldOffset(16)] // size = 4
            public int x;

            [FieldOffset(20)] // size = 4
            public int y;

            [FieldOffset(24)] // size = 4
            public uint direction;

            [FieldOffset(28)] // size = 4
            public float preciseX;

            [FieldOffset(32)] // size = 4
            public float preciseY;
        }

        // Struct @ SDL_events.h:532:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct SDL_DollarGestureEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 8
            public SDL_TouchID touchId;

            [FieldOffset(16)] // size = 8
            public SDL_GestureID gestureId;

            [FieldOffset(24)] // size = 4
            public uint numFingers;

            [FieldOffset(28)] // size = 4
            public float error;

            [FieldOffset(32)] // size = 4
            public float x;

            [FieldOffset(36)] // size = 4
            public float y;
        }

        // Struct @ SDL_rect.h:48:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_Point
        {
            [FieldOffset(0)] // size = 4
            public int x;

            [FieldOffset(4)] // size = 4
            public int y;
        }

        // Struct @ SDL_events.h:277:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
        public struct SDL_MouseMotionEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 4
            public uint which;

            [FieldOffset(16)] // size = 4
            public uint state;

            [FieldOffset(20)] // size = 4
            public int x;

            [FieldOffset(24)] // size = 4
            public int y;

            [FieldOffset(28)] // size = 4
            public int xrel;

            [FieldOffset(32)] // size = 4
            public int yrel;
        }

        // Struct @ SDL_events.h:482:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_AudioDeviceEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint which;

            [FieldOffset(12)] // size = 1
            public byte iscapture;

            [FieldOffset(13)] // size = 1
            public byte padding1;

            [FieldOffset(14)] // size = 1
            public byte padding2;

            [FieldOffset(15)] // size = 1
            public byte padding3;
        }

        // Struct @ SDL_gamecontroller.h:87:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct SDL_GameControllerButtonBind
        {
            [FieldOffset(0)] // size = 4
            public SDL_GameControllerBindType bindType;

            [FieldOffset(4)] // size = 8
            public SDL_GameControllerButtonBind_ANONYMOUS_FIELD1 value;
        }

        // Struct @ SDL_events.h:470:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
        public struct SDL_ControllerSensorEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public SDL_JoystickID which;

            [FieldOffset(12)] // size = 4
            public int sensor;

            [FieldOffset(16)] // size = 12
            public fixed byte _data[12]; // float[3]

            public Span<float> data
            {
                get
                {
                    fixed (SDL_ControllerSensorEvent* @this = &this)
                    {
                        var pointer = &@this->_data[0];
                        var span = new Span<float>(pointer, 3);
                        return span;
                    }
                }
            }
        }

        // Struct @ SDL_events.h:591:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct SDL_UserEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public uint windowID;

            [FieldOffset(12)] // size = 4
            public int code;

            [FieldOffset(16)] // size = 8
            public void* data1;

            [FieldOffset(24)] // size = 8
            public void* data2;
        }

        // Struct @ SDL_rect.h:78:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
        public struct SDL_Rect
        {
            [FieldOffset(0)] // size = 4
            public int x;

            [FieldOffset(4)] // size = 4
            public int y;

            [FieldOffset(8)] // size = 4
            public int w;

            [FieldOffset(12)] // size = 4
            public int h;
        }

        // Struct @ SDL_hidapi.h:83:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
        public struct SDL_hid_device_info
        {
            [FieldOffset(0)] // size = 8
            public CString path;

            [FieldOffset(8)] // size = 2
            public ushort vendor_id;

            [FieldOffset(10)] // size = 2
            public ushort product_id;

            [FieldOffset(16)] // size = 8
            public CStringWide serial_number;

            [FieldOffset(24)] // size = 2
            public ushort release_number;

            [FieldOffset(32)] // size = 8
            public CStringWide manufacturer_string;

            [FieldOffset(40)] // size = 8
            public CStringWide product_string;

            [FieldOffset(48)] // size = 2
            public ushort usage_page;

            [FieldOffset(50)] // size = 2
            public ushort usage;

            [FieldOffset(52)] // size = 4
            public int interface_number;

            [FieldOffset(56)] // size = 4
            public int interface_class;

            [FieldOffset(60)] // size = 4
            public int interface_subclass;

            [FieldOffset(64)] // size = 4
            public int interface_protocol;

            [FieldOffset(72)] // size = 8
            public SDL_hid_device_info* next;
        }

        // Struct @ SDL_events.h:611:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct SDL_SysWMEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 8
            public SDL_SysWMmsg* msg;
        }

        // Struct @ SDL_events.h:445:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct SDL_ControllerDeviceEvent
        {
            [FieldOffset(0)] // size = 4
            public uint type;

            [FieldOffset(4)] // size = 4
            public uint timestamp;

            [FieldOffset(8)] // size = 4
            public int which;
        }

        // Struct @ SDL_messagebox.h:94:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct SDL_MessageBoxData
        {
            [FieldOffset(0)] // size = 4
            public uint flags;

            [FieldOffset(8)] // size = 8
            public SDL_Window* window;

            [FieldOffset(16)] // size = 8
            public CString title;

            [FieldOffset(24)] // size = 8
            public CString message;

            [FieldOffset(32)] // size = 4
            public int numbuttons;

            [FieldOffset(40)] // size = 8
            public SDL_MessageBoxButtonData* buttons;

            [FieldOffset(48)] // size = 8
            public SDL_MessageBoxColorScheme* colorScheme;
        }

        // Struct @ SDL_haptic.h:558:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
        public struct SDL_HapticPeriodic
        {
            [FieldOffset(0)] // size = 2
            public ushort type;

            [FieldOffset(4)] // size = 16
            public SDL_HapticDirection direction;

            [FieldOffset(20)] // size = 4
            public uint length;

            [FieldOffset(24)] // size = 2
            public ushort delay;

            [FieldOffset(26)] // size = 2
            public ushort button;

            [FieldOffset(28)] // size = 2
            public ushort interval;

            [FieldOffset(30)] // size = 2
            public ushort period;

            [FieldOffset(32)] // size = 2
            public short magnitude;

            [FieldOffset(34)] // size = 2
            public short offset;

            [FieldOffset(36)] // size = 2
            public ushort phase;

            [FieldOffset(38)] // size = 2
            public ushort attack_length;

            [FieldOffset(40)] // size = 2
            public ushort attack_level;

            [FieldOffset(42)] // size = 2
            public ushort fade_length;

            [FieldOffset(44)] // size = 2
            public ushort fade_level;
        }

        // Union @ SDL_gamecontroller.h:90:5
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_GameControllerButtonBind_ANONYMOUS_FIELD1
        {
            [FieldOffset(0)] // size = 4
            public int button;

            [FieldOffset(0)] // size = 4
            public int axis;

            [FieldOffset(0)] // size = 8
            public SDL_GameControllerButtonBind_ANONYMOUS_FIELD1_ANONYMOUS_FIELD2 hat;
        }

        // Union @ SDL_shape.h:99:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
        public struct SDL_WindowShapeParams
        {
            [FieldOffset(0)] // size = 1
            public byte binarizationCutoff;

            [FieldOffset(0)] // size = 4
            public SDL_Color colorKey;
        }

        // OpaqueType @ SDL_system.h:113:29
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct ID3D12Device
        {
        }

        // OpaqueType @ SDL_gamecontroller.h:59:36
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_GameController
        {
        }

        // OpaqueType @ SDL_haptic.h:141:28
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_Haptic
        {
        }

        // OpaqueType @ SDL_audio.h:989:33
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_AudioStream
        {
        }

        // OpaqueType @ SDL_sensor.h:52:28
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_Sensor
        {
        }

        // OpaqueType @ SDL_render.h:142:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_Renderer
        {
        }

        // OpaqueType @ SDL_system.h:93:29
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct ID3D11Device
        {
        }

        // OpaqueType @ SDL_audio.h:244:23
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_AudioCVT
        {
        }

        // OpaqueType @ SDL_surface.h:64:28
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_BlitMap
        {
        }

        // OpaqueType @ SDL_system.h:77:33
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct IDirect3DDevice9
        {
        }

        // OpaqueType @ SDL_events.h:603:29
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_SysWMmsg
        {
        }

        // OpaqueType @ SDL_hidapi.h:77:32
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_hid_device
        {
        }

        // OpaqueType @ SDL_rwops.h:135:3
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_RWops
        {
        }

        // OpaqueType @ SDL_mutex.h:335:25
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_cond
        {
        }

        // OpaqueType @ SDL_mutex.h:174:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_sem
        {
        }

        // OpaqueType @ SDL_video.h:95:27
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_Window
        {
        }

        // OpaqueType @ SDL_joystick.h:70:30
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_Joystick
        {
        }

        // OpaqueType @ SDL_mutex.h:59:26
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_mutex
        {
        }

        // OpaqueType @ SDL_render.h:148:28
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_Texture
        {
        }

        // OpaqueType @ SDL_mouse.h:41:27
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Sequential)]
        public struct SDL_Cursor
        {
        }

        // TypeAlias @ SDL_audio.h:165:25
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_AudioCallback
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_BytePtr_Int_Void Data;

            public static implicit operator FnPtr_VoidPtr_BytePtr_Int_Void(SDL_AudioCallback data) => data.Data;
            public static implicit operator SDL_AudioCallback(FnPtr_VoidPtr_BytePtr_Int_Void data) => new() { Data = data };
        }

        // TypeAlias @ SDL_assert.h:202:35
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_AssertionHandler
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_SDL_AssertDataPtr_VoidPtr_SDL_AssertState Data;

            public static implicit operator FnPtr_SDL_AssertDataPtr_VoidPtr_SDL_AssertState(SDL_AssertionHandler data) => data.Data;
            public static implicit operator SDL_AssertionHandler(FnPtr_SDL_AssertDataPtr_VoidPtr_SDL_AssertState data) => new() { Data = data };
        }

        // TypeAlias @ SDL_audio.h:66:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
        public struct SDL_AudioFormat
        {
            [FieldOffset(0)] // size = 2, padding = 0
            public ushort Data;

            public static implicit operator ushort(SDL_AudioFormat data) => data.Data;
            public static implicit operator SDL_AudioFormat(ushort data) => new() { Data = data };
        }

        // TypeAlias @ SDL_gesture.h:44:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_GestureID
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public long Data;

            public static implicit operator long(SDL_GestureID data) => data.Data;
            public static implicit operator SDL_GestureID(long data) => new() { Data = data };
        }

        // TypeAlias @ SDL_hints.h:2231:24
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_HintCallback
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_CString_CString_CString_Void Data;

            public static implicit operator FnPtr_VoidPtr_CString_CString_CString_Void(SDL_HintCallback data) => data.Data;
            public static implicit operator SDL_HintCallback(FnPtr_VoidPtr_CString_CString_CString_Void data) => new() { Data = data };
        }

        // TypeAlias @ SDL_timer.h:157:27
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_TimerCallback
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_Uint_VoidPtr_Uint Data;

            public static implicit operator FnPtr_Uint_VoidPtr_Uint(SDL_TimerCallback data) => data.Data;
            public static implicit operator SDL_TimerCallback(FnPtr_Uint_VoidPtr_Uint data) => new() { Data = data };
        }

        // TypeAlias @ SDL_atomic.h:89:13
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct SDL_SpinLock
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(SDL_SpinLock data) => data.Data;
            public static implicit operator SDL_SpinLock(int data) => new() { Data = data };
        }

        // TypeAlias @ SDL_system.h:46:25
        //	x86_64-pc-windows-msvc
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_WindowsMessageHook
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_VoidPtr_Uint_Ulong_Long_Void Data;

            public static implicit operator FnPtr_VoidPtr_VoidPtr_Uint_Ulong_Long_Void(SDL_WindowsMessageHook data) => data.Data;
            public static implicit operator SDL_WindowsMessageHook(FnPtr_VoidPtr_VoidPtr_Uint_Ulong_Long_Void data) => new() { Data = data };
        }

        // TypeAlias @ SDL_metal.h:44:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_MetalView
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(SDL_MetalView data) => data.Data;
            public static implicit operator SDL_MetalView(void* data) => new() { Data = data };
        }

        // TypeAlias @ SDL_sensor.h:60:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct SDL_SensorID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(SDL_SensorID data) => data.Data;
            public static implicit operator SDL_SensorID(int data) => new() { Data = data };
        }

        // TypeAlias @ SDL_video.h:218:15
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_GLContext
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(SDL_GLContext data) => data.Data;
            public static implicit operator SDL_GLContext(void* data) => new() { Data = data };
        }

        // TypeAlias @ SDL_log.h:367:24
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_LogOutputFunction
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_Int_SDL_LogPriority_CString_Void Data;

            public static implicit operator FnPtr_VoidPtr_Int_SDL_LogPriority_CString_Void(SDL_LogOutputFunction data) => data.Data;
            public static implicit operator SDL_LogOutputFunction(FnPtr_VoidPtr_Int_SDL_LogPriority_CString_Void data) => new() { Data = data };
        }

        // TypeAlias @ SDL_keycode.h:45:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct SDL_Keycode
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(SDL_Keycode data) => data.Data;
            public static implicit operator SDL_Keycode(int data) => new() { Data = data };
        }

        // TypeAlias @ SDL_joystick.h:73:18
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
        public struct SDL_JoystickGUID
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public SDL_GUID Data;

            public static implicit operator SDL_GUID(SDL_JoystickGUID data) => data.Data;
            public static implicit operator SDL_JoystickGUID(SDL_GUID data) => new() { Data = data };
        }

        // TypeAlias @ SDL_touch.h:41:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_TouchID
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public long Data;

            public static implicit operator long(SDL_TouchID data) => data.Data;
            public static implicit operator SDL_TouchID(long data) => new() { Data = data };
        }

        // TypeAlias @ SDL_audio.h:419:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct SDL_AudioDeviceID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Data;

            public static implicit operator uint(SDL_AudioDeviceID data) => data.Data;
            public static implicit operator SDL_AudioDeviceID(uint data) => new() { Data = data };
        }

        // TypeAlias @ SDL_video.h:1644:37
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_HitTest
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_SDL_WindowPtr_SDL_PointPtr_VoidPtr_SDL_HitTestResult Data;

            public static implicit operator FnPtr_SDL_WindowPtr_SDL_PointPtr_VoidPtr_SDL_HitTestResult(SDL_HitTest data) => data.Data;
            public static implicit operator SDL_HitTest(FnPtr_SDL_WindowPtr_SDL_PointPtr_VoidPtr_SDL_HitTestResult data) => new() { Data = data };
        }

        // TypeAlias @ SDL_joystick.h:82:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct SDL_JoystickID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(SDL_JoystickID data) => data.Data;
            public static implicit operator SDL_JoystickID(int data) => new() { Data = data };
        }

        // TypeAlias @ SDL_touch.h:42:16
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_FingerID
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public long Data;

            public static implicit operator long(SDL_FingerID data) => data.Data;
            public static implicit operator SDL_FingerID(long data) => new() { Data = data };
        }

        // TypeAlias @ SDL_timer.h:162:13
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct SDL_TimerID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(SDL_TimerID data) => data.Data;
            public static implicit operator SDL_TimerID(int data) => new() { Data = data };
        }

        // TypeAlias @ SDL_events.h:976:24
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct SDL_EventFilter
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public FnPtr_VoidPtr_SDL_EventPtr_Int Data;

            public static implicit operator FnPtr_VoidPtr_SDL_EventPtr_Int(SDL_EventFilter data) => data.Data;
            public static implicit operator SDL_EventFilter(FnPtr_VoidPtr_SDL_EventPtr_Int data) => new() { Data = data };
        }

        // Enum @ SDL_joystick.h:98:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_JoystickPowerLevel : int
        {
            SDL_JOYSTICK_POWER_UNKNOWN = -1,
            SDL_JOYSTICK_POWER_EMPTY = 0,
            SDL_JOYSTICK_POWER_LOW = 1,
            SDL_JOYSTICK_POWER_MEDIUM = 2,
            SDL_JOYSTICK_POWER_FULL = 3,
            SDL_JOYSTICK_POWER_WIRED = 4,
            SDL_JOYSTICK_POWER_MAX = 5
        }

        // Enum @ SDL_log.h:64:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_LogCategory : int
        {
            SDL_LOG_CATEGORY_APPLICATION = 0,
            SDL_LOG_CATEGORY_ERROR = 1,
            SDL_LOG_CATEGORY_ASSERT = 2,
            SDL_LOG_CATEGORY_SYSTEM = 3,
            SDL_LOG_CATEGORY_AUDIO = 4,
            SDL_LOG_CATEGORY_VIDEO = 5,
            SDL_LOG_CATEGORY_RENDER = 6,
            SDL_LOG_CATEGORY_INPUT = 7,
            SDL_LOG_CATEGORY_TEST = 8,
            SDL_LOG_CATEGORY_RESERVED1 = 9,
            SDL_LOG_CATEGORY_RESERVED2 = 10,
            SDL_LOG_CATEGORY_RESERVED3 = 11,
            SDL_LOG_CATEGORY_RESERVED4 = 12,
            SDL_LOG_CATEGORY_RESERVED5 = 13,
            SDL_LOG_CATEGORY_RESERVED6 = 14,
            SDL_LOG_CATEGORY_RESERVED7 = 15,
            SDL_LOG_CATEGORY_RESERVED8 = 16,
            SDL_LOG_CATEGORY_RESERVED9 = 17,
            SDL_LOG_CATEGORY_RESERVED10 = 18,
            SDL_LOG_CATEGORY_CUSTOM = 19
        }

        // Enum @ SDL_render.h:131:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_RendererFlip : int
        {
            SDL_FLIP_NONE = 0,
            SDL_FLIP_HORIZONTAL = 1,
            SDL_FLIP_VERTICAL = 2
        }

        // Enum @ SDL_video.h:154:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_WindowEventID : int
        {
            SDL_WINDOWEVENT_NONE = 0,
            SDL_WINDOWEVENT_SHOWN = 1,
            SDL_WINDOWEVENT_HIDDEN = 2,
            SDL_WINDOWEVENT_EXPOSED = 3,
            SDL_WINDOWEVENT_MOVED = 4,
            SDL_WINDOWEVENT_RESIZED = 5,
            SDL_WINDOWEVENT_SIZE_CHANGED = 6,
            SDL_WINDOWEVENT_MINIMIZED = 7,
            SDL_WINDOWEVENT_MAXIMIZED = 8,
            SDL_WINDOWEVENT_RESTORED = 9,
            SDL_WINDOWEVENT_ENTER = 10,
            SDL_WINDOWEVENT_LEAVE = 11,
            SDL_WINDOWEVENT_FOCUS_GAINED = 12,
            SDL_WINDOWEVENT_FOCUS_LOST = 13,
            SDL_WINDOWEVENT_CLOSE = 14,
            SDL_WINDOWEVENT_TAKE_FOCUS = 15,
            SDL_WINDOWEVENT_HIT_TEST = 16,
            SDL_WINDOWEVENT_ICCPROF_CHANGED = 17,
            SDL_WINDOWEVENT_DISPLAY_CHANGED = 18
        }

        // Enum @ SDL_render.h:64:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_RendererFlags : int
        {
            SDL_RENDERER_SOFTWARE = 1,
            SDL_RENDERER_ACCELERATED = 2,
            SDL_RENDERER_PRESENTVSYNC = 4,
            SDL_RENDERER_TARGETTEXTURE = 8
        }

        // Enum @ SDL_gamecontroller.h:61:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GameControllerType : int
        {
            SDL_CONTROLLER_TYPE_UNKNOWN = 0,
            SDL_CONTROLLER_TYPE_XBOX360 = 1,
            SDL_CONTROLLER_TYPE_XBOXONE = 2,
            SDL_CONTROLLER_TYPE_PS3 = 3,
            SDL_CONTROLLER_TYPE_PS4 = 4,
            SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5,
            SDL_CONTROLLER_TYPE_VIRTUAL = 6,
            SDL_CONTROLLER_TYPE_PS5 = 7,
            SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8,
            SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9,
            SDL_CONTROLLER_TYPE_NVIDIA_SHIELD = 10
        }

        // Enum @ SDL_joystick.h:84:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_JoystickType : int
        {
            SDL_JOYSTICK_TYPE_UNKNOWN = 0,
            SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1,
            SDL_JOYSTICK_TYPE_WHEEL = 2,
            SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
            SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
            SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
            SDL_JOYSTICK_TYPE_GUITAR = 6,
            SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
            SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
            SDL_JOYSTICK_TYPE_THROTTLE = 9
        }

        // Enum @ SDL_pixels.h:104:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_PackedLayout : int
        {
            SDL_PACKEDLAYOUT_NONE = 0,
            SDL_PACKEDLAYOUT_332 = 1,
            SDL_PACKEDLAYOUT_4444 = 2,
            SDL_PACKEDLAYOUT_1555 = 3,
            SDL_PACKEDLAYOUT_5551 = 4,
            SDL_PACKEDLAYOUT_565 = 5,
            SDL_PACKEDLAYOUT_8888 = 6,
            SDL_PACKEDLAYOUT_2101010 = 7,
            SDL_PACKEDLAYOUT_1010102 = 8
        }

        // Enum @ SDL_gamecontroller.h:76:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GameControllerBindType : int
        {
            SDL_CONTROLLER_BINDTYPE_NONE = 0,
            SDL_CONTROLLER_BINDTYPE_BUTTON = 1,
            SDL_CONTROLLER_BINDTYPE_AXIS = 2,
            SDL_CONTROLLER_BINDTYPE_HAT = 3
        }

        // Enum @ SDL_video.h:102:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_WindowFlags : int
        {
            SDL_WINDOW_FULLSCREEN = 1,
            SDL_WINDOW_OPENGL = 2,
            SDL_WINDOW_SHOWN = 4,
            SDL_WINDOW_HIDDEN = 8,
            SDL_WINDOW_BORDERLESS = 16,
            SDL_WINDOW_RESIZABLE = 32,
            SDL_WINDOW_MINIMIZED = 64,
            SDL_WINDOW_MAXIMIZED = 128,
            SDL_WINDOW_MOUSE_GRABBED = 256,
            SDL_WINDOW_INPUT_FOCUS = 512,
            SDL_WINDOW_MOUSE_FOCUS = 1024,
            SDL_WINDOW_FULLSCREEN_DESKTOP = 4097,
            SDL_WINDOW_FOREIGN = 2048,
            SDL_WINDOW_ALLOW_HIGHDPI = 8192,
            SDL_WINDOW_MOUSE_CAPTURE = 16384,
            SDL_WINDOW_ALWAYS_ON_TOP = 32768,
            SDL_WINDOW_SKIP_TASKBAR = 65536,
            SDL_WINDOW_UTILITY = 131072,
            SDL_WINDOW_TOOLTIP = 262144,
            SDL_WINDOW_POPUP_MENU = 524288,
            SDL_WINDOW_KEYBOARD_GRABBED = 1048576,
            SDL_WINDOW_VULKAN = 268435456,
            SDL_WINDOW_METAL = 536870912,
            SDL_WINDOW_INPUT_GRABBED = 256
        }

        // Enum @ SDL_log.h:102:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_LogPriority : int
        {
            SDL_LOG_PRIORITY_VERBOSE = 1,
            SDL_LOG_PRIORITY_DEBUG = 2,
            SDL_LOG_PRIORITY_INFO = 3,
            SDL_LOG_PRIORITY_WARN = 4,
            SDL_LOG_PRIORITY_ERROR = 5,
            SDL_LOG_PRIORITY_CRITICAL = 6,
            SDL_NUM_LOG_PRIORITIES = 7
        }

        // Enum @ SDL_video.h:208:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_FlashOperation : int
        {
            SDL_FLASH_CANCEL = 0,
            SDL_FLASH_BRIEFLY = 1,
            SDL_FLASH_UNTIL_FOCUSED = 2
        }

        // Enum @ SDL_pixels.h:92:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_ArrayOrder : int
        {
            SDL_ARRAYORDER_NONE = 0,
            SDL_ARRAYORDER_RGB = 1,
            SDL_ARRAYORDER_RGBA = 2,
            SDL_ARRAYORDER_ARGB = 3,
            SDL_ARRAYORDER_BGR = 4,
            SDL_ARRAYORDER_BGRA = 5,
            SDL_ARRAYORDER_ABGR = 6
        }

        // Enum @ SDL_touch.h:44:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_TouchDeviceType : int
        {
            SDL_TOUCH_DEVICE_INVALID = -1,
            SDL_TOUCH_DEVICE_DIRECT = 0,
            SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
            SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
        }

        // Enum @ SDL_video.h:185:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_DisplayEventID : int
        {
            SDL_DISPLAYEVENT_NONE = 0,
            SDL_DISPLAYEVENT_ORIENTATION = 1,
            SDL_DISPLAYEVENT_CONNECTED = 2,
            SDL_DISPLAYEVENT_DISCONNECTED = 3
        }

        // Enum @ SDL_blendmode.h:77:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_BlendFactor : int
        {
            SDL_BLENDFACTOR_ZERO = 1,
            SDL_BLENDFACTOR_ONE = 2,
            SDL_BLENDFACTOR_SRC_COLOR = 3,
            SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
            SDL_BLENDFACTOR_SRC_ALPHA = 5,
            SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
            SDL_BLENDFACTOR_DST_COLOR = 7,
            SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
            SDL_BLENDFACTOR_DST_ALPHA = 9,
            SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
        }

        // Enum @ SDL_events.h:55:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_EventType : int
        {
            SDL_FIRSTEVENT = 0,
            SDL_QUIT = 256,
            SDL_APP_TERMINATING = 257,
            SDL_APP_LOWMEMORY = 258,
            SDL_APP_WILLENTERBACKGROUND = 259,
            SDL_APP_DIDENTERBACKGROUND = 260,
            SDL_APP_WILLENTERFOREGROUND = 261,
            SDL_APP_DIDENTERFOREGROUND = 262,
            SDL_LOCALECHANGED = 263,
            SDL_DISPLAYEVENT = 336,
            SDL_WINDOWEVENT = 512,
            SDL_SYSWMEVENT = 513,
            SDL_KEYDOWN = 768,
            SDL_KEYUP = 769,
            SDL_TEXTEDITING = 770,
            SDL_TEXTINPUT = 771,
            SDL_KEYMAPCHANGED = 772,
            SDL_TEXTEDITING_EXT = 773,
            SDL_MOUSEMOTION = 1024,
            SDL_MOUSEBUTTONDOWN = 1025,
            SDL_MOUSEBUTTONUP = 1026,
            SDL_MOUSEWHEEL = 1027,
            SDL_JOYAXISMOTION = 1536,
            SDL_JOYBALLMOTION = 1537,
            SDL_JOYHATMOTION = 1538,
            SDL_JOYBUTTONDOWN = 1539,
            SDL_JOYBUTTONUP = 1540,
            SDL_JOYDEVICEADDED = 1541,
            SDL_JOYDEVICEREMOVED = 1542,
            SDL_JOYBATTERYUPDATED = 1543,
            SDL_CONTROLLERAXISMOTION = 1616,
            SDL_CONTROLLERBUTTONDOWN = 1617,
            SDL_CONTROLLERBUTTONUP = 1618,
            SDL_CONTROLLERDEVICEADDED = 1619,
            SDL_CONTROLLERDEVICEREMOVED = 1620,
            SDL_CONTROLLERDEVICEREMAPPED = 1621,
            SDL_CONTROLLERTOUCHPADDOWN = 1622,
            SDL_CONTROLLERTOUCHPADMOTION = 1623,
            SDL_CONTROLLERTOUCHPADUP = 1624,
            SDL_CONTROLLERSENSORUPDATE = 1625,
            SDL_FINGERDOWN = 1792,
            SDL_FINGERUP = 1793,
            SDL_FINGERMOTION = 1794,
            SDL_DOLLARGESTURE = 2048,
            SDL_DOLLARRECORD = 2049,
            SDL_MULTIGESTURE = 2050,
            SDL_CLIPBOARDUPDATE = 2304,
            SDL_DROPFILE = 4096,
            SDL_DROPTEXT = 4097,
            SDL_DROPBEGIN = 4098,
            SDL_DROPCOMPLETE = 4099,
            SDL_AUDIODEVICEADDED = 4352,
            SDL_AUDIODEVICEREMOVED = 4353,
            SDL_SENSORUPDATE = 4608,
            SDL_RENDER_TARGETS_RESET = 8192,
            SDL_RENDER_DEVICE_RESET = 8193,
            SDL_POLLSENTINEL = 32512,
            SDL_USEREVENT = 32768,
            SDL_LASTEVENT = 65535
        }

        // Enum @ SDL_pixels.h:68:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_BitmapOrder : int
        {
            SDL_BITMAPORDER_NONE = 0,
            SDL_BITMAPORDER_4321 = 1,
            SDL_BITMAPORDER_1234 = 2
        }

        // Enum @ SDL_scancode.h:43:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_Scancode : int
        {
            SDL_SCANCODE_UNKNOWN = 0,
            SDL_SCANCODE_A = 4,
            SDL_SCANCODE_B = 5,
            SDL_SCANCODE_C = 6,
            SDL_SCANCODE_D = 7,
            SDL_SCANCODE_E = 8,
            SDL_SCANCODE_F = 9,
            SDL_SCANCODE_G = 10,
            SDL_SCANCODE_H = 11,
            SDL_SCANCODE_I = 12,
            SDL_SCANCODE_J = 13,
            SDL_SCANCODE_K = 14,
            SDL_SCANCODE_L = 15,
            SDL_SCANCODE_M = 16,
            SDL_SCANCODE_N = 17,
            SDL_SCANCODE_O = 18,
            SDL_SCANCODE_P = 19,
            SDL_SCANCODE_Q = 20,
            SDL_SCANCODE_R = 21,
            SDL_SCANCODE_S = 22,
            SDL_SCANCODE_T = 23,
            SDL_SCANCODE_U = 24,
            SDL_SCANCODE_V = 25,
            SDL_SCANCODE_W = 26,
            SDL_SCANCODE_X = 27,
            SDL_SCANCODE_Y = 28,
            SDL_SCANCODE_Z = 29,
            SDL_SCANCODE_1 = 30,
            SDL_SCANCODE_2 = 31,
            SDL_SCANCODE_3 = 32,
            SDL_SCANCODE_4 = 33,
            SDL_SCANCODE_5 = 34,
            SDL_SCANCODE_6 = 35,
            SDL_SCANCODE_7 = 36,
            SDL_SCANCODE_8 = 37,
            SDL_SCANCODE_9 = 38,
            SDL_SCANCODE_0 = 39,
            SDL_SCANCODE_RETURN = 40,
            SDL_SCANCODE_ESCAPE = 41,
            SDL_SCANCODE_BACKSPACE = 42,
            SDL_SCANCODE_TAB = 43,
            SDL_SCANCODE_SPACE = 44,
            SDL_SCANCODE_MINUS = 45,
            SDL_SCANCODE_EQUALS = 46,
            SDL_SCANCODE_LEFTBRACKET = 47,
            SDL_SCANCODE_RIGHTBRACKET = 48,
            SDL_SCANCODE_BACKSLASH = 49,
            SDL_SCANCODE_NONUSHASH = 50,
            SDL_SCANCODE_SEMICOLON = 51,
            SDL_SCANCODE_APOSTROPHE = 52,
            SDL_SCANCODE_GRAVE = 53,
            SDL_SCANCODE_COMMA = 54,
            SDL_SCANCODE_PERIOD = 55,
            SDL_SCANCODE_SLASH = 56,
            SDL_SCANCODE_CAPSLOCK = 57,
            SDL_SCANCODE_F1 = 58,
            SDL_SCANCODE_F2 = 59,
            SDL_SCANCODE_F3 = 60,
            SDL_SCANCODE_F4 = 61,
            SDL_SCANCODE_F5 = 62,
            SDL_SCANCODE_F6 = 63,
            SDL_SCANCODE_F7 = 64,
            SDL_SCANCODE_F8 = 65,
            SDL_SCANCODE_F9 = 66,
            SDL_SCANCODE_F10 = 67,
            SDL_SCANCODE_F11 = 68,
            SDL_SCANCODE_F12 = 69,
            SDL_SCANCODE_PRINTSCREEN = 70,
            SDL_SCANCODE_SCROLLLOCK = 71,
            SDL_SCANCODE_PAUSE = 72,
            SDL_SCANCODE_INSERT = 73,
            SDL_SCANCODE_HOME = 74,
            SDL_SCANCODE_PAGEUP = 75,
            SDL_SCANCODE_DELETE = 76,
            SDL_SCANCODE_END = 77,
            SDL_SCANCODE_PAGEDOWN = 78,
            SDL_SCANCODE_RIGHT = 79,
            SDL_SCANCODE_LEFT = 80,
            SDL_SCANCODE_DOWN = 81,
            SDL_SCANCODE_UP = 82,
            SDL_SCANCODE_NUMLOCKCLEAR = 83,
            SDL_SCANCODE_KP_DIVIDE = 84,
            SDL_SCANCODE_KP_MULTIPLY = 85,
            SDL_SCANCODE_KP_MINUS = 86,
            SDL_SCANCODE_KP_PLUS = 87,
            SDL_SCANCODE_KP_ENTER = 88,
            SDL_SCANCODE_KP_1 = 89,
            SDL_SCANCODE_KP_2 = 90,
            SDL_SCANCODE_KP_3 = 91,
            SDL_SCANCODE_KP_4 = 92,
            SDL_SCANCODE_KP_5 = 93,
            SDL_SCANCODE_KP_6 = 94,
            SDL_SCANCODE_KP_7 = 95,
            SDL_SCANCODE_KP_8 = 96,
            SDL_SCANCODE_KP_9 = 97,
            SDL_SCANCODE_KP_0 = 98,
            SDL_SCANCODE_KP_PERIOD = 99,
            SDL_SCANCODE_NONUSBACKSLASH = 100,
            SDL_SCANCODE_APPLICATION = 101,
            SDL_SCANCODE_POWER = 102,
            SDL_SCANCODE_KP_EQUALS = 103,
            SDL_SCANCODE_F13 = 104,
            SDL_SCANCODE_F14 = 105,
            SDL_SCANCODE_F15 = 106,
            SDL_SCANCODE_F16 = 107,
            SDL_SCANCODE_F17 = 108,
            SDL_SCANCODE_F18 = 109,
            SDL_SCANCODE_F19 = 110,
            SDL_SCANCODE_F20 = 111,
            SDL_SCANCODE_F21 = 112,
            SDL_SCANCODE_F22 = 113,
            SDL_SCANCODE_F23 = 114,
            SDL_SCANCODE_F24 = 115,
            SDL_SCANCODE_EXECUTE = 116,
            SDL_SCANCODE_HELP = 117,
            SDL_SCANCODE_MENU = 118,
            SDL_SCANCODE_SELECT = 119,
            SDL_SCANCODE_STOP = 120,
            SDL_SCANCODE_AGAIN = 121,
            SDL_SCANCODE_UNDO = 122,
            SDL_SCANCODE_CUT = 123,
            SDL_SCANCODE_COPY = 124,
            SDL_SCANCODE_PASTE = 125,
            SDL_SCANCODE_FIND = 126,
            SDL_SCANCODE_MUTE = 127,
            SDL_SCANCODE_VOLUMEUP = 128,
            SDL_SCANCODE_VOLUMEDOWN = 129,
            SDL_SCANCODE_KP_COMMA = 133,
            SDL_SCANCODE_KP_EQUALSAS400 = 134,
            SDL_SCANCODE_INTERNATIONAL1 = 135,
            SDL_SCANCODE_INTERNATIONAL2 = 136,
            SDL_SCANCODE_INTERNATIONAL3 = 137,
            SDL_SCANCODE_INTERNATIONAL4 = 138,
            SDL_SCANCODE_INTERNATIONAL5 = 139,
            SDL_SCANCODE_INTERNATIONAL6 = 140,
            SDL_SCANCODE_INTERNATIONAL7 = 141,
            SDL_SCANCODE_INTERNATIONAL8 = 142,
            SDL_SCANCODE_INTERNATIONAL9 = 143,
            SDL_SCANCODE_LANG1 = 144,
            SDL_SCANCODE_LANG2 = 145,
            SDL_SCANCODE_LANG3 = 146,
            SDL_SCANCODE_LANG4 = 147,
            SDL_SCANCODE_LANG5 = 148,
            SDL_SCANCODE_LANG6 = 149,
            SDL_SCANCODE_LANG7 = 150,
            SDL_SCANCODE_LANG8 = 151,
            SDL_SCANCODE_LANG9 = 152,
            SDL_SCANCODE_ALTERASE = 153,
            SDL_SCANCODE_SYSREQ = 154,
            SDL_SCANCODE_CANCEL = 155,
            SDL_SCANCODE_CLEAR = 156,
            SDL_SCANCODE_PRIOR = 157,
            SDL_SCANCODE_RETURN2 = 158,
            SDL_SCANCODE_SEPARATOR = 159,
            SDL_SCANCODE_OUT = 160,
            SDL_SCANCODE_OPER = 161,
            SDL_SCANCODE_CLEARAGAIN = 162,
            SDL_SCANCODE_CRSEL = 163,
            SDL_SCANCODE_EXSEL = 164,
            SDL_SCANCODE_KP_00 = 176,
            SDL_SCANCODE_KP_000 = 177,
            SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
            SDL_SCANCODE_DECIMALSEPARATOR = 179,
            SDL_SCANCODE_CURRENCYUNIT = 180,
            SDL_SCANCODE_CURRENCYSUBUNIT = 181,
            SDL_SCANCODE_KP_LEFTPAREN = 182,
            SDL_SCANCODE_KP_RIGHTPAREN = 183,
            SDL_SCANCODE_KP_LEFTBRACE = 184,
            SDL_SCANCODE_KP_RIGHTBRACE = 185,
            SDL_SCANCODE_KP_TAB = 186,
            SDL_SCANCODE_KP_BACKSPACE = 187,
            SDL_SCANCODE_KP_A = 188,
            SDL_SCANCODE_KP_B = 189,
            SDL_SCANCODE_KP_C = 190,
            SDL_SCANCODE_KP_D = 191,
            SDL_SCANCODE_KP_E = 192,
            SDL_SCANCODE_KP_F = 193,
            SDL_SCANCODE_KP_XOR = 194,
            SDL_SCANCODE_KP_POWER = 195,
            SDL_SCANCODE_KP_PERCENT = 196,
            SDL_SCANCODE_KP_LESS = 197,
            SDL_SCANCODE_KP_GREATER = 198,
            SDL_SCANCODE_KP_AMPERSAND = 199,
            SDL_SCANCODE_KP_DBLAMPERSAND = 200,
            SDL_SCANCODE_KP_VERTICALBAR = 201,
            SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
            SDL_SCANCODE_KP_COLON = 203,
            SDL_SCANCODE_KP_HASH = 204,
            SDL_SCANCODE_KP_SPACE = 205,
            SDL_SCANCODE_KP_AT = 206,
            SDL_SCANCODE_KP_EXCLAM = 207,
            SDL_SCANCODE_KP_MEMSTORE = 208,
            SDL_SCANCODE_KP_MEMRECALL = 209,
            SDL_SCANCODE_KP_MEMCLEAR = 210,
            SDL_SCANCODE_KP_MEMADD = 211,
            SDL_SCANCODE_KP_MEMSUBTRACT = 212,
            SDL_SCANCODE_KP_MEMMULTIPLY = 213,
            SDL_SCANCODE_KP_MEMDIVIDE = 214,
            SDL_SCANCODE_KP_PLUSMINUS = 215,
            SDL_SCANCODE_KP_CLEAR = 216,
            SDL_SCANCODE_KP_CLEARENTRY = 217,
            SDL_SCANCODE_KP_BINARY = 218,
            SDL_SCANCODE_KP_OCTAL = 219,
            SDL_SCANCODE_KP_DECIMAL = 220,
            SDL_SCANCODE_KP_HEXADECIMAL = 221,
            SDL_SCANCODE_LCTRL = 224,
            SDL_SCANCODE_LSHIFT = 225,
            SDL_SCANCODE_LALT = 226,
            SDL_SCANCODE_LGUI = 227,
            SDL_SCANCODE_RCTRL = 228,
            SDL_SCANCODE_RSHIFT = 229,
            SDL_SCANCODE_RALT = 230,
            SDL_SCANCODE_RGUI = 231,
            SDL_SCANCODE_MODE = 257,
            SDL_SCANCODE_AUDIONEXT = 258,
            SDL_SCANCODE_AUDIOPREV = 259,
            SDL_SCANCODE_AUDIOSTOP = 260,
            SDL_SCANCODE_AUDIOPLAY = 261,
            SDL_SCANCODE_AUDIOMUTE = 262,
            SDL_SCANCODE_MEDIASELECT = 263,
            SDL_SCANCODE_WWW = 264,
            SDL_SCANCODE_MAIL = 265,
            SDL_SCANCODE_CALCULATOR = 266,
            SDL_SCANCODE_COMPUTER = 267,
            SDL_SCANCODE_AC_SEARCH = 268,
            SDL_SCANCODE_AC_HOME = 269,
            SDL_SCANCODE_AC_BACK = 270,
            SDL_SCANCODE_AC_FORWARD = 271,
            SDL_SCANCODE_AC_STOP = 272,
            SDL_SCANCODE_AC_REFRESH = 273,
            SDL_SCANCODE_AC_BOOKMARKS = 274,
            SDL_SCANCODE_BRIGHTNESSDOWN = 275,
            SDL_SCANCODE_BRIGHTNESSUP = 276,
            SDL_SCANCODE_DISPLAYSWITCH = 277,
            SDL_SCANCODE_KBDILLUMTOGGLE = 278,
            SDL_SCANCODE_KBDILLUMDOWN = 279,
            SDL_SCANCODE_KBDILLUMUP = 280,
            SDL_SCANCODE_EJECT = 281,
            SDL_SCANCODE_SLEEP = 282,
            SDL_SCANCODE_APP1 = 283,
            SDL_SCANCODE_APP2 = 284,
            SDL_SCANCODE_AUDIOREWIND = 285,
            SDL_SCANCODE_AUDIOFASTFORWARD = 286,
            SDL_SCANCODE_SOFTLEFT = 287,
            SDL_SCANCODE_SOFTRIGHT = 288,
            SDL_SCANCODE_CALL = 289,
            SDL_SCANCODE_ENDCALL = 290,
            SDL_NUM_SCANCODES = 512
        }

        // Enum @ SDL_messagebox.h:37:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_MessageBoxFlags : int
        {
            SDL_MESSAGEBOX_ERROR = 16,
            SDL_MESSAGEBOX_WARNING = 32,
            SDL_MESSAGEBOX_INFORMATION = 64,
            SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128,
            SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256
        }

        // Enum @ SDL_hints.h:2147:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_HintPriority : int
        {
            SDL_HINT_DEFAULT = 0,
            SDL_HINT_NORMAL = 1,
            SDL_HINT_OVERRIDE = 2
        }

        // Enum @ SDL_blendmode.h:40:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_BlendMode : int
        {
            SDL_BLENDMODE_NONE = 0,
            SDL_BLENDMODE_BLEND = 1,
            SDL_BLENDMODE_ADD = 2,
            SDL_BLENDMODE_MOD = 4,
            SDL_BLENDMODE_MUL = 8,
            SDL_BLENDMODE_INVALID = 2147483647
        }

        // Enum @ SDL_keycode.h:332:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_Keymod : int
        {
            KMOD_NONE = 0,
            KMOD_LSHIFT = 1,
            KMOD_RSHIFT = 2,
            KMOD_LCTRL = 64,
            KMOD_RCTRL = 128,
            KMOD_LALT = 256,
            KMOD_RALT = 512,
            KMOD_LGUI = 1024,
            KMOD_RGUI = 2048,
            KMOD_NUM = 4096,
            KMOD_CAPS = 8192,
            KMOD_MODE = 16384,
            KMOD_SCROLL = 32768,
            KMOD_CTRL = 192,
            KMOD_SHIFT = 3,
            KMOD_ALT = 768,
            KMOD_GUI = 3072,
            KMOD_RESERVED = 32768
        }

        // Enum @ SDL_mouse.h:66:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_MouseWheelDirection : int
        {
            SDL_MOUSEWHEEL_NORMAL = 0,
            SDL_MOUSEWHEEL_FLIPPED = 1
        }

        // Enum @ SDL_pixels.h:51:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_PixelType : int
        {
            SDL_PIXELTYPE_UNKNOWN = 0,
            SDL_PIXELTYPE_INDEX1 = 1,
            SDL_PIXELTYPE_INDEX4 = 2,
            SDL_PIXELTYPE_INDEX8 = 3,
            SDL_PIXELTYPE_PACKED8 = 4,
            SDL_PIXELTYPE_PACKED16 = 5,
            SDL_PIXELTYPE_PACKED32 = 6,
            SDL_PIXELTYPE_ARRAYU8 = 7,
            SDL_PIXELTYPE_ARRAYU16 = 8,
            SDL_PIXELTYPE_ARRAYU32 = 9,
            SDL_PIXELTYPE_ARRAYF16 = 10,
            SDL_PIXELTYPE_ARRAYF32 = 11
        }

        // Enum @ SDL_events.h:702:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_eventaction : int
        {
            SDL_ADDEVENT = 0,
            SDL_PEEKEVENT = 1,
            SDL_GETEVENT = 2
        }

        // Enum @ SDL_video.h:196:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_DisplayOrientation : int
        {
            SDL_ORIENTATION_UNKNOWN = 0,
            SDL_ORIENTATION_LANDSCAPE = 1,
            SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
            SDL_ORIENTATION_PORTRAIT = 3,
            SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
        }

        // Enum @ SDL_video.h:223:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GLattr : int
        {
            SDL_GL_RED_SIZE = 0,
            SDL_GL_GREEN_SIZE = 1,
            SDL_GL_BLUE_SIZE = 2,
            SDL_GL_ALPHA_SIZE = 3,
            SDL_GL_BUFFER_SIZE = 4,
            SDL_GL_DOUBLEBUFFER = 5,
            SDL_GL_DEPTH_SIZE = 6,
            SDL_GL_STENCIL_SIZE = 7,
            SDL_GL_ACCUM_RED_SIZE = 8,
            SDL_GL_ACCUM_GREEN_SIZE = 9,
            SDL_GL_ACCUM_BLUE_SIZE = 10,
            SDL_GL_ACCUM_ALPHA_SIZE = 11,
            SDL_GL_STEREO = 12,
            SDL_GL_MULTISAMPLEBUFFERS = 13,
            SDL_GL_MULTISAMPLESAMPLES = 14,
            SDL_GL_ACCELERATED_VISUAL = 15,
            SDL_GL_RETAINED_BACKING = 16,
            SDL_GL_CONTEXT_MAJOR_VERSION = 17,
            SDL_GL_CONTEXT_MINOR_VERSION = 18,
            SDL_GL_CONTEXT_EGL = 19,
            SDL_GL_CONTEXT_FLAGS = 20,
            SDL_GL_CONTEXT_PROFILE_MASK = 21,
            SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22,
            SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23,
            SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24,
            SDL_GL_CONTEXT_RESET_NOTIFICATION = 25,
            SDL_GL_CONTEXT_NO_ERROR = 26
        }

        // Enum @ SDL_render.h:101:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_ScaleMode : int
        {
            SDL_ScaleModeNearest = 0,
            SDL_ScaleModeLinear = 1,
            SDL_ScaleModeBest = 2
        }

        // Enum @ SDL_video.h:261:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GLcontextFlag : int
        {
            SDL_GL_CONTEXT_DEBUG_FLAG = 1,
            SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2,
            SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4,
            SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8
        }

        // Enum @ SDL_keycode.h:50:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_KeyCode : int
        {
            SDLK_UNKNOWN = 0,
            SDLK_RETURN = 13,
            SDLK_ESCAPE = 27,
            SDLK_BACKSPACE = 8,
            SDLK_TAB = 9,
            SDLK_SPACE = 32,
            SDLK_EXCLAIM = 33,
            SDLK_QUOTEDBL = 34,
            SDLK_HASH = 35,
            SDLK_PERCENT = 37,
            SDLK_DOLLAR = 36,
            SDLK_AMPERSAND = 38,
            SDLK_QUOTE = 39,
            SDLK_LEFTPAREN = 40,
            SDLK_RIGHTPAREN = 41,
            SDLK_ASTERISK = 42,
            SDLK_PLUS = 43,
            SDLK_COMMA = 44,
            SDLK_MINUS = 45,
            SDLK_PERIOD = 46,
            SDLK_SLASH = 47,
            SDLK_0 = 48,
            SDLK_1 = 49,
            SDLK_2 = 50,
            SDLK_3 = 51,
            SDLK_4 = 52,
            SDLK_5 = 53,
            SDLK_6 = 54,
            SDLK_7 = 55,
            SDLK_8 = 56,
            SDLK_9 = 57,
            SDLK_COLON = 58,
            SDLK_SEMICOLON = 59,
            SDLK_LESS = 60,
            SDLK_EQUALS = 61,
            SDLK_GREATER = 62,
            SDLK_QUESTION = 63,
            SDLK_AT = 64,
            SDLK_LEFTBRACKET = 91,
            SDLK_BACKSLASH = 92,
            SDLK_RIGHTBRACKET = 93,
            SDLK_CARET = 94,
            SDLK_UNDERSCORE = 95,
            SDLK_BACKQUOTE = 96,
            SDLK_a = 97,
            SDLK_b = 98,
            SDLK_c = 99,
            SDLK_d = 100,
            SDLK_e = 101,
            SDLK_f = 102,
            SDLK_g = 103,
            SDLK_h = 104,
            SDLK_i = 105,
            SDLK_j = 106,
            SDLK_k = 107,
            SDLK_l = 108,
            SDLK_m = 109,
            SDLK_n = 110,
            SDLK_o = 111,
            SDLK_p = 112,
            SDLK_q = 113,
            SDLK_r = 114,
            SDLK_s = 115,
            SDLK_t = 116,
            SDLK_u = 117,
            SDLK_v = 118,
            SDLK_w = 119,
            SDLK_x = 120,
            SDLK_y = 121,
            SDLK_z = 122,
            SDLK_CAPSLOCK = 1073741881,
            SDLK_F1 = 1073741882,
            SDLK_F2 = 1073741883,
            SDLK_F3 = 1073741884,
            SDLK_F4 = 1073741885,
            SDLK_F5 = 1073741886,
            SDLK_F6 = 1073741887,
            SDLK_F7 = 1073741888,
            SDLK_F8 = 1073741889,
            SDLK_F9 = 1073741890,
            SDLK_F10 = 1073741891,
            SDLK_F11 = 1073741892,
            SDLK_F12 = 1073741893,
            SDLK_PRINTSCREEN = 1073741894,
            SDLK_SCROLLLOCK = 1073741895,
            SDLK_PAUSE = 1073741896,
            SDLK_INSERT = 1073741897,
            SDLK_HOME = 1073741898,
            SDLK_PAGEUP = 1073741899,
            SDLK_DELETE = 127,
            SDLK_END = 1073741901,
            SDLK_PAGEDOWN = 1073741902,
            SDLK_RIGHT = 1073741903,
            SDLK_LEFT = 1073741904,
            SDLK_DOWN = 1073741905,
            SDLK_UP = 1073741906,
            SDLK_NUMLOCKCLEAR = 1073741907,
            SDLK_KP_DIVIDE = 1073741908,
            SDLK_KP_MULTIPLY = 1073741909,
            SDLK_KP_MINUS = 1073741910,
            SDLK_KP_PLUS = 1073741911,
            SDLK_KP_ENTER = 1073741912,
            SDLK_KP_1 = 1073741913,
            SDLK_KP_2 = 1073741914,
            SDLK_KP_3 = 1073741915,
            SDLK_KP_4 = 1073741916,
            SDLK_KP_5 = 1073741917,
            SDLK_KP_6 = 1073741918,
            SDLK_KP_7 = 1073741919,
            SDLK_KP_8 = 1073741920,
            SDLK_KP_9 = 1073741921,
            SDLK_KP_0 = 1073741922,
            SDLK_KP_PERIOD = 1073741923,
            SDLK_APPLICATION = 1073741925,
            SDLK_POWER = 1073741926,
            SDLK_KP_EQUALS = 1073741927,
            SDLK_F13 = 1073741928,
            SDLK_F14 = 1073741929,
            SDLK_F15 = 1073741930,
            SDLK_F16 = 1073741931,
            SDLK_F17 = 1073741932,
            SDLK_F18 = 1073741933,
            SDLK_F19 = 1073741934,
            SDLK_F20 = 1073741935,
            SDLK_F21 = 1073741936,
            SDLK_F22 = 1073741937,
            SDLK_F23 = 1073741938,
            SDLK_F24 = 1073741939,
            SDLK_EXECUTE = 1073741940,
            SDLK_HELP = 1073741941,
            SDLK_MENU = 1073741942,
            SDLK_SELECT = 1073741943,
            SDLK_STOP = 1073741944,
            SDLK_AGAIN = 1073741945,
            SDLK_UNDO = 1073741946,
            SDLK_CUT = 1073741947,
            SDLK_COPY = 1073741948,
            SDLK_PASTE = 1073741949,
            SDLK_FIND = 1073741950,
            SDLK_MUTE = 1073741951,
            SDLK_VOLUMEUP = 1073741952,
            SDLK_VOLUMEDOWN = 1073741953,
            SDLK_KP_COMMA = 1073741957,
            SDLK_KP_EQUALSAS400 = 1073741958,
            SDLK_ALTERASE = 1073741977,
            SDLK_SYSREQ = 1073741978,
            SDLK_CANCEL = 1073741979,
            SDLK_CLEAR = 1073741980,
            SDLK_PRIOR = 1073741981,
            SDLK_RETURN2 = 1073741982,
            SDLK_SEPARATOR = 1073741983,
            SDLK_OUT = 1073741984,
            SDLK_OPER = 1073741985,
            SDLK_CLEARAGAIN = 1073741986,
            SDLK_CRSEL = 1073741987,
            SDLK_EXSEL = 1073741988,
            SDLK_KP_00 = 1073742000,
            SDLK_KP_000 = 1073742001,
            SDLK_THOUSANDSSEPARATOR = 1073742002,
            SDLK_DECIMALSEPARATOR = 1073742003,
            SDLK_CURRENCYUNIT = 1073742004,
            SDLK_CURRENCYSUBUNIT = 1073742005,
            SDLK_KP_LEFTPAREN = 1073742006,
            SDLK_KP_RIGHTPAREN = 1073742007,
            SDLK_KP_LEFTBRACE = 1073742008,
            SDLK_KP_RIGHTBRACE = 1073742009,
            SDLK_KP_TAB = 1073742010,
            SDLK_KP_BACKSPACE = 1073742011,
            SDLK_KP_A = 1073742012,
            SDLK_KP_B = 1073742013,
            SDLK_KP_C = 1073742014,
            SDLK_KP_D = 1073742015,
            SDLK_KP_E = 1073742016,
            SDLK_KP_F = 1073742017,
            SDLK_KP_XOR = 1073742018,
            SDLK_KP_POWER = 1073742019,
            SDLK_KP_PERCENT = 1073742020,
            SDLK_KP_LESS = 1073742021,
            SDLK_KP_GREATER = 1073742022,
            SDLK_KP_AMPERSAND = 1073742023,
            SDLK_KP_DBLAMPERSAND = 1073742024,
            SDLK_KP_VERTICALBAR = 1073742025,
            SDLK_KP_DBLVERTICALBAR = 1073742026,
            SDLK_KP_COLON = 1073742027,
            SDLK_KP_HASH = 1073742028,
            SDLK_KP_SPACE = 1073742029,
            SDLK_KP_AT = 1073742030,
            SDLK_KP_EXCLAM = 1073742031,
            SDLK_KP_MEMSTORE = 1073742032,
            SDLK_KP_MEMRECALL = 1073742033,
            SDLK_KP_MEMCLEAR = 1073742034,
            SDLK_KP_MEMADD = 1073742035,
            SDLK_KP_MEMSUBTRACT = 1073742036,
            SDLK_KP_MEMMULTIPLY = 1073742037,
            SDLK_KP_MEMDIVIDE = 1073742038,
            SDLK_KP_PLUSMINUS = 1073742039,
            SDLK_KP_CLEAR = 1073742040,
            SDLK_KP_CLEARENTRY = 1073742041,
            SDLK_KP_BINARY = 1073742042,
            SDLK_KP_OCTAL = 1073742043,
            SDLK_KP_DECIMAL = 1073742044,
            SDLK_KP_HEXADECIMAL = 1073742045,
            SDLK_LCTRL = 1073742048,
            SDLK_LSHIFT = 1073742049,
            SDLK_LALT = 1073742050,
            SDLK_LGUI = 1073742051,
            SDLK_RCTRL = 1073742052,
            SDLK_RSHIFT = 1073742053,
            SDLK_RALT = 1073742054,
            SDLK_RGUI = 1073742055,
            SDLK_MODE = 1073742081,
            SDLK_AUDIONEXT = 1073742082,
            SDLK_AUDIOPREV = 1073742083,
            SDLK_AUDIOSTOP = 1073742084,
            SDLK_AUDIOPLAY = 1073742085,
            SDLK_AUDIOMUTE = 1073742086,
            SDLK_MEDIASELECT = 1073742087,
            SDLK_WWW = 1073742088,
            SDLK_MAIL = 1073742089,
            SDLK_CALCULATOR = 1073742090,
            SDLK_COMPUTER = 1073742091,
            SDLK_AC_SEARCH = 1073742092,
            SDLK_AC_HOME = 1073742093,
            SDLK_AC_BACK = 1073742094,
            SDLK_AC_FORWARD = 1073742095,
            SDLK_AC_STOP = 1073742096,
            SDLK_AC_REFRESH = 1073742097,
            SDLK_AC_BOOKMARKS = 1073742098,
            SDLK_BRIGHTNESSDOWN = 1073742099,
            SDLK_BRIGHTNESSUP = 1073742100,
            SDLK_DISPLAYSWITCH = 1073742101,
            SDLK_KBDILLUMTOGGLE = 1073742102,
            SDLK_KBDILLUMDOWN = 1073742103,
            SDLK_KBDILLUMUP = 1073742104,
            SDLK_EJECT = 1073742105,
            SDLK_SLEEP = 1073742106,
            SDLK_APP1 = 1073742107,
            SDLK_APP2 = 1073742108,
            SDLK_AUDIOREWIND = 1073742109,
            SDLK_AUDIOFASTFORWARD = 1073742110,
            SDLK_SOFTLEFT = 1073742111,
            SDLK_SOFTRIGHT = 1073742112,
            SDLK_CALL = 1073742113,
            SDLK_ENDCALL = 1073742114
        }

        // Enum @ SDL_gamecontroller.h:704:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GameControllerButton : int
        {
            SDL_CONTROLLER_BUTTON_INVALID = -1,
            SDL_CONTROLLER_BUTTON_A = 0,
            SDL_CONTROLLER_BUTTON_B = 1,
            SDL_CONTROLLER_BUTTON_X = 2,
            SDL_CONTROLLER_BUTTON_Y = 3,
            SDL_CONTROLLER_BUTTON_BACK = 4,
            SDL_CONTROLLER_BUTTON_GUIDE = 5,
            SDL_CONTROLLER_BUTTON_START = 6,
            SDL_CONTROLLER_BUTTON_LEFTSTICK = 7,
            SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8,
            SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9,
            SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10,
            SDL_CONTROLLER_BUTTON_DPAD_UP = 11,
            SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12,
            SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13,
            SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14,
            SDL_CONTROLLER_BUTTON_MISC1 = 15,
            SDL_CONTROLLER_BUTTON_PADDLE1 = 16,
            SDL_CONTROLLER_BUTTON_PADDLE2 = 17,
            SDL_CONTROLLER_BUTTON_PADDLE3 = 18,
            SDL_CONTROLLER_BUTTON_PADDLE4 = 19,
            SDL_CONTROLLER_BUTTON_TOUCHPAD = 20,
            SDL_CONTROLLER_BUTTON_MAX = 21
        }

        // Enum @ SDL_video.h:254:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GLprofile : int
        {
            SDL_GL_CONTEXT_PROFILE_CORE = 1,
            SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2,
            SDL_GL_CONTEXT_PROFILE_ES = 4
        }

        // Enum @ SDL_assert.h:108:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_AssertState : int
        {
            SDL_ASSERTION_RETRY = 0,
            SDL_ASSERTION_BREAK = 1,
            SDL_ASSERTION_ABORT = 2,
            SDL_ASSERTION_IGNORE = 3,
            SDL_ASSERTION_ALWAYS_IGNORE = 4
        }

        // Enum @ SDL_sensor.h:69:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_SensorType : int
        {
            SDL_SENSOR_INVALID = -1,
            SDL_SENSOR_UNKNOWN = 0,
            SDL_SENSOR_ACCEL = 1,
            SDL_SENSOR_GYRO = 2
        }

        // Enum @ SDL_pixels.h:76:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_PackedOrder : int
        {
            SDL_PACKEDORDER_NONE = 0,
            SDL_PACKEDORDER_XRGB = 1,
            SDL_PACKEDORDER_RGBX = 2,
            SDL_PACKEDORDER_ARGB = 3,
            SDL_PACKEDORDER_RGBA = 4,
            SDL_PACKEDORDER_XBGR = 5,
            SDL_PACKEDORDER_BGRX = 6,
            SDL_PACKEDORDER_ABGR = 7,
            SDL_PACKEDORDER_BGRA = 8
        }

        // Enum @ SDL_video.h:269:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GLcontextReleaseFlag : int
        {
            SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0,
            SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1
        }

        // Enum @ SDL_pixels.h:171:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_PixelFormatEnum : int
        {
            SDL_PIXELFORMAT_UNKNOWN = 0,
            SDL_PIXELFORMAT_INDEX1LSB = 286261504,
            SDL_PIXELFORMAT_INDEX1MSB = 287310080,
            SDL_PIXELFORMAT_INDEX4LSB = 303039488,
            SDL_PIXELFORMAT_INDEX4MSB = 304088064,
            SDL_PIXELFORMAT_INDEX8 = 318769153,
            SDL_PIXELFORMAT_RGB332 = 336660481,
            SDL_PIXELFORMAT_XRGB4444 = 353504258,
            SDL_PIXELFORMAT_RGB444 = 353504258,
            SDL_PIXELFORMAT_XBGR4444 = 357698562,
            SDL_PIXELFORMAT_BGR444 = 357698562,
            SDL_PIXELFORMAT_XRGB1555 = 353570562,
            SDL_PIXELFORMAT_RGB555 = 353570562,
            SDL_PIXELFORMAT_XBGR1555 = 357764866,
            SDL_PIXELFORMAT_BGR555 = 357764866,
            SDL_PIXELFORMAT_ARGB4444 = 355602434,
            SDL_PIXELFORMAT_RGBA4444 = 356651010,
            SDL_PIXELFORMAT_ABGR4444 = 359796738,
            SDL_PIXELFORMAT_BGRA4444 = 360845314,
            SDL_PIXELFORMAT_ARGB1555 = 355667970,
            SDL_PIXELFORMAT_RGBA5551 = 356782082,
            SDL_PIXELFORMAT_ABGR1555 = 359862274,
            SDL_PIXELFORMAT_BGRA5551 = 360976386,
            SDL_PIXELFORMAT_RGB565 = 353701890,
            SDL_PIXELFORMAT_BGR565 = 357896194,
            SDL_PIXELFORMAT_RGB24 = 386930691,
            SDL_PIXELFORMAT_BGR24 = 390076419,
            SDL_PIXELFORMAT_XRGB8888 = 370546692,
            SDL_PIXELFORMAT_RGB888 = 370546692,
            SDL_PIXELFORMAT_RGBX8888 = 371595268,
            SDL_PIXELFORMAT_XBGR8888 = 374740996,
            SDL_PIXELFORMAT_BGR888 = 374740996,
            SDL_PIXELFORMAT_BGRX8888 = 375789572,
            SDL_PIXELFORMAT_ARGB8888 = 372645892,
            SDL_PIXELFORMAT_RGBA8888 = 373694468,
            SDL_PIXELFORMAT_ABGR8888 = 376840196,
            SDL_PIXELFORMAT_BGRA8888 = 377888772,
            SDL_PIXELFORMAT_ARGB2101010 = 372711428,
            SDL_PIXELFORMAT_RGBA32 = 376840196,
            SDL_PIXELFORMAT_ARGB32 = 377888772,
            SDL_PIXELFORMAT_BGRA32 = 372645892,
            SDL_PIXELFORMAT_ABGR32 = 373694468,
            SDL_PIXELFORMAT_YV12 = 842094169,
            SDL_PIXELFORMAT_IYUV = 1448433993,
            SDL_PIXELFORMAT_YUY2 = 844715353,
            SDL_PIXELFORMAT_UYVY = 1498831189,
            SDL_PIXELFORMAT_YVYU = 1431918169,
            SDL_PIXELFORMAT_NV12 = 842094158,
            SDL_PIXELFORMAT_NV21 = 825382478,
            SDL_PIXELFORMAT_EXTERNAL_OES = 542328143
        }

        // Enum @ SDL_video.h:275:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GLContextResetNotification : int
        {
            SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0,
            SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1
        }

        // Enum @ SDL_audio.h:684:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_AudioStatus : int
        {
            SDL_AUDIO_STOPPED = 0,
            SDL_AUDIO_PLAYING = 1,
            SDL_AUDIO_PAUSED = 2
        }

        // Enum @ SDL_gamecontroller.h:599:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_GameControllerAxis : int
        {
            SDL_CONTROLLER_AXIS_INVALID = -1,
            SDL_CONTROLLER_AXIS_LEFTX = 0,
            SDL_CONTROLLER_AXIS_LEFTY = 1,
            SDL_CONTROLLER_AXIS_RIGHTX = 2,
            SDL_CONTROLLER_AXIS_RIGHTY = 3,
            SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4,
            SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5,
            SDL_CONTROLLER_AXIS_MAX = 6
        }

        // Enum @ SDL_error.h:142:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_errorcode : int
        {
            SDL_ENOMEM = 0,
            SDL_EFREAD = 1,
            SDL_EFWRITE = 2,
            SDL_EFSEEK = 3,
            SDL_UNSUPPORTED = 4,
            SDL_LASTERROR = 5
        }

        // Enum @ SDL_messagebox.h:49:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_MessageBoxButtonFlags : int
        {
            SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1,
            SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2
        }

        // Enum @ SDL_mouse.h:46:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_SystemCursor : int
        {
            SDL_SYSTEM_CURSOR_ARROW = 0,
            SDL_SYSTEM_CURSOR_IBEAM = 1,
            SDL_SYSTEM_CURSOR_WAIT = 2,
            SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
            SDL_SYSTEM_CURSOR_WAITARROW = 4,
            SDL_SYSTEM_CURSOR_SIZENWSE = 5,
            SDL_SYSTEM_CURSOR_SIZENESW = 6,
            SDL_SYSTEM_CURSOR_SIZEWE = 7,
            SDL_SYSTEM_CURSOR_SIZENS = 8,
            SDL_SYSTEM_CURSOR_SIZEALL = 9,
            SDL_SYSTEM_CURSOR_NO = 10,
            SDL_SYSTEM_CURSOR_HAND = 11,
            SDL_NUM_SYSTEM_CURSORS = 12
        }

        // Enum @ SDL_shape.h:85:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum WindowShapeMode : int
        {
            ShapeModeDefault = 0,
            ShapeModeBinarizeAlpha = 1,
            ShapeModeReverseBinarizeAlpha = 2,
            ShapeModeColorKey = 3
        }

        // Enum @ SDL_surface.h:108:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_YUV_CONVERSION_MODE : int
        {
            SDL_YUV_CONVERSION_JPEG = 0,
            SDL_YUV_CONVERSION_BT601 = 1,
            SDL_YUV_CONVERSION_BT709 = 2,
            SDL_YUV_CONVERSION_AUTOMATIC = 3
        }

        // Enum @ SDL_power.h:42:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_PowerState : int
        {
            SDL_POWERSTATE_UNKNOWN = 0,
            SDL_POWERSTATE_ON_BATTERY = 1,
            SDL_POWERSTATE_NO_BATTERY = 2,
            SDL_POWERSTATE_CHARGING = 3,
            SDL_POWERSTATE_CHARGED = 4
        }

        // Enum @ SDL_blendmode.h:65:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_BlendOperation : int
        {
            SDL_BLENDOPERATION_ADD = 1,
            SDL_BLENDOPERATION_SUBTRACT = 2,
            SDL_BLENDOPERATION_REV_SUBTRACT = 3,
            SDL_BLENDOPERATION_MINIMUM = 4,
            SDL_BLENDOPERATION_MAXIMUM = 5
        }

        // Enum @ SDL_render.h:121:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_TextureModulate : int
        {
            SDL_TEXTUREMODULATE_NONE = 0,
            SDL_TEXTUREMODULATE_COLOR = 1,
            SDL_TEXTUREMODULATE_ALPHA = 2
        }

        // Enum @ SDL_render.h:111:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_TextureAccess : int
        {
            SDL_TEXTUREACCESS_STATIC = 0,
            SDL_TEXTUREACCESS_STREAMING = 1,
            SDL_TEXTUREACCESS_TARGET = 2
        }

        // Enum @ SDL_messagebox.h:73:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_MessageBoxColorType : int
        {
            SDL_MESSAGEBOX_COLOR_BACKGROUND = 0,
            SDL_MESSAGEBOX_COLOR_TEXT = 1,
            SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
            SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
            SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4,
            SDL_MESSAGEBOX_COLOR_MAX = 5
        }

        // Enum @ SDL_video.h:1620:9
        //	aarch64-apple-darwin
        //	x86_64-pc-windows-msvc
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        //	aarch64-pc-windows-msvc
        public enum SDL_HitTestResult : int
        {
            SDL_HITTEST_NORMAL = 0,
            SDL_HITTEST_DRAGGABLE = 1,
            SDL_HITTEST_RESIZE_TOPLEFT = 2,
            SDL_HITTEST_RESIZE_TOP = 3,
            SDL_HITTEST_RESIZE_TOPRIGHT = 4,
            SDL_HITTEST_RESIZE_RIGHT = 5,
            SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
            SDL_HITTEST_RESIZE_BOTTOM = 7,
            SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
            SDL_HITTEST_RESIZE_LEFT = 9
        }

        // MacroObject @ SDL_haptic.h:222:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_RAMP = 64;

        // MacroObject @ SDL_config_macosx.h:126:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SCALBN = 1;

        // MacroObject @ SDL_hints.h:1131:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION = "SDL_QTWAYLAND_CONTENT_ORIENTATION";

        // MacroObject @ SDL_config_macosx.h:66:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_BSEARCH = 1;

        // MacroObject @ SDL_config_macosx.h:114:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FMOD = 1;

        // MacroObject @ SDL_hints.h:581:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_IME_SHOW_UI = "SDL_IME_SHOW_UI";

        // MacroObject @ SDL_joystick.h:827:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_LEFT = 8;

        // MacroObject @ SDL_config_macosx.h:171:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_SENSOR_DUMMY = 1;

        // MacroObject @ SDL_audio.h:144:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_ALLOW_CHANNELS_CHANGE = 4;

        // MacroObject @ SDL_audio.h:74:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_MASK_DATATYPE = 256;

        // MacroObject @ SDL_hints.h:913:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_LINUX_JOYSTICK_CLASSIC = "SDL_LINUX_JOYSTICK_CLASSIC";

        // MacroObject @ SDL_hints.h:1142:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_QTWAYLAND_WINDOW_FLAGS = "SDL_QTWAYLAND_WINDOW_FLAGS";

        // MacroObject @ SDL_config_macosx.h:140:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SYSCTLBYNAME = 1;

        // MacroObject @ SDL_config_macosx.h:67:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ABS = 1;

        // MacroObject @ SDL_config_minimal.h:72:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_SENSOR_DISABLED = 1;

        // MacroObject @ SDL_hints.h:1450:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY = "SDL_VIDEO_EGL_ALLOW_TRANSPARENCY";

        // MacroObject @ SDL_hints.h:1007:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = "SDL_MOUSE_RELATIVE_SPEED_SCALE";

        // MacroObject @ SDL_hints.h:58:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ACCELEROMETER_AS_JOYSTICK = "SDL_ACCELEROMETER_AS_JOYSTICK";

        // MacroObject @ SDL.h:86:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_GAMECONTROLLER = 8192;

        // MacroObject @ SDL_config_macosx.h:74:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRLCPY = 1;

        // MacroObject @ SDL_hints.h:1042:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_NO_SIGNAL_HANDLERS = "SDL_NO_SIGNAL_HANDLERS";

        // MacroObject @ SDL_hints.h:1376:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION";

        // MacroObject @ SDL_config_macosx.h:110:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FABS = 1;

        // MacroObject @ SDL_audio.h:93:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_U16LSB = 16;

        // MacroObject @ SDL_config_macosx.h:194:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_X11_XSCRNSAVER = 1;

        // MacroObject @ SDL_mouse.h:438:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_BUTTON_X1 = 4;

        // MacroObject @ SDL_config_macosx.h:81:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRTOUL = 1;

        // MacroObject @ SDL_hints.h:1576:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN = "SDL_VIDEO_FOREIGN_WINDOW_VULKAN";

        // MacroObject @ SDL_config_macosx.h:61:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_GETENV = 1;

        // MacroObject @ SDL_surface.h:56:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_SIMD_ALIGNED = 8;

        // MacroObject @ SDL_pixels.h:46:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_ALPHA_OPAQUE = 255;

        // MacroObject @ SDL_hints.h:812:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX = "SDL_JOYSTICK_HIDAPI_XBOX";

        // MacroObject @ SDL_config_macosx.h:80:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRTOL = 1;

        // MacroObject @ SDL_hints.h:1290:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RPI_VIDEO_LAYER = "SDL_RPI_VIDEO_LAYER";

        // MacroObject @ SDL_hints.h:1664:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_X11_XVIDMODE = "SDL_VIDEO_X11_XVIDMODE";

        // MacroObject @ SDL_hints.h:1470:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_HIGHDPI_DISABLED = "SDL_VIDEO_HIGHDPI_DISABLED";

        // MacroObject @ SDL_surface.h:53:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_PREALLOC = 1;

        // MacroObject @ SDL_config_macosx.h:192:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_X11_XDBE = 1;

        // MacroObject @ SDL_hints.h:1084:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ORIENTATIONS = "SDL_IOS_ORIENTATIONS";

        // MacroObject @ SDL_hints.h:444:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION";

        // MacroObject @ SDL_config_macosx.h:187:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public static string SDL_VIDEO_DRIVER_X11_DYNAMIC = "/opt/X11/lib/libX11.6.dylib";

        // MacroObject @ SDL_hints.h:1409:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_TV_REMOTE_AS_JOYSTICK = "SDL_TV_REMOTE_AS_JOYSTICK";

        // MacroObject @ SDL_hints.h:1791:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = "SDL_WINDOWS_INTRESOURCE_ICON_SMALL";

        // MacroObject @ SDL_config_macosx.h:58:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_REALLOC = 1;

        // MacroObject @ SDL_config_macosx.h:115:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FMODF = 1;

        // MacroObject @ SDL_config_macosx.h:111:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FABSF = 1;

        // MacroObject @ SDL_pixels.h:47:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_ALPHA_TRANSPARENT = 0;

        // MacroObject @ SDL_config_macosx.h:130:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SQRT = 1;

        // MacroObject @ SDL_haptic.h:337:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAPTIC_SPHERICAL = 2;

        // MacroObject @ SDL_hints.h:381:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT";

        // MacroObject @ SDL_hints.h:893:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_LINUX_DIGITAL_HATS = "SDL_LINUX_DIGITAL_HATS";

        // MacroObject @ SDL_hints.h:1871:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_DPI_SCALING = "SDL_WINDOWS_DPI_SCALING";

        // MacroObject @ SDL_config_macosx.h:162:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_JOYSTICK_VIRTUAL = 1;

        // MacroObject @ SDL_hints.h:1346:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_THREAD_PRIORITY_POLICY = "SDL_THREAD_PRIORITY_POLICY";

        // MacroObject @ SDL_hints.h:1565:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL = "SDL_VIDEO_FOREIGN_WINDOW_OPENGL";

        // MacroObject @ SDL_config_macosx.h:84:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRTOD = 1;

        // MacroObject @ SDL_keycode.h:47:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDLK_SCANCODE_MASK = 1073741824;

        // MacroObject @ SDL_hints.h:675:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_LUNA = "SDL_JOYSTICK_HIDAPI_LUNA";

        // MacroObject @ SDL_rwops.h:370:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int RW_SEEK_CUR = 1;

        // MacroObject @ SDL_mutex.h:44:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_MUTEX_TIMEDOUT = 1;

        // MacroObject @ SDL_config_macosx.h:163:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_HAPTIC_IOKIT = 1;

        // MacroObject @ SDL_hints.h:1179:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_LINE_METHOD = "SDL_RENDER_LINE_METHOD";

        // MacroObject @ SDL_hints.h:94:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION = "SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION";

        // MacroObject @ SDL_surface.h:52:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_SWSURFACE = 0;

        // MacroObject @ SDL_hints.h:638:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = "SDL_JOYSTICK_HIDAPI_GAMECUBE";

        // MacroObject @ SDL_config_macosx.h:239:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_OPENGL_EGL = 1;

        // MacroObject @ SDL_config_macosx.h:44:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int HAVE_INTTYPES_H = 1;

        // MacroObject @ SDL_config_macosx.h:125:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ROUNDF = 1;

        // MacroObject @ SDL_config_macosx.h:85:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ATOI = 1;

        // MacroObject @ SDL_mutex.h:49:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static uint SDL_MUTEX_MAXWAIT = 4294967295;

        // MacroObject @ SDL_surface.h:54:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_RLEACCEL = 2;

        // MacroObject @ SDL_config_macosx.h:204:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_X11_XINPUT2 = 1;

        // MacroObject @ SDL_rwops.h:46:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_RWOPS_MEMORY = 4;

        // MacroObject @ SDL_config_macosx.h:82:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRTOLL = 1;

        // MacroObject @ SDL_hints.h:767:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_STADIA = "SDL_JOYSTICK_HIDAPI_STADIA";

        // MacroObject @ SDL_config_macosx.h:102:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_CEIL = 1;

        // MacroObject @ SDL_hints.h:1592:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER";

        // MacroObject @ SDL_rwops.h:369:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int RW_SEEK_SET = 0;

        // MacroObject @ SDL_hints.h:1166:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_BATCHING = "SDL_RENDER_BATCHING";

        // MacroObject @ SDL_hints.h:1203:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE";

        // MacroObject @ SDL_hints.h:414:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_EVENT_LOGGING = "SDL_EVENT_LOGGING";

        // MacroObject @ SDL_rwops.h:43:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_RWOPS_WINFILE = 1;

        // MacroObject @ SDL_hints.h:1495:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";

        // MacroObject @ SDL_hints.h:1800:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4";

        // MacroObject @ SDL_joystick.h:775:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_JOYSTICK_AXIS_MIN = -32768;

        // MacroObject @ SDL_hints.h:1554:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT";

        // MacroObject @ SDL_config_macosx.h:218:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_PLATFORM_SUPPORTS_METAL = 1;

        // MacroObject @ SDL_config_minimal.h:69:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HIDAPI_DISABLED = 1;

        // MacroObject @ SDL_audio.h:75:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_MASK_ENDIAN = 4096;

        // MacroObject @ SDL_config_minimal.h:66:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAPTIC_DISABLED = 1;

        // MacroObject @ SDL_hints.h:2141:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUDIODRIVER = "SDL_AUDIODRIVER";

        // MacroObject @ SDL_hints.h:1100:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_POLL_SENTINEL = "SDL_POLL_SENTINEL";

        // MacroObject @ SDL_config_macosx.h:139:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SYSCONF = 1;

        // MacroObject @ SDL_hints.h:228:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUDIO_DEVICE_APP_NAME = "SDL_AUDIO_DEVICE_APP_NAME";

        // MacroObject @ SDL_hints.h:496:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = "SDL_GAMECONTROLLER_IGNORE_DEVICES";

        // MacroObject @ SDL_hints.h:207:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUDIO_CATEGORY = "SDL_AUDIO_CATEGORY";

        // MacroObject @ SDL_joystick.h:774:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_JOYSTICK_AXIS_MAX = 32767;

        // MacroObject @ SDL_joystick.h:826:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_DOWN = 4;

        // MacroObject @ SDL_hints.h:1487:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_VIDEO_MAC_FULLSCREEN_SPACES";

        // MacroObject @ SDL_config_macosx.h:93:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_M_PI = 1;

        // MacroObject @ SDL_config_macosx.h:99:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ATANF = 1;

        // MacroObject @ SDL_events.h:1106:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_QUERY = -1;

        // MacroObject @ SDL_config_macosx.h:189:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public static string SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 = "/opt/X11/lib/libXi.6.dylib";

        // MacroObject @ SDL_config_macosx.h:60:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ALLOCA = 1;

        // MacroObject @ SDL_audio.h:92:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_S8 = 32776;

        // MacroObject @ SDL_hints.h:1728:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WAVE_TRUNCATION = "SDL_WAVE_TRUNCATION";

        // MacroObject @ SDL_config_macosx.h:90:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRNCASECMP = 1;

        // MacroObject @ SDL_haptic.h:310:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_PAUSE = 32768;

        // MacroObject @ SDL_hints.h:72:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = "SDL_ALLOW_ALT_TAB_WHILE_GRABBED";

        // MacroObject @ SDL_hints.h:543:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_GRAB_KEYBOARD = "SDL_GRAB_KEYBOARD";

        // MacroObject @ SDL_haptic.h:345:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAPTIC_STEERING_AXIS = 3;

        // MacroObject @ SDL_config_macosx.h:63:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_PUTENV = 1;

        // MacroObject @ SDL_hints.h:194:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION";

        // MacroObject @ SDL_haptic.h:213:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_SAWTOOTHDOWN = 32;

        // MacroObject @ SDL_hints.h:1420:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER";

        // MacroObject @ SDL_hints.h:1945:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINRT_HANDLE_BACK_BUTTON = "SDL_WINRT_HANDLE_BACK_BUTTON";

        // MacroObject @ SDL_stdinc.h:251:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const float SDL_FLT_EPSILON = 1.1920928955078125E-07f;

        // MacroObject @ SDL_hints.h:1655:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR";

        // MacroObject @ SDL_haptic.h:282:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_GAIN = 4096;

        // MacroObject @ SDL_hints.h:1399:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE";

        // MacroObject @ SDL_joystick.h:830:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_LEFTUP = 9;

        // MacroObject @ SDL_events.h:50:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_PRESSED = 1;

        // MacroObject @ SDL_config_macosx.h:71:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_MEMMOVE = 1;

        // MacroObject @ SDL_hints.h:2031:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING";

        // MacroObject @ SDL_hints.h:560:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_IDLE_TIMER_DISABLED = "SDL_IOS_IDLE_TIMER_DISABLED";

        // MacroObject @ SDL_config_macosx.h:92:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_VSNPRINTF = 1;

        // MacroObject @ SDL_config_macosx.h:108:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_EXP = 1;

        // MacroObject @ SDL_joystick.h:112:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const double SDL_IPHONE_MAX_GFORCE = 5;

        // MacroObject @ SDL_hints.h:184:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = "SDL_APPLE_TV_CONTROLLER_UI_EVENTS";

        // MacroObject @ SDL_config_minimal.h:35:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int HAVE_STDDEF_H = 1;

        // MacroObject @ SDL_hints.h:464:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_GAMECONTROLLERCONFIG_FILE = "SDL_GAMECONTROLLERCONFIG_FILE";

        // MacroObject @ SDL_audio.h:146:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_ALLOW_ANY_CHANGE = 15;

        // MacroObject @ SDL_config_macosx.h:106:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_COS = 1;

        // MacroObject @ SDL_config_macosx.h:49:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STDIO_H = 1;

        // MacroObject @ SDL_hints.h:697:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_PS4 = "SDL_JOYSTICK_HIDAPI_PS4";

        // MacroObject @ SDL_touch.h:64:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static long SDL_MOUSE_TOUCHID = -1;

        // MacroObject @ SDL_config_macosx.h:129:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SINF = 1;

        // MacroObject @ SDL_version.h:61:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_MINOR_VERSION = 23;

        // MacroObject @ SDL_config_macosx.h:79:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRTOK_R = 1;

        // MacroObject @ SDL_config_macosx.h:88:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRNCMP = 1;

        // MacroObject @ SDL_hints.h:427:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_FORCE_RAISEWINDOW = "SDL_HINT_FORCE_RAISEWINDOW";

        // MacroObject @ SDL_hints.h:1387:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_TOUCH_MOUSE_EVENTS = "SDL_TOUCH_MOUSE_EVENTS";

        // MacroObject @ SDL_hints.h:319:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUTO_UPDATE_SENSORS = "SDL_AUTO_UPDATE_SENSORS";

        // MacroObject @ SDL_hints.h:653:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE = "SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE";

        // MacroObject @ SDL_config_macosx.h:55:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_DLOPEN = 1;

        // MacroObject @ SDL_config_macosx.h:113:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FLOORF = 1;

        // MacroObject @ SDL_events.h:234:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_TEXTEDITINGEVENT_TEXT_SIZE = 32;

        // MacroObject @ SDL_shape.h:42:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_NONSHAPEABLE_WINDOW = -1;

        // MacroObject @ SDL_config_macosx.h:64:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_UNSETENV = 1;

        // MacroObject @ SDL_hints.h:1629:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_X11_NET_WM_PING = "SDL_VIDEO_X11_NET_WM_PING";

        // MacroObject @ SDL_joystick.h:825:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_RIGHT = 2;

        // MacroObject @ SDL_hints.h:1270:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC";

        // MacroObject @ SDL_config_macosx.h:185:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_VIDEO_DRIVER_DUMMY = 1;

        // MacroObject @ SDL_hints.h:1360:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_THREAD_STACK_SIZE = "SDL_THREAD_STACK_SIZE";

        // MacroObject @ SDL_haptic.h:172:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_SINE = 2;

        // MacroObject @ SDL_hints.h:991:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP";

        // MacroObject @ SDL_hints.h:1615:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR";

        // MacroObject @ SDL_haptic.h:360:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_INFINITY = 4294967295;

        // MacroObject @ SDL_config_macosx.h:213:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_RENDER_OGL_ES2 = 1;

        // MacroObject @ SDL_config_macosx.h:242:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_OPENGL_CGL = 1;

        // MacroObject @ SDL_surface.h:55:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_DONTFREE = 4;

        // MacroObject @ SDL_hints.h:1114:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_PREFERRED_LOCALES = "SDL_PREFERRED_LOCALES";

        // MacroObject @ SDL_hints.h:1029:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_AUTO_CAPTURE = "SDL_MOUSE_AUTO_CAPTURE";

        // MacroObject @ SDL_config_macosx.h:116:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LOG = 1;

        // MacroObject @ SDL_config_macosx.h:52:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LIBUNWIND_H = 1;

        // MacroObject @ SDL_hints.h:2013:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED";

        // MacroObject @ SDL_hints.h:295:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUDIO_RESAMPLING_MODE = "SDL_AUDIO_RESAMPLING_MODE";

        // MacroObject @ SDL_config_macosx.h:75:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRLCAT = 1;

        // MacroObject @ SDL_config_macosx.h:161:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_JOYSTICK_IOKIT = 1;

        // MacroObject @ SDL_mouse.h:435:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_BUTTON_LEFT = 1;

        // MacroObject @ SDL_config_macosx.h:251:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_VULKAN = 1;

        // MacroObject @ SDL_sensor.h:99:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const float SDL_STANDARD_GRAVITY = 9.806650161743164f;

        // MacroObject @ SDL_hints.h:1282:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RETURN_KEY_HIDES_IME = "SDL_RETURN_KEY_HIDES_IME";

        // MacroObject @ SDL_haptic.h:262:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_FRICTION = 1024;

        // MacroObject @ SDL_events.h:49:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_RELEASED = 0;

        // MacroObject @ SDL_hints.h:483:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_GAMECONTROLLERTYPE = "SDL_GAMECONTROLLERTYPE";

        // MacroObject @ SDL_hints.h:930:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MAC_BACKGROUND_APP = "SDL_MAC_BACKGROUND_APP";

        // MacroObject @ SDL_config_macosx.h:45:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LIMITS_H = 1;

        // MacroObject @ SDL_config_macosx.h:104:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_COPYSIGN = 1;

        // MacroObject @ SDL_audio.h:96:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_S16MSB = 36880;

        // MacroObject @ SDL_audio.h:115:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_F32MSB = 37152;

        // MacroObject @ SDL_config_macosx.h:133:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_TANF = 1;

        // MacroObject @ SDL_config_macosx.h:167:9
        //	x86_64-apple-darwin
        public const int SDL_JOYSTICK_MFI = 1;

        // MacroObject @ SDL_joystick.h:831:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_LEFTDOWN = 12;

        // MacroObject @ SDL_hints.h:779:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_STEAM = "SDL_JOYSTICK_HIDAPI_STEAM";

        // MacroObject @ SDL_audio.h:106:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_S32MSB = 36896;

        // MacroObject @ SDL_config_macosx.h:137:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SETJMP = 1;

        // MacroObject @ SDL_config_macosx.h:95:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ACOSF = 1;

        // MacroObject @ SDL_audio.h:76:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_MASK_SIGNED = 32768;

        // MacroObject @ SDL.h:88:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_SENSOR = 32768;

        // MacroObject @ SDL_config_macosx.h:225:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_RENDER_METAL = 1;

        // MacroObject @ SDL_version.h:62:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_PATCHLEVEL = 1;

        // MacroObject @ SDL_haptic.h:232:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_SPRING = 128;

        // MacroObject @ SDL_events.h:262:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_TEXTINPUTEVENT_TEXT_SIZE = 32;

        // MacroObject @ SDL_config_macosx.h:105:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_COPYSIGNF = 1;

        // MacroObject @ SDL_config_minimal.h:81:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_TIMERS_DISABLED = 1;

        // MacroObject @ SDL_config_macosx.h:152:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_GCC_ATOMICS = 1;

        // MacroObject @ SDL.h:87:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_EVENTS = 16384;

        // MacroObject @ SDL_rwops.h:42:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_RWOPS_UNKNOWN = 0;

        // MacroObject @ SDL_hints.h:1259:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_SCALE_QUALITY = "SDL_RENDER_SCALE_QUALITY";

        // MacroObject @ SDL_config_macosx.h:68:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_BCOPY = 1;

        // MacroObject @ SDL_hints.h:166:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_APP_NAME = "SDL_APP_NAME";

        // MacroObject @ SDL_version.h:60:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_MAJOR_VERSION = 2;

        // MacroObject @ SDL_hints.h:1439:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_DOUBLE_BUFFER = "SDL_VIDEO_DOUBLE_BUFFER";

        // MacroObject @ SDL.h:90:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_EVERYTHING = 62001;

        // MacroObject @ SDL_hints.h:616:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";

        // MacroObject @ SDL_config_macosx.h:245:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_OPENGL_GLX = 1;

        // MacroObject @ SDL_hints.h:1966:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = "SDL_WINRT_PRIVACY_POLICY_LABEL";

        // MacroObject @ SDL_hints.h:532:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS = "SDL_GAMECONTROLLER_USE_BUTTON_LABELS";

        // MacroObject @ SDL_config_macosx.h:177:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_THREAD_PTHREAD = 1;

        // MacroObject @ SDL_hints.h:367:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_EMSCRIPTEN_ASYNCIFY = "SDL_EMSCRIPTEN_ASYNCIFY";

        // MacroObject @ SDL_config_macosx.h:86:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ATOF = 1;

        // MacroObject @ SDL_config_macosx.h:134:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_TRUNC = 1;

        // MacroObject @ SDL_rwops.h:44:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_RWOPS_STDFILE = 2;

        // MacroObject @ SDL_haptic.h:242:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_DAMPER = 256;

        // MacroObject @ SDL_cpuinfo.h:137:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_CACHELINE_SIZE = 128;

        // MacroObject @ SDL_hints.h:756:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE";

        // MacroObject @ SDL_hints.h:1744:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING = "SDL_WINDOWS_DISABLE_THREAD_NAMING";

        // MacroObject @ SDL_config_macosx.h:107:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_COSF = 1;

        // MacroObject @ SDL_config_macosx.h:98:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ATAN = 1;

        // MacroObject @ SDL_hints.h:1310:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME";

        // MacroObject @ SDL_config_macosx.h:190:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public static string SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR = "/opt/X11/lib/libXrandr.2.dylib";

        // MacroObject @ SDL_hints.h:627:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI = "SDL_JOYSTICK_HIDAPI";

        // MacroObject @ SDL_config_minimal.h:78:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_THREADS_DISABLED = 1;

        // MacroObject @ SDL_hints.h:338:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_BMP_SAVE_LEGACY_FORMAT = "SDL_BMP_SAVE_LEGACY_FORMAT";

        // MacroObject @ SDL_hints.h:902:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_LINUX_HAT_DEADZONES = "SDL_LINUX_HAT_DEADZONES";

        // MacroObject @ SDL_hints.h:1992:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINRT_PRIVACY_POLICY_URL = "SDL_WINRT_PRIVACY_POLICY_URL";

        // MacroObject @ SDL_haptic.h:291:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_AUTOCENTER = 8192;

        // MacroObject @ SDL_config_minimal.h:63:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_JOYSTICK_DISABLED = 1;

        // MacroObject @ SDL_hints.h:801:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED";

        // MacroObject @ SDL_config_macosx.h:117:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LOGF = 1;

        // MacroObject @ SDL_hints.h:1691:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WAVE_FACT_CHUNK = "SDL_WAVE_FACT_CHUNK";

        // MacroObject @ SDL_audio.h:91:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_U8 = 8;

        // MacroObject @ SDL_config_macosx.h:269:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_FILESYSTEM_COCOA = 1;

        // MacroObject @ SDL_audio.h:145:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_ALLOW_SAMPLES_CHANGE = 8;

        // MacroObject @ SDL_config_macosx.h:131:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SQRTF = 1;

        // MacroObject @ SDL_rwops.h:371:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int RW_SEEK_END = 2;

        // MacroObject @ SDL_hints.h:1002:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_RELATIVE_SCALING = "SDL_MOUSE_RELATIVE_SCALING";

        // MacroObject @ SDL_joystick.h:824:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_UP = 1;

        // MacroObject @ SDL_config_macosx.h:100:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ATAN2 = 1;

        // MacroObject @ SDL_hints.h:106:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION = "SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION";

        // MacroObject @ SDL_hints.h:959:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = "SDL_MOUSE_FOCUS_CLICKTHROUGH";

        // MacroObject @ SDL_haptic.h:269:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_CUSTOM = 2048;

        // MacroObject @ SDL_hints.h:980:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = "SDL_MOUSE_RELATIVE_MODE_CENTER";

        // MacroObject @ SDL_hints.h:117:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ANDROID_BLOCK_ON_PAUSE = "SDL_ANDROID_BLOCK_ON_PAUSE";

        // MacroObject @ SDL_haptic.h:183:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_LEFTRIGHT = 4;

        // MacroObject @ SDL_config_macosx.h:50:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRING_H = 1;

        // MacroObject @ SDL_config_macosx.h:132:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_TAN = 1;

        // MacroObject @ SDL_config_macosx.h:184:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_COCOA = 1;

        // MacroObject @ SDL_config_macosx.h:112:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FLOOR = 1;

        // MacroObject @ SDL_hints.h:737:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED";

        // MacroObject @ SDL_hints.h:1603:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_X11_FORCE_EGL = "SDL_VIDEO_X11_FORCE_EGL";

        // MacroObject @ SDL_video.h:136:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_WINDOWPOS_UNDEFINED_MASK = 536805376;

        // MacroObject @ SDL_config_macosx.h:138:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_NANOSLEEP = 1;

        // MacroObject @ SDL_shape.h:44:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_WINDOW_LACKS_SHAPE = -3;

        // MacroObject @ SDL_hints.h:1465:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_EXTERNAL_CONTEXT = "SDL_VIDEO_EXTERNAL_CONTEXT";

        // MacroObject @ SDL_hints.h:392:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ENABLE_STEAM_CONTROLLERS = "SDL_ENABLE_STEAM_CONTROLLERS";

        // MacroObject @ SDL_hints.h:1882:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN";

        // MacroObject @ SDL_config_macosx.h:56:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_MALLOC = 1;

        // MacroObject @ SDL_config_macosx.h:127:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SCALBNF = 1;

        // MacroObject @ SDL_hints.h:454:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG";

        // MacroObject @ SDL_audio.h:73:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_MASK_BITSIZE = 255;

        // MacroObject @ SDL_hints.h:129:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO";

        // MacroObject @ SDL_config_macosx.h:47:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SIGNAL_H = 1;

        // MacroObject @ SDL_shape.h:43:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_INVALID_SHAPE_ARGUMENT = -2;

        // MacroObject @ SDL_config_macosx.h:259:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_METAL = 1;

        // MacroObject @ SDL.h:89:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_NOPARACHUTE = 1048576;

        // MacroObject @ SDL_config_macosx.h:83:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRTOULL = 1;

        // MacroObject @ SDL_config_macosx.h:122:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_POW = 1;

        // MacroObject @ SDL_hints.h:1644:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_X11_XINERAMA = "SDL_VIDEO_X11_XINERAMA";

        // MacroObject @ SDL_audio.h:114:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_F32LSB = 33056;

        // MacroObject @ SDL_config_macosx.h:135:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_TRUNCF = 1;

        // MacroObject @ SDL_config_macosx.h:96:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ASIN = 1;

        // MacroObject @ SDL_hints.h:964:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = "SDL_MOUSE_NORMAL_SPEED_SCALE";

        // MacroObject @ SDL_hints.h:269:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = "SDL_AUDIO_DEVICE_STREAM_ROLE";

        // MacroObject @ SDL_config_macosx.h:174:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_LOADSO_DLOPEN = 1;

        // MacroObject @ SDL_config_macosx.h:59:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FREE = 1;

        // MacroObject @ SDL_joystick.h:828:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_RIGHTUP = 3;

        // MacroObject @ SDL_config_minimal.h:34:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int HAVE_STDARG_H = 1;

        // MacroObject @ SDL_haptic.h:252:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_INERTIA = 512;

        // MacroObject @ SDL_hints.h:1850:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_DPI_AWARENESS = "SDL_WINDOWS_DPI_AWARENESS";

        // MacroObject @ SDL.h:85:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_HAPTIC = 4096;

        // MacroObject @ SDL_config_macosx.h:157:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_DRIVER_DUMMY = 1;

        // MacroObject @ SDL_config_macosx.h:149:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_O_CLOEXEC = 1;

        // MacroObject @ SDL_stdinc.h:610:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const double M_PI = 3.141592653589793;

        // MacroObject @ SDL_hints.h:821:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_RAWINPUT = "SDL_JOYSTICK_RAWINPUT";

        // MacroObject @ SDL_hints.h:1520:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR";

        // MacroObject @ SDL_hints.h:1769:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS = "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS";

        // MacroObject @ SDL_hints.h:2070:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_X11_WINDOW_TYPE = "SDL_X11_WINDOW_TYPE";

        // MacroObject @ SDL_hints.h:790:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH = "SDL_JOYSTICK_HIDAPI_SWITCH";

        // MacroObject @ SDL_config_minimal.h:75:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_LOADSO_DISABLED = 1;

        // MacroObject @ SDL_config_macosx.h:73:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRLEN = 1;

        // MacroObject @ SDL_config_macosx.h:144:12
        //	x86_64-apple-darwin
        public const int HAVE_IMMINTRIN_H = 1;

        // MacroObject @ SDL_rwops.h:45:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_RWOPS_JNIFILE = 3;

        // MacroObject @ SDL_config_macosx.h:57:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_CALLOC = 1;

        // MacroObject @ SDL_config_macosx.h:40:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int STDC_HEADERS = 1;

        // MacroObject @ SDL_events.h:1108:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_DISABLE = 0;

        // MacroObject @ SDL_hints.h:877:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = "SDL_KMSDRM_REQUIRE_DRM_MASTER";

        // MacroObject @ SDL_hints.h:592:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_IME_SUPPORT_EXTENDED_TEXT = "SDL_IME_SUPPORT_EXTENDED_TEXT";

        // MacroObject @ SDL_config_macosx.h:156:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_AUDIO_DRIVER_DISK = 1;

        // MacroObject @ SDL_audio.h:143:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_ALLOW_FORMAT_CHANGE = 2;

        // MacroObject @ SDL_hints.h:2022:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_DIRECTINPUT_ENABLED = "SDL_DIRECTINPUT_ENABLED";

        // MacroObject @ SDL_config_macosx.h:48:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int HAVE_STDINT_H = 1;

        // MacroObject @ SDL_hints.h:728:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_PS5 = "SDL_JOYSTICK_HIDAPI_PS5";

        // MacroObject @ SDL_config_macosx.h:124:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ROUND = 1;

        // MacroObject @ SDL_audio.h:95:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_U16MSB = 4112;

        // MacroObject @ SDL_hints.h:948:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = "SDL_MOUSE_DOUBLE_CLICK_TIME";

        // MacroObject @ SDL_hints.h:249:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUDIO_DEVICE_STREAM_NAME = "SDL_AUDIO_DEVICE_STREAM_NAME";

        // MacroObject @ SDL_config_macosx.h:209:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_RENDER_OGL = 1;

        // MacroObject @ SDL_touch.h:61:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static uint SDL_TOUCH_MOUSEID = 4294967295;

        // MacroObject @ SDL_video.h:145:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_WINDOWPOS_CENTERED_MASK = 805240832;

        // MacroObject @ SDL_config_macosx.h:103:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_CEILF = 1;

        // MacroObject @ SDL_config_macosx.h:72:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_MEMCMP = 1;

        // MacroObject @ SDL_config_macosx.h:87:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRCMP = 1;

        // MacroObject @ SDL_hints.h:572:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_IME_INTERNAL_EDITING = "SDL_IME_INTERNAL_EDITING";

        // MacroObject @ SDL_config_macosx.h:109:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_EXPF = 1;

        // MacroObject @ SDL_hints.h:2050:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUDIO_INCLUDE_MONITORS = "SDL_AUDIO_INCLUDE_MONITORS";

        // MacroObject @ SDL_mouse.h:437:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_BUTTON_RIGHT = 3;

        // MacroObject @ SDL_config_macosx.h:118:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LOG10 = 1;

        // MacroObject @ SDL_hints.h:1535:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = "SDL_VIDEO_WAYLAND_MODE_EMULATION";

        // MacroObject @ SDL_haptic.h:330:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAPTIC_CARTESIAN = 1;

        // MacroObject @ SDL_hints.h:2004:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = "SDL_X11_FORCE_OVERRIDE_REDIRECT";

        // MacroObject @ SDL_hints.h:82:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ALLOW_TOPMOST = "SDL_ALLOW_TOPMOST";

        // MacroObject @ SDL_audio.h:94:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_S16LSB = 32784;

        // MacroObject @ SDL_config_macosx.h:51:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SYS_TYPES_H = 1;

        // MacroObject @ SDL_config_macosx.h:266:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_POWER_MACOSX = 1;

        // MacroObject @ SDL_events.h:1107:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_IGNORE = 0;

        // MacroObject @ SDL_config_macosx.h:101:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ATAN2F = 1;

        // MacroObject @ SDL_config_macosx.h:70:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_MEMCPY = 1;

        // MacroObject @ SDL.h:81:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_TIMER = 1;

        // MacroObject @ SDL_config_macosx.h:196:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM = 1;

        // MacroObject @ SDL_hints.h:146:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_ANDROID_TRAP_BACK_BUTTON = "SDL_ANDROID_TRAP_BACK_BUTTON";

        // MacroObject @ SDL_config_macosx.h:136:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SIGACTION = 1;

        // MacroObject @ SDL_config_macosx.h:178:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_THREAD_PTHREAD_RECURSIVE_MUTEX = 1;

        // MacroObject @ SDL_haptic.h:195:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_TRIANGLE = 8;

        // MacroObject @ SDL_config_macosx.h:181:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_TIMER_UNIX = 1;

        // MacroObject @ SDL_rwops.h:47:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_RWOPS_MEMORY_RO = 5;

        // MacroObject @ SDL_hints.h:1073:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_OPENGL_ES_DRIVER = "SDL_OPENGL_ES_DRIVER";

        // MacroObject @ SDL_config_macosx.h:34:13
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SIZEOF_VOIDP = 8;

        // MacroObject @ SDL_mouse.h:439:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_BUTTON_X2 = 5;

        // MacroObject @ SDL_hints.h:603:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_IOS_HIDE_HOME_INDICATOR = "SDL_IOS_HIDE_HOME_INDICATOR";

        // MacroObject @ SDL_hints.h:1192:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_RENDER_DIRECT3D11_DEBUG";

        // MacroObject @ SDL_config_macosx.h:91:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_VSSCANF = 1;

        // MacroObject @ SDL_config_macosx.h:43:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_FLOAT_H = 1;

        // MacroObject @ SDL_config_minimal.h:56:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int HAVE_GCC_SYNC_LOCK_TEST_AND_SET = 1;

        // MacroObject @ SDL_audio.h:142:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = 1;

        // MacroObject @ SDL_config_macosx.h:195:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_X11_XSHAPE = 1;

        // MacroObject @ SDL_haptic.h:204:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_SAWTOOTHUP = 16;

        // MacroObject @ SDL.h:84:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_JOYSTICK = 512;

        // MacroObject @ SDL_config_macosx.h:205:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS = 1;

        // MacroObject @ SDL_hints.h:1236:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_LOGICAL_SIZE_MODE = "SDL_RENDER_LOGICAL_SIZE_MODE";

        // MacroObject @ SDL_hints.h:1790:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_INTRESOURCE_ICON = "SDL_WINDOWS_INTRESOURCE_ICON";

        // MacroObject @ SDL_hints.h:1329:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL";

        // MacroObject @ SDL_config_macosx.h:233:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_OPENGL = 1;

        // MacroObject @ SDL_config_macosx.h:193:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_DRIVER_X11_XRANDR = 1;

        // MacroObject @ SDL_config_macosx.h:77:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRRCHR = 1;

        // MacroObject @ SDL_hints.h:1893:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN = "SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN";

        // MacroObject @ SDL_hints.h:1016:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_TOUCH_EVENTS = "SDL_MOUSE_TOUCH_EVENTS";

        // MacroObject @ SDL.h:82:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_AUDIO = 16;

        // MacroObject @ SDL_hints.h:1506:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR";

        // MacroObject @ SDL_config_macosx.h:94:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ACOS = 1;

        // MacroObject @ SDL_audio.h:1121:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_MIX_MAXVOLUME = 128;

        // MacroObject @ SDL_events.h:1109:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_ENABLE = 1;

        // MacroObject @ SDL_log.h:54:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_MAX_LOG_MESSAGE = 4096;

        // MacroObject @ SDL_hints.h:1225:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER";

        // MacroObject @ SDL_hints.h:2094:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = "SDL_QUIT_ON_LAST_WINDOW_CLOSE";

        // MacroObject @ SDL_hints.h:1247:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_RENDER_OPENGL_SHADERS = "SDL_RENDER_OPENGL_SHADERS";

        // MacroObject @ SDL_config_macosx.h:78:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRSTR = 1;

        // MacroObject @ SDL_audio.h:105:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int AUDIO_S32LSB = 32800;

        // MacroObject @ SDL.h:83:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_INIT_VIDEO = 32;

        // MacroObject @ SDL_hints.h:938:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";

        // MacroObject @ SDL_config_macosx.h:42:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_CTYPE_H = 1;

        // MacroObject @ SDL_config_macosx.h:76:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRCHR = 1;

        // MacroObject @ SDL_config_macosx.h:119:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LOG10F = 1;

        // MacroObject @ SDL_config_macosx.h:188:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public static string SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT = "/opt/X11/lib/libXext.6.dylib";

        // MacroObject @ SDL_config_macosx.h:69:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_MEMSET = 1;

        // MacroObject @ SDL_joystick.h:823:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_CENTERED = 0;

        // MacroObject @ SDL_config_macosx.h:123:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_POWF = 1;

        // MacroObject @ SDL_config_macosx.h:155:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_AUDIO_DRIVER_COREAUDIO = 1;

        // MacroObject @ SDL_config_macosx.h:191:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public static string SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS = "/opt/X11/lib/libXss.1.dylib";

        // MacroObject @ SDL_config_macosx.h:89:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_STRCASECMP = 1;

        // MacroObject @ SDL_mouse.h:436:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_BUTTON_MIDDLE = 2;

        // MacroObject @ SDL_config_macosx.h:160:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_JOYSTICK_HIDAPI = 1;

        // MacroObject @ SDL_hints.h:943:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = "SDL_MOUSE_DOUBLE_CLICK_RADIUS";

        // MacroObject @ SDL_hints.h:717:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE";

        // MacroObject @ SDL_config_macosx.h:236:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int SDL_VIDEO_OPENGL_ES2 = 1;

        // MacroObject @ SDL_config_macosx.h:41:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ALLOCA_H = 1;

        // MacroObject @ SDL_hints.h:686:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_SHIELD = "SDL_JOYSTICK_HIDAPI_SHIELD";

        // MacroObject @ SDL_hints.h:884:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_DEVICE = "SDL_JOYSTICK_DEVICE";

        // MacroObject @ SDL_joystick.h:387:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_VIRTUAL_JOYSTICK_DESC_VERSION = 1;

        // MacroObject @ SDL_config_macosx.h:62:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SETENV = 1;

        // MacroObject @ SDL_audio.h:205:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_AUDIOCVT_MAX_FILTERS = 9;

        // MacroObject @ SDL_config_macosx.h:65:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_QSORT = 1;

        // MacroObject @ SDL_config_minimal.h:87:9
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_FILESYSTEM_DUMMY = 1;

        // MacroObject @ SDL_hints.h:1785:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL";

        // MacroObject @ SDL_hints.h:1635:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEO_X11_WINDOW_VISUALID = "SDL_VIDEO_X11_WINDOW_VISUALID";

        // MacroObject @ SDL_joystick.h:829:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAT_RIGHTDOWN = 6;

        // MacroObject @ SDL_config_macosx.h:121:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LROUNDF = 1;

        // MacroObject @ SDL_hints.h:834:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT";

        // MacroObject @ SDL_config_macosx.h:128:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_SIN = 1;

        // MacroObject @ SDL_hints.h:2118:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_VIDEODRIVER = "SDL_VIDEODRIVER";

        // MacroObject @ SDL_hints.h:1820:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_USE_D3D9EX = "SDL_WINDOWS_USE_D3D9EX";

        // MacroObject @ SDL_hints.h:854:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_THREAD = "SDL_JOYSTICK_THREAD";

        // MacroObject @ SDL_config_macosx.h:97:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_ASINF = 1;

        // MacroObject @ SDL_hints.h:664:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = "SDL_JOYSTICK_HIDAPI_JOY_CONS";

        // MacroObject @ SDL_hints.h:509:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT";

        // MacroObject @ SDL_hints.h:352:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_DISPLAY_USABLE_BOUNDS = "SDL_DISPLAY_USABLE_BOUNDS";

        // MacroObject @ SDL_hints.h:922:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_LINUX_JOYSTICK_DEADZONES = "SDL_LINUX_JOYSTICK_DEADZONES";

        // MacroObject @ SDL_hints.h:843:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_JOYSTICK_ROG_CHAKRAM = "SDL_JOYSTICK_ROG_CHAKRAM";

        // MacroObject @ SDL_config_macosx.h:46:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_MATH_H = 1;

        // MacroObject @ SDL_haptic.h:323:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const int SDL_HAPTIC_POLAR = 0;

        // MacroObject @ SDL_hints.h:307:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_AUTO_UPDATE_JOYSTICKS = "SDL_AUTO_UPDATE_JOYSTICKS";

        // MacroObject @ SDL_hints.h:1712:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WAVE_RIFF_CHUNK_SIZE = "SDL_WAVE_RIFF_CHUNK_SIZE";

        // MacroObject @ SDL_haptic.h:163:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public const uint SDL_HAPTIC_CONSTANT = 1;

        // MacroObject @ SDL_hints.h:1755:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        //	x86_64-unknown-linux-gnu
        //	aarch64-unknown-linux-gnu
        public static string SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = "SDL_WINDOWS_ENABLE_MESSAGELOOP";

        // MacroObject @ SDL_config_macosx.h:120:9
        //	aarch64-apple-darwin
        //	x86_64-apple-darwin
        public const int HAVE_LROUND = 1;

        #endregion

        #region Setup & Teardown

        public static void Setup()
        {
            PreCompile();
        }

        private static void PreCompile()
        {
            var methods = typeof(SDL).GetMethods(
                System.Reflection.BindingFlags.DeclaredOnly |
                System.Reflection.BindingFlags.NonPublic |
                System.Reflection.BindingFlags.Public |
                System.Reflection.BindingFlags.Instance |
                System.Reflection.BindingFlags.Static);

            foreach (var method in methods)
            {
                if (method.GetMethodBody() == null)
                {
                    RuntimeHelpers.PrepareMethod(method.MethodHandle);
                }
            }
        }

        public static void Teardown()
        {
        }

        #endregion

        #region Runtime

        public static class Runtime
        {

            /// <summary>
            ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
            ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
            ///     <c>true</c>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CBool : IEquatable<CBool>
            {
                private readonly byte _value;

                private CBool(bool value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static implicit operator CBool(bool value)
                {
                    return FromBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static CBool FromBoolean(bool value)
                {
                    return new CBool(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static implicit operator bool(CBool value)
                {
                    return ToBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static bool ToBoolean(CBool value)
                {
                    return Convert.ToBoolean(value._value);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToBoolean(this).ToString();
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CBool b && Equals(b);
                }

                /// <inheritdoc />
                public bool Equals(CBool other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CBool left, CBool right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CBool left, CBool right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CBool left, CBool right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
            ///     an unmanaged context.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
            {
                private readonly byte _value;

                private CChar(byte value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static implicit operator CChar(byte value)
                {
                    return FromByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static CChar FromByte(byte value)
                {
                    return new CChar(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static implicit operator byte(CChar value)
                {
                    return ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static byte ToByte(CChar value)
                {
                    return value._value;
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CChar value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(byte other)
                {
                    return _value == other;
                }

                /// <inheritdoc />
                public bool Equals(CChar other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CChar left, CChar right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CChar left, CChar right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CChar left, CChar right)
                {
                    return left._value == right._value;
                }
            }

#pragma warning disable CS1591

            /// <summary>
            ///     Utility methods for dealing with native C libraries.
            /// </summary>
            public static class CLibrary
            {
                /// <summary>
                ///     Loads a C shared library (`.dll`/`.dylib`/`.so`) into the application's memory space given the C
                ///     library's file name, partially qualified file path, or a fully qualified file path.
                /// </summary>
                /// <param name="name">The C library's file name, partially qualified file path, or a fully qualified file path.</param>
                /// <returns>A <see cref="IntPtr" /> handle if the C library was loaded; otherwise, a <see cref="IntPtr.Zero" /> handle.</returns>
                /// <remarks>
                ///     <para>
                ///         If the library was already loaded, calling <see cref="Load" /> returns the handle of the previous loaded
                ///         library and the reference count for the handle is incremented.
                ///     </para>
                ///     <para>You must call <see cref="Free" /> when finished using a handle of a dynamically loaded library.</para>
                /// </remarks>
                public static IntPtr Load(string name)
                {
                    if (IsLinux)
                    {
                        return libdl.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    if (IsWindows)
                    {
                        return Kernel32.LoadLibrary(name);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlopen(name, 0x101); // RTLD_GLOBAL | RTLD_LAZY
                    }

                    return IntPtr.Zero;
                }

                /// <summary>
                ///     Unloads a C shared library from the application's memory space given the library's handle.
                /// </summary>
                /// <param name="handle">The library's handle previously created by calling <see cref="Load" />.</param>
                /// <remarks>
                ///     <para>
                ///         If the library was loaded multiple times, the reference count for the handle is decremented upon calling
                ///         <see cref="Free" /> and the library is not yet unloaded from memory.
                ///     </para>
                /// </remarks>
                public static void Free(IntPtr handle)
                {
                    if (IsLinux)
                    {
                        libdl.dlclose(handle);
                    }

                    if (IsWindows)
                    {
                        Kernel32.FreeLibrary(handle);
                    }

                    if (IsDarwin)
                    {
                        libSystem.dlclose(handle);
                    }
                }

                public static IntPtr GetExport(IntPtr handle, string symbolName)
                {
                    if (IsLinux)
                    {
                        return libdl.dlsym(handle, symbolName);
                    }

                    if (IsWindows)
                    {
                        return Kernel32.GetProcAddress(handle, symbolName);
                    }

                    if (IsDarwin)
                    {
                        return libSystem.dlsym(handle, symbolName);
                    }

                    return IntPtr.Zero;
                }

                private static bool IsWindows
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsWindows();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
#else
            false;
#endif
                }

                private static bool IsDarwin
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsMacOS() || 
            OperatingSystem.IsMacCatalyst() ||
            OperatingSystem.IsIOS() || 
            OperatingSystem.IsTvOS() ||
            OperatingSystem.IsWatchOS();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
#else
            false;
#endif
                }

                private static bool IsLinux
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get =>
#if NET5_0_OR_GREATER
            OperatingSystem.IsLinux() ||
            OperatingSystem.IsFreeBSD() ||
            OperatingSystem.IsAndroid();
#elif NETFRAMEWORK || NETSTANDARD || NETCOREAPP
            RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
#else
            false;
#endif
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class libdl
                {
                    private const string LibraryName = "libdl";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class libSystem
                {
                    private const string LibraryName = "libSystem";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlopen(string fileName, int flags);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi)]
                    public static extern IntPtr dlsym(IntPtr handle, string name);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall)]
                    public static extern int dlclose(IntPtr handle);
                }

                [System.Security.SuppressUnmanagedCodeSecurity]
                private static class Kernel32
                {
                    private const string LibraryName = "kernel32";

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    public static extern IntPtr LoadLibrary(string fileName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Ansi,
                        ExactSpelling = true, SetLastError = true)]
                    public static extern IntPtr GetProcAddress(IntPtr module, string procName);

                    [DllImport(LibraryName, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
                    public static extern int FreeLibrary(IntPtr module);
                }
            }

            /// <summary>
            ///     A pointer value type of bytes that represent a string; the C type `char*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CString : IEquatable<CString>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CString(string s)
                {
                    _pointer = CStrings.CString(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromIntPtr(nint value)
                {
                    return new CString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString From(byte* value)
                {
                    return new CString((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CString value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CString value)
                {
                    return CStrings.String(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromString(string s)
                {
                    return CStrings.CString(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.String(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CString value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CString other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CString left, CString right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }
            }

            /// <summary>
            ///     Utility methods for interoperability with C style strings in C#.
            /// </summary>
            public static unsafe class CStrings
            {
                private static readonly Dictionary<uint, CString> StringHashesToPointers = new();
                private static readonly Dictionary<nint, string> PointersToStrings = new();
                private static readonly Dictionary<uint, CStringWide> StringHashesToPointersWide = new();
                private static readonly Dictionary<nint, string> PointersToStringsWide = new();

                /// <summary>
                ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string String(CString value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStrings.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointers.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStrings[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringAnsi(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointers.Add(hash, value);
                    PointersToStrings.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string StringWide(CStringWide value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStringsWide.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStringsWide[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringUni(pointer2._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointersWide.Add(hash, value);
                    PointersToStringsWide.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
                ///     <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CString CString(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointers.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalAnsi(str);
                    StringHashesToPointers.Add(hash, new CString(pointer));
                    PointersToStrings.Add(pointer, str);

                    return new CString(pointer);
                }

                /// <summary>
                ///     Converts a C string pointer (one dimensional byte array terminated by a
                ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CStringWide CStringWide(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalUni(str);
                    StringHashesToPointersWide.Add(hash, new CStringWide(pointer));
                    PointersToStringsWide.Add(pointer, str);

                    return new CStringWide(pointer);
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
                ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CString* CStringArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CString(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
                ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CStringWide(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Frees the memory for all previously allocated C strings and releases references to all <see cref="string" />
                ///     objects which happened during <see cref="String" />, <see cref="StringWide" />, <see cref="CString" />
                ///     or <see cref="CStringWide" />. Does <b>not</b> garbage collect.
                /// </summary>
                public static void FreeAllStrings()
                {
                    foreach (var (ptr, _) in PointersToStrings)
                    {
                        Marshal.FreeHGlobal(ptr);
                    }

                    // We can not guarantee that the application has not a strong reference the string since it was allocated,
                    //  so we have to let the GC take the wheel here. Thus, this method should NOT garbage collect; that's
                    //  on the responsibility of the application developer. The best we can do is just remove any and all strong
                    //  references we have here to the strings.

                    StringHashesToPointers.Clear();
                    PointersToStrings.Clear();
                }

                /// <summary>
                ///     Frees the memory for specific previously allocated C strings and releases associated references to
                ///     <see cref="string" /> objects which happened during <see cref="String" /> or
                ///     <see cref="CString" />. Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="pointers">The C string pointers.</param>
                /// <param name="count">The number of C string pointers.</param>
                public static void FreeCStrings(CString* pointers, int count)
                {
                    for (var i = 0; i < count; i++)
                    {
                        var ptr = pointers[i];
                        FreeCString(ptr);
                    }

                    Marshal.FreeHGlobal((IntPtr)pointers);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="String" /> or <see cref="CString" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCString(CString value)
                {
                    if (!PointersToStrings.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointers.Remove(hash);
                    PointersToStrings.Remove(value._pointer);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="StringWide" /> or <see cref="CStringWide" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCStringWide(CStringWide value)
                {
                    if (!PointersToStringsWide.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointersWide.Remove(hash);
                    PointersToStringsWide.Remove(value._pointer);
                }

                // djb2 is named after https://en.wikipedia.org/wiki/Daniel_J._Bernstein
                //  References:
                //  (1) https://stackoverflow.com/a/7666577/2171957
                //  (2) http://www.cse.yorku.ca/~oz/hash.html
                //  (3) https://groups.google.com/g/comp.lang.c/c/lSKWXiuNOAk/m/zstZ3SRhCjgJ
                private static uint Djb2(byte* str)
                {
                    uint hash = 5381;

                    unchecked
                    {
                        uint c;
                        while ((c = *str++) != 0)
                        {
                            hash = (hash << 5) + hash + c; // hash * 33 + c
                        }
                    }

                    return hash;
                }

                private static uint Djb2(string str)
                {
                    uint hash = 5381;

                    // ReSharper disable once ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator
                    foreach (var c in str)
                    {
                        hash = (hash << 5) + hash + c; // hash * 33 + c
                    }

                    return hash;
                }
            }

            /// <summary>
            ///     A pointer value type that represents a wide string; C type `wchar_t*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CStringWide : IEquatable<CStringWide>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CStringWide(string s)
                {
                    _pointer = CStrings.CStringWide(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromIntPtr(nint value)
                {
                    return new CStringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide From(byte* value)
                {
                    return new CStringWide((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CStringWide value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CStringWide value)
                {
                    return CStrings.StringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromString(string s)
                {
                    return CStrings.CStringWide(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.StringWide(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CStringWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CStringWide other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CStringWide left, CStringWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }
            }
        }

        #endregion
    }
}